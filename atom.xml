<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[liuxing's blog]]></title>
  <subtitle><![CDATA[青春须早为,岂能长少年！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://liuxing.info//"/>
  <updated>2015-06-16T13:05:45.000Z</updated>
  <id>http://liuxing.info//</id>
  
  <author>
    <name><![CDATA[liuxing]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[GitHub博客搭建]]></title>
    <link href="http://liuxing.info/2015/06/14/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://liuxing.info/2015/06/14/GitHub博客搭建/</id>
    <published>2015-06-13T18:52:00.000Z</published>
    <updated>2015-06-16T13:05:45.000Z</updated>
    <content type="html"><![CDATA[<p><em>GitHub带你装逼带你飞！你值得拥有！</em></p>
<hr>
<h2 id="介绍">介绍</h2><p><em><a href="https://github.com/" target="_blank" rel="external">GitHub</a>很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。</em><br><em>GitHub作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如<a href="https://github.com/jquery/jquery" target="_blank" rel="external">jQuery</a>、<a href="https://github.com/twitter/bootstrap" target="_blank" rel="external">Twitter</a>等。</em><br><em>为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，GitHub替你想到了这一点，他提供了<a href="http://pages.github.com" target="_blank" rel="external">GitHub Pages</a>的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</em></p>
<p>GitHub Pages有以下几个优点</p>
<ul>
<li><em>轻量级的博客系统，没有麻烦的配置</em></li>
<li><em>使用标记语言，比如 <a href="http://markdown.tw" target="_blank" rel="external">Markdown</a></em></li>
<li><em>无需自己搭建服务器</em></li>
<li><em>根据GitHub的限制，对应的每个站有300MB空间</em></li>
<li><em>可以绑定自己的域名</em></li>
</ul>
<p>当然他也有缺点</p>
<ul>
<li><em>使用<a href="https://github.com/jekyll/jekyll" target="_blank" rel="external">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等。</em></li>
<li><em>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。</em></li>
<li><em>基于Git，很多东西需要动手，不像Wordpress有强大的后台。</em></li>
</ul>
<p>大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。</p>
<h2 id="GitHub配置">GitHub配置</h2><h3 id="注册账号">注册账号</h3><p>传送口：<a href="https://github.com/join" target="_blank" rel="external">https://github.com/join</a> ，自行搞定，否则放弃吧…</p>
<p><strong>PS</strong>：<em><code>不要取奇怪的用户名，比如大小写混合，建议小写字母+数字组合，否则pages会碰到问题！</code></em></p>
<h3 id="配置Pages">配置Pages</h3><p><strong>新增仓库</strong>：<a href="https://github.com/new" target="_blank" rel="external">https://github.com/new</a></p>
<ul>
<li>Repository name：github账号.github.io</li>
<li>Description：随便输入点描述</li>
<li>public</li>
<li>Initialize this repository with a README</li>
<li>.gitignore 选择初始的文件忽略，我选的java</li>
<li>Licenses：我选的NPL（GNU General Public License v2.0）</li>
</ul>
<p><strong>配置</strong></p>
<ul>
<li>选择右侧操作区的<code>settings</code></li>
<li>选择<code>Launch automatic page generator</code></li>
<li>输入一些基本说明，非必要</li>
<li>选择<code>Load README.md</code></li>
<li>继续<code>Continue to layouts</code></li>
<li>选择模板（随便选个）</li>
<li>发布<code>Publish page</code></li>
<li>此时进入<code>settings</code>应该会有<code>Your site is published at http://username.github.io</code>的条提示，访问一下，神奇吧！</li>
<li>如果404，请检查你的仓库名或账号名，删除仓库重来，删除也是在<code>settings</code>最底部</li>
</ul>
<h2 id="绑定独立域名">绑定独立域名</h2><h3 id="购买域名">购买域名</h3><p>不绑定独立域名则可以直接跳到 <strong>使用hexo</strong></p>
<p>传送门：<a href="https://www.godaddy.com" target="_blank" rel="external">https://www.godaddy.com</a> 支持支付宝<br>域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力。<br>记得先找优惠券：<a href="http://www.dute.me" target="_blank" rel="external">http://www.dute.me</a></p>
<p>推荐几个翻译插件<br><a href="https://chrome.google.com/webstore/detail/%E5%A4%9A%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg" target="_blank" rel="external">多词典划译</a><br><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb" target="_blank" rel="external">Google翻译</a></p>
<p>没有VPN？<br>注册红杏：<a href="http://honx.in/_U9m44oIaA3c2nFTX" target="_blank" rel="external">http://honx.in/_U9m44oIaA3c2nFTX</a><br>公益红杏：<a href="http://help.honx.in/posts/view/32854" target="_blank" rel="external">http://help.honx.in/posts/view/32854</a> </p>
<h3 id="DNS解析">DNS解析</h3><p>传送门：<a href="https://www.dnspod.cn/" target="_blank" rel="external">https://www.dnspod.cn/</a></p>
<ul>
<li>首先添加域名记录，可参考DNSPod的帮助文档：<a href="https://www.dnspod.cn/Support" target="_blank" rel="external">https://www.dnspod.cn/Support</a><br>  添加域名记录后，进入会有个加载配置啥的，不要保存，使用默认的两个解析就行</li>
<li>在DNSPod自己的域名下添加一条<a href="http://baike.baidu.com/view/65575.htm" target="_blank" rel="external">A记录</a>，地址就是Github Pages的服务IP地址：103.245.222.133（最好自行ping获取最新的ip）</li>
<li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href="https://www.dnspod.cn/support/index/fid/119" target="_blank" rel="external">Godaddy注册的域名如何使用DNSPod</a></li>
<li>等待域名解析生效</li>
</ul>
<h3 id="绑定">绑定</h3><p>在刚创建的GitHub仓库根目录下添加<code>CNAME</code>文件，写入你申请的域名，等待生效。</p>
<h2 id="使用hexo">使用hexo</h2><p>基于github pages的不足，我们使用hexo博客框架</p>
<p>因为hexo的文档写的太好了，就没我啥事了！</p>
<p>传送门：<a href="http://hexo.io/zh-cn/" target="_blank" rel="external">http://hexo.io/zh-cn/</a></p>
<p>有任何问题，欢迎评论交流！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>GitHub带你装逼带你飞！你值得拥有！</em></p>
<hr>
<h2 id="介绍">介绍</h2><p><em><a href="https://github.com/" target="_blank" rel="external">GitHub</a>很]]>
    </summary>
    
      <category term="Blog" scheme="http://liuxing.info/tags/Blog/"/>
    
      <category term="DNSPod" scheme="http://liuxing.info/tags/DNSPod/"/>
    
      <category term="GitHub Pages" scheme="http://liuxing.info/tags/GitHub-Pages/"/>
    
      <category term="Godaddy" scheme="http://liuxing.info/tags/Godaddy/"/>
    
      <category term="Hexo" scheme="http://liuxing.info/tags/Hexo/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RestTemplate最佳实践]]></title>
    <link href="http://liuxing.info/2015/05/21/RestTemplate%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://liuxing.info/2015/05/21/RestTemplate最佳实践/</id>
    <published>2015-05-21T02:56:27.000Z</published>
    <updated>2015-06-16T13:19:28.000Z</updated>
    <content type="html"><![CDATA[<p><em>什么是RestTemplate？</em></p>
<blockquote>
<p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率。<br>调用RestTemplate的默认构造函数，RestTemplate对象在底层通过使用java.net包下的实现创建HTTP 请求，可以通过使用ClientHttpRequestFactory指定不同的HTTP请求方式。<br>ClientHttpRequestFactory接口主要提供了两种实现方式</p>
<ul>
<li>一种是SimpleClientHttpRequestFactory，使用J2SE提供的方式（既java.net包提供的方式）创建底层的Http请求连接。</li>
<li>一种方式是使用HttpComponentsClientHttpRequestFactory方式，底层使用HttpClient访问远程的Http服务，使用HttpClient可以配置连接池和证书等信息。</li>
</ul>
</blockquote>
<hr>
<h2 id="xml配置的方式">xml配置的方式</h2><p>请查看RestTemplate源码了解细节，知其然知其所以然！</p>
<p>RestTemplate默认是使用SimpleClientHttpRequestFactory，内部是调用jdk的HttpConnection，默认超时为-1</p>
<p>@Autowire<br>RestTemplate simpleRestTemplate<br>@Autowire<br>RestTemplate restTemplate</p>
<h3 id="基于jdk的spring的RestTemplate">基于jdk的spring的RestTemplate</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span><br><span class="line">       <span class="attribute">default-autowire</span>=<span class="value">"byName"</span> <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一、使用jdk的实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.requestFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.client.SimpleClientHttpRequestFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"readTimeout"</span> <span class="attribute">value</span>=<span class="value">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connectTimeout"</span> <span class="attribute">value</span>=<span class="value">"5000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"simpleRestTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.client.RestTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">ref</span>=<span class="value">"ky.requestFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.FormHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用Httpclient连接池的方式">使用Httpclient连接池的方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span><br><span class="line">       <span class="attribute">default-autowire</span>=<span class="value">"byName"</span> <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式二、使用httpclient的实现，带连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.pollingConnectionManager"</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.impl.conn.PoolingHttpClientConnectionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--整个连接池的并发--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxTotal"</span> <span class="attribute">value</span>=<span class="value">"1000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--每个主机的并发--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultMaxPerRoute"</span> <span class="attribute">value</span>=<span class="value">"1000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.httpClientBuilder"</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.impl.client.HttpClientBuilder"</span> <span class="attribute">factory-method</span>=<span class="value">"create"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connectionManager"</span> <span class="attribute">ref</span>=<span class="value">"ky.pollingConnectionManager"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启重试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"retryHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.impl.client.DefaultHttpRequestRetryHandler"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultHeaders"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.message.BasicHeader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"User-Agent"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.message.BasicHeader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"Accept-Encoding"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"gzip,deflate"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.message.BasicHeader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"Accept-Language"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"zh-CN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.httpClient"</span> <span class="attribute">factory-bean</span>=<span class="value">"ky.httpClientBuilder"</span> <span class="attribute">factory-method</span>=<span class="value">"build"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.clientHttpRequestFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.client.HttpComponentsClientHttpRequestFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">ref</span>=<span class="value">"ky.httpClient"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接超时时间，毫秒--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connectTimeout"</span> <span class="attribute">value</span>=<span class="value">"5000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--读写超时时间，毫秒--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"readTimeout"</span> <span class="attribute">value</span>=<span class="value">"10000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"restTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.client.RestTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">ref</span>=<span class="value">"ky.clientHttpRequestFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"errorHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.client.DefaultResponseErrorHandler"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.FormHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="bean初始化+静态工具">bean初始化+静态工具</h2><p><strong>线程安全的单例（懒汉模式）</strong></p>
<h3 id="基于jdk的spring的RestTemplate-1">基于jdk的spring的RestTemplate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.FormHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@title</span>：基于jdk的spring的RestTemplate</span><br><span class="line"> * <span class="doctag">@author</span>：liuxing</span><br><span class="line"> * <span class="doctag">@date</span>：2015-05-18 09:35</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="annotation">@Lazy</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRestClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SimpleRestClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SimpleClientHttpRequestFactory requestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setReadTimeout(<span class="number">10000</span>);</span><br><span class="line">        requestFactory.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加转换器</span></span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> FormHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line"></span><br><span class="line">        restTemplate = <span class="keyword">new</span> RestTemplate(messageConverters);</span><br><span class="line">        restTemplate.setRequestFactory(requestFactory);</span><br><span class="line">        restTemplate.setErrorHandler(<span class="keyword">new</span> DefaultResponseErrorHandler());</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"SimpleRestClient初始化完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleRestClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用Httpclient连接池的方式-1">使用Httpclient连接池的方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.Header;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpRequestRetryHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicHeader;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.FormHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@title</span>：使用spring的restTemplate替代httpclient工具</span><br><span class="line"> * <span class="doctag">@author</span>：liuxing</span><br><span class="line"> * <span class="doctag">@date</span>：2015-05-18 08:48</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="annotation">@Lazy</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SimpleRestClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 长连接保持30秒</span></span><br><span class="line">        PoolingHttpClientConnectionManager pollingConnectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 总连接数</span></span><br><span class="line">        pollingConnectionManager.setMaxTotal(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 同路由的并发数</span></span><br><span class="line">        pollingConnectionManager.setDefaultMaxPerRoute(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClients.custom();</span><br><span class="line">        httpClientBuilder.setConnectionManager(pollingConnectionManager);</span><br><span class="line">        <span class="comment">// 重试次数，默认是3次，没有开启</span></span><br><span class="line">        httpClientBuilder.setRetryHandler(<span class="keyword">new</span> DefaultHttpRequestRetryHandler(<span class="number">2</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// 保持长连接配置，需要在头添加Keep-Alive</span></span><br><span class="line">        httpClientBuilder.setKeepAliveStrategy(<span class="keyword">new</span> DefaultConnectionKeepAliveStrategy());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        RequestConfig.Builder builder = RequestConfig.custom();</span></span><br><span class="line"><span class="comment">//        builder.setConnectionRequestTimeout(200);</span></span><br><span class="line"><span class="comment">//        builder.setConnectTimeout(5000);</span></span><br><span class="line"><span class="comment">//        builder.setSocketTimeout(5000);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        RequestConfig requestConfig = builder.build();</span></span><br><span class="line"><span class="comment">//        httpClientBuilder.setDefaultRequestConfig(requestConfig);</span></span><br><span class="line"></span><br><span class="line">        List&lt;Header&gt; headers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36"</span>));</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip,deflate"</span>));</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"Accept-Language"</span>, <span class="string">"zh-CN"</span>));</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>));</span><br><span class="line"></span><br><span class="line">        httpClientBuilder.setDefaultHeaders(headers);</span><br><span class="line"></span><br><span class="line">        HttpClient httpClient = httpClientBuilder.build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// httpClient连接配置，底层是配置RequestConfig</span></span><br><span class="line">        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory(httpClient);</span><br><span class="line">        <span class="comment">// 连接超时</span></span><br><span class="line">        clientHttpRequestFactory.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 数据读取超时时间，即SocketTimeout</span></span><br><span class="line">        clientHttpRequestFactory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 连接不够用的等待时间，不宜过长，必须设置，比如连接不够用时，时间过长将是灾难性的</span></span><br><span class="line">        clientHttpRequestFactory.setConnectionRequestTimeout(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 缓冲请求数据，默认值是true。通过POST或者PUT大量发送数据时，建议将此属性更改为false，以免耗尽内存。</span></span><br><span class="line">        clientHttpRequestFactory.setBufferRequestBody(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加内容转换器</span></span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> FormHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line"></span><br><span class="line">        restTemplate = <span class="keyword">new</span> RestTemplate(messageConverters);</span><br><span class="line">        restTemplate.setRequestFactory(clientHttpRequestFactory);</span><br><span class="line">        restTemplate.setErrorHandler(<span class="keyword">new</span> DefaultResponseErrorHandler());</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"RestClient初始化完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RestClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HttpClientUtils">HttpClientUtils</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dooioo.commons.Strings;</span><br><span class="line"><span class="keyword">import</span> com.dooioo.framework.SpringContextHolder;</span><br><span class="line"><span class="keyword">import</span> com.dooioo.ky.cache.HttpClientResultCache;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.MapUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * 类功能说明：httpclient工具类,基于httpclient 4.x</span><br><span class="line"> * Title: HttpClientUtils.java</span><br><span class="line"> * <span class="doctag">@author</span> 刘兴</span><br><span class="line"> * <span class="doctag">@date</span> 2014-3-7 下午7:48:58</span><br><span class="line"> * <span class="doctag">@version</span> V1.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HttpClientUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post请求</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@param</span> formParams</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url, Map&lt;String, String&gt; formParams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isEmpty(formParams)) &#123;</span><br><span class="line">            <span class="keyword">return</span> doPost(url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MultiValueMap&lt;String, String&gt; requestEntity = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">            formParams.keySet().stream().forEach(key -&gt; requestEntity.add(key, MapUtils.getString(formParams, key, <span class="string">""</span>)));</span><br><span class="line">            <span class="keyword">return</span> RestClient.getClient().postForObject(url, requestEntity, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"POST请求出错：&#123;&#125;"</span>, url, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Strings.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post请求</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RestClient.getClient().postForObject(url, HttpEntity.EMPTY, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"POST请求出错：&#123;&#125;"</span>, url, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Strings.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * get请求</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RestClient.getClient().getForObject(url, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"GET请求出错：&#123;&#125;"</span>, url, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Strings.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ErrorHolder">ErrorHolder</h3><p>自定义的一个异常结果包装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.HttpClientErrorException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.HttpServerErrorException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@title</span>：ErrorHolder</span><br><span class="line"> * <span class="doctag">@author</span>：liuxing</span><br><span class="line"> * <span class="doctag">@date</span>：2015-06-16 11:01</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpStatus statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String statusText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String responseBody;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpHeaders responseHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorHolder</span><span class="params">(HttpStatus statusCode, String statusText, String responseBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusCode = statusCode;</span><br><span class="line">        <span class="keyword">this</span>.statusText = statusText;</span><br><span class="line">        <span class="keyword">this</span>.responseBody = responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorHolder</span><span class="params">(String statusText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusText = statusText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatusCode</span><span class="params">(HttpStatus statusCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusCode = statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatusText</span><span class="params">(String statusText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusText = statusText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResponseBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseBody</span><span class="params">(String responseBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.responseBody = responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getResponseHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> responseHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseHeaders</span><span class="params">(HttpHeaders responseHeaders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.responseHeaders = responseHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ErrorHolder <span class="title">build</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> HttpServerErrorException) &#123;</span><br><span class="line">            HttpServerErrorException e = (HttpServerErrorException) exception;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorHolder(e.getStatusCode(), e.getStatusText(), e.getResponseBodyAsString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> HttpClientErrorException) &#123;</span><br><span class="line">            HttpClientErrorException e = (HttpClientErrorException) exception;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorHolder(e.getStatusCode(), e.getStatusText(), e.getResponseBodyAsString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorHolder(exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用样例">使用样例</h2><p>api里面可以做自动的参数匹配：<br>如：<a href="http://you" target="_blank" rel="external">http://you</a> domainn name/test?empNo={empNo}，则下面方法的最后一个参数为数据匹配参数，会自动根据key进行查找，然后替换</p>
<p>API没有声明异常，注意进行异常处理</p>
<p>更多使用语法请查看API文档</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;List&lt;KyArea&gt;&gt; result = RestClient.getClient().exchange(DIVIDE_PLATE_API, HttpMethod.GET, HttpEntity.EMPTY, <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;KyArea&gt;&gt;() &#123;&#125;, map(<span class="string">"empNo"</span>, empNo));</span><br><span class="line">List&lt;KyArea&gt; list = result.getBody();</span><br><span class="line"></span><br><span class="line">ResponseEntity&lt;KyArea&gt; result = RestClient.getClient().exchange(DIVIDE_PLATE_API, HttpMethod.GET, HttpEntity.EMPTY, KyArea.class, map(<span class="string">"empNo"</span>, empNo));</span><br><span class="line">KyArea kyArea = result.getBody();</span><br></pre></td></tr></table></figure>
<h2 id="更多">更多</h2><p><strong>RestTemplate API说明和使用参考</strong></p>
<p><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p>
<p><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/SimpleClientHttpRequestFactory.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/SimpleClientHttpRequestFactory.html</a></p>
<p><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.html</a></p>
<p><strong>HttpClient官方示例和参数配置说明</strong></p>
<p><a href="http://hc.apache.org/httpcomponents-client-4.4.x/examples.html" target="_blank" rel="external">http://hc.apache.org/httpcomponents-client-4.4.x/examples.html</a></p>
<p><a href="http://hc.apache.org/httpcomponents-client-4.4.x/tutorial/html/index.html" target="_blank" rel="external">http://hc.apache.org/httpcomponents-client-4.4.x/tutorial/html/index.html</a></p>
<p><strong>依赖</strong><br><em>spring 3.x以上</em><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意点</strong></p>
<p>1.关于httpclient配置的<code>defaultMaxPerRoute</code>和<code>maxTotal</code><br><code>defaultMaxPerRoute</code>：最大路由并发数，以主机为单位<br><code>maxTotal</code>：整个连接池的并发数</p>
<p>例如：<br><code>defaultMaxPerRoute</code>为10，<code>maxTotal</code>为100<br>假设只会访问<a href="http://www.baidu.com和http://www.google.com" target="_blank" rel="external">http://www.baidu.com和http://www.google.com</a><br>那么能同时并发到客源的只能是10，房源也是10，整个连接永远不会到100</p>
<p>2.部分方法注意查看源码，默认构造里面会新增常用的数据转换器，spring对jackson比较情有独钟，在解析xml和json时，优先使用jackson</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; using default settings.</span><br><span class="line"> * Default &#123;<span class="doctag">@link</span> HttpMessageConverter&#125;s are initialized.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (romePresent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AtomFeedHttpMessageConverter());</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> RssChannelHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line">            messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jaxb2Present) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> GsonHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; based on the given &#123;<span class="doctag">@link</span> ClientHttpRequestFactory&#125;.</span><br><span class="line"> * <span class="doctag">@param</span> requestFactory HTTP request factory to use</span><br><span class="line"> * <span class="doctag">@see</span> org.springframework.http.client.SimpleClientHttpRequestFactory</span><br><span class="line"> * <span class="doctag">@see</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">(ClientHttpRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    setRequestFactory(requestFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看添加转换器的方法外部添加转换器时，this.messageConverters.clear();会先清除已有的，需要注意</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; using the given list of</span><br><span class="line"> * &#123;<span class="doctag">@link</span> HttpMessageConverter&#125; to use</span><br><span class="line"> * <span class="doctag">@param</span> messageConverters the list of &#123;<span class="doctag">@link</span> HttpMessageConverter&#125; to use</span><br><span class="line"> * <span class="doctag">@since</span> 3.2.7</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">    Assert.notEmpty(messageConverters, <span class="string">"'messageConverters' must not be empty"</span>);</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.addAll(messageConverters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Set the message body converters to use.</span><br><span class="line"> * &lt;p&gt;These converters are used to convert from and to HTTP requests and responses.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">    Assert.notEmpty(messageConverters, <span class="string">"'messageConverters' must not be empty"</span>);</span><br><span class="line">    <span class="comment">// Take getMessageConverters() List as-is when passed in here</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters != messageConverters) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.clear();</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.addAll(messageConverters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><em>什么是RestTemplate？</em></p>
<blockquote>
<p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率。<br>调用]]>
    </summary>
    
      <category term="RestTemplate" scheme="http://liuxing.info/tags/RestTemplate/"/>
    
      <category term="Spring" scheme="http://liuxing.info/tags/Spring/"/>
    
      <category term="httpClient" scheme="http://liuxing.info/tags/httpClient/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用spring4的websocket支持]]></title>
    <link href="http://liuxing.info/2015/04/21/%E4%BD%BF%E7%94%A8spring4%E7%9A%84websocket%E6%94%AF%E6%8C%81/"/>
    <id>http://liuxing.info/2015/04/21/使用spring4的websocket支持/</id>
    <published>2015-04-20T16:48:00.000Z</published>
    <updated>2015-06-16T13:20:08.000Z</updated>
    <content type="html"><![CDATA[<p>J2EE7版（JSR-356）<br><a href="http://liuxing.info/2015/02/09/websocket-demo">http://liuxing.info/2015/02/09/websocket-demo</a></p>
<p>相关依赖请参考上文，spring需要4.x</p>
<h2 id="websocket处理器">websocket处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.MapUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.BinaryWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：WebSocket处理器</span><br><span class="line"> * 可以继承 &#123;<span class="doctag">@link</span> TextWebSocketHandler&#125;/&#123;<span class="doctag">@link</span> BinaryWebSocketHandler&#125;，</span><br><span class="line"> * 或者简单的实现&#123;<span class="doctag">@link</span> WebSocketHandler&#125;接口</span><br><span class="line"> * 作者：liuxing(2015-01-25 03:42)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TelWebSocketHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立连接</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line">        TelSocketSessionUtils.add(inquiryId, empNo, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 收到客户端消息</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@param</span> message</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line">        TelSocketSessionUtils.sendMessage(inquiryId, empNo, <span class="string">"【来自服务器的复读机】："</span> + message.getPayload().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 出现异常</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@param</span> exception</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.error(<span class="string">"websocket connection exception: "</span> + TelSocketSessionUtils.getKey(inquiryId, empNo));</span><br><span class="line">        LOGGER.error(exception.getMessage(), exception);</span><br><span class="line"></span><br><span class="line">        TelSocketSessionUtils.remove(inquiryId, empNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 连接关闭</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@param</span> closeStatus</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus closeStatus)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line">        TelSocketSessionUtils.remove(inquiryId, empNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否分段发送消息</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsPartialMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="websocket连接的拦截器">websocket连接的拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：websocket连接的拦截器</span><br><span class="line"> * 有两种方式</span><br><span class="line"> *          一种是实现接口HandshakeInterceptor，实现beforeHandshake和afterHandshake函数</span><br><span class="line"> *          一种是继承HttpSessionHandshakeInterceptor，重载beforeHandshake和afterHandshake函数</span><br><span class="line"> * 我这里是参照spring官方文档中的继承HttpSessionHandshakeInterceptor的方式</span><br><span class="line"> * 作者：liuxing(2015-01-25 03:46)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelWebSocketHandshakeInterceptor</span> <span class="keyword">extends</span> <span class="title">HttpSessionHandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TelWebSocketHandshakeInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 从请求中获取唯一标记参数，填充到数据传递容器attributes</span><br><span class="line">     * <span class="doctag">@param</span> serverHttpRequest</span><br><span class="line">     * <span class="doctag">@param</span> serverHttpResponse</span><br><span class="line">     * <span class="doctag">@param</span> wsHandler</span><br><span class="line">     * <span class="doctag">@param</span> attributes</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getSession(serverHttpRequest) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) serverHttpRequest;</span><br><span class="line">            HttpServletRequest request = servletRequest.getServletRequest();</span><br><span class="line">            attributes.put(<span class="string">"inquiryId"</span>, request.getParameter(<span class="string">"inquiryId"</span>));</span><br><span class="line">            attributes.put(<span class="string">"empNo"</span>, request.getParameter(<span class="string">"empNo"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.beforeHandshake(serverHttpRequest, serverHttpResponse, wsHandler, attributes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.afterHandshake(request, response, wsHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpSession <span class="title">getSession</span><span class="params">(ServerHttpRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest serverRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            <span class="keyword">return</span> serverRequest.getServletRequest().getSession(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="session工具类">session工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：TelSocketSessionUtils</span><br><span class="line"> * 作者：liuxing(2014-12-26 02:32)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelSocketSessionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TelSocketSessionUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, WebSocketSession&gt; clients = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 保存一个连接</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo, WebSocketSession session)</span></span>&#123;</span><br><span class="line">        clients.put(getKey(inquiryId, empNo), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取一个连接</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebSocketSession <span class="title">get</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.get(getKey(inquiryId, empNo));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 移除一个连接</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        clients.remove(getKey(inquiryId, empNo));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 组装sessionId</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inquiryId + <span class="string">"_"</span> + empNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断是否有效连接</span><br><span class="line">     * 判断是否存在</span><br><span class="line">     * 判断连接是否开启</span><br><span class="line">     * 无效的进行清除</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasConnection</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span> </span>&#123;</span><br><span class="line">        String key = getKey(inquiryId, empNo);</span><br><span class="line">        <span class="keyword">if</span> (clients.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取连接数的数量</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 发送消息到客户端</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@param</span> message</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo, String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasConnection(inquiryId, empNo)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(getKey(inquiryId, empNo) + <span class="string">" connection does not exist"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WebSocketSession session = get(inquiryId, empNo);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.sendMessage(<span class="keyword">new</span> TextMessage(message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"websocket sendMessage exception: "</span> + getKey(inquiryId, empNo));</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">            clients.remove(getKey(inquiryId, empNo));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="初始化配置">初始化配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--websocket配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"telWebSocketHandler"</span> <span class="attribute">class</span>=<span class="value">"包.websocket.handler.TelWebSocketHandler"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">websocket:handlers</span> <span class="attribute">allowed-origins</span>=<span class="value">"*"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">websocket:mapping</span> <span class="attribute">path</span>=<span class="value">"webSocketStatus"</span> <span class="attribute">handler</span>=<span class="value">"telWebSocketHandler"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"包.websocket.interceptor.TelWebSocketHandshakeInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">websocket:handlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxTextMessageBufferSize"</span> <span class="attribute">value</span>=<span class="value">"8192"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxBinaryMessageBufferSize"</span> <span class="attribute">value</span>=<span class="value">"8192"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxSessionIdleTimeout"</span> <span class="attribute">value</span>=<span class="value">"900000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"asyncSendTimeout"</span> <span class="attribute">value</span>=<span class="value">"5000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring官方文档已经写得很齐全了，更多场景和说明请参阅下文大笑<br><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket" target="_blank" rel="external">http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>J2EE7版（JSR-356）<br><a href="http://liuxing.info/2015/02/09/websocket-demo">http://liuxing.info/2015/02/09/websocket-demo</a></p>
<p>相关依赖请]]>
    </summary>
    
      <category term="Spring" scheme="http://liuxing.info/tags/Spring/"/>
    
      <category term="websocket" scheme="http://liuxing.info/tags/websocket/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring4不兼容ibatis的解决方法 ]]></title>
    <link href="http://liuxing.info/2015/04/21/spring4%E4%B8%8D%E5%85%BC%E5%AE%B9ibatis%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/"/>
    <id>http://liuxing.info/2015/04/21/spring4不兼容ibatis的解决方法 /</id>
    <published>2015-04-20T16:46:00.000Z</published>
    <updated>2015-06-16T13:19:34.000Z</updated>
    <content type="html"><![CDATA[<p>因为spring升级到4.x后，orm包里面移除了对ibatis的支持，<br>如果orm使用4.x版本的话项目会启动失败。<br>查看orm-3.x版本的SqlMapClientFactoryBean类，里面说的很清楚，只支持到3.x。<br>如果可以升级到mybatis的话尽量升级，否则可以使用如下方法。<br>orm包单独使用3.x的版本，项目中正式在用，还没出现问题（或许还没爆出来哭）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.2.13.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>因为spring升级到4.x后，orm包里面移除了对ibatis的支持，<br>如果orm使用4.x版本的话项目会启动失败。<br>查看orm-3.x版本的SqlMapClientFactoryBean类，里面说的很清楚，只支持到3.x。<br>如果可以升级到mybatis]]>
    </summary>
    
      <category term="Spring" scheme="http://liuxing.info/tags/Spring/"/>
    
      <category term="ibatis" scheme="http://liuxing.info/tags/ibatis/"/>
    
      <category term="框架" scheme="http://liuxing.info/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算地图坐标是否在多边形内]]></title>
    <link href="http://liuxing.info/2015/04/21/%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E6%98%AF%E5%90%A6%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85/"/>
    <id>http://liuxing.info/2015/04/21/计算地图坐标是否在多边形内/</id>
    <published>2015-04-20T16:44:00.000Z</published>
    <updated>2015-06-16T13:20:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="使用百度地图计算">使用百度地图计算</h2><p><a href="http://api.map.baidu.com/library/GeoUtils/1.2/examples/simple.html" target="_blank" rel="external">http://api.map.baidu.com/library/GeoUtils/1.2/examples/simple.html</a><br><a href="http://api.map.baidu.com/library/GeoUtils/1.2/docs/symbols/BMapLib.GeoUtils.html" target="_blank" rel="external">http://api.map.baidu.com/library/GeoUtils/1.2/docs/symbols/BMapLib.GeoUtils.html</a></p>
<h2 id="使用java计算">使用java计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.geom.GeneralPath;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.Point2D;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：坐标几何运算</span><br><span class="line"> * 作者：liuxing(2015-04-20 22:19)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeoUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 检查一个坐标是否在多边形内</span><br><span class="line">     * <span class="doctag">@param</span> x 纬度 31.000...</span><br><span class="line">     * <span class="doctag">@param</span> y 经度 121.000...</span><br><span class="line">     * <span class="doctag">@param</span> polygonPoints 多边形边界的经纬度数组</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPointInPolygon</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, List&lt;Map&lt;String, Double&gt;&gt; polygonPoints)</span> </span>&#123;</span><br><span class="line">        Point2D.Double geoPoint = buildPoint(x, y);</span><br><span class="line">        List&lt;Point2D.Double&gt; geoPolygon = buildPolygon(polygonPoints);</span><br><span class="line">        <span class="keyword">return</span> GeoUtils.isPointInPolygon(geoPoint, geoPolygon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 检查一个坐标是否在多边形内</span><br><span class="line">     * <span class="doctag">@param</span> point 检查的点坐标</span><br><span class="line">     * <span class="doctag">@param</span> polygon 参照的多边形</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPointInPolygon</span><span class="params">(Point2D.Double point, List&lt;Point2D.Double&gt; polygon)</span> </span>&#123;</span><br><span class="line">        GeneralPath p = <span class="keyword">new</span> GeneralPath();</span><br><span class="line"></span><br><span class="line">        Point2D.Double first = polygon.get(<span class="number">0</span>);</span><br><span class="line">        p.moveTo(first.x, first.y);</span><br><span class="line">        polygon.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        polygon.forEach(d -&gt; p.lineTo(d.x, d.y));</span><br><span class="line"></span><br><span class="line">        p.lineTo(first.x, first.y);</span><br><span class="line"></span><br><span class="line">        p.closePath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p.contains(point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构建一个坐标点</span><br><span class="line">     * <span class="doctag">@param</span> x 纬度 31.000...</span><br><span class="line">     * <span class="doctag">@param</span> y 经度 121.000...</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point2D.<span class="function">Double <span class="title">buildPoint</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point2D.Double(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构建一个多边形</span><br><span class="line">     * <span class="doctag">@param</span> polygonPoints</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Point2D.Double&gt; buildPolygon(List&lt;Map&lt;String, Double&gt;&gt; polygonPoints) &#123;</span><br><span class="line">        List&lt;Point2D.Double&gt; geoPolygon = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        polygonPoints.forEach(map -&gt; geoPolygon.add(buildPoint(map.get(<span class="string">"x"</span>), map.get(<span class="string">"y"</span>))));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> geoPolygon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多运算场景请参考：<br><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Polygon.html" target="_blank" rel="external">http://docs.oracle.com/javase/8/docs/api/java/awt/Polygon.html</a></p>
<h2 id="使用数据库计算">使用数据库计算</h2><p>SqlServer2008以上，暂未尝试</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="使用百度地图计算">使用百度地图计算</h2><p><a href="http://api.map.baidu.com/library/GeoUtils/1.2/examples/simple.html" target="_blank" rel="external]]>
    </summary>
    
      <category term="地图" scheme="http://liuxing.info/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java和数据库计算两个坐标的距离]]></title>
    <link href="http://liuxing.info/2015/04/21/java%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E5%9D%90%E6%A0%87%E7%9A%84%E8%B7%9D%E7%A6%BB/"/>
    <id>http://liuxing.info/2015/04/21/java和数据库计算两个坐标的距离/</id>
    <published>2015-04-20T16:41:00.000Z</published>
    <updated>2015-06-16T13:19:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="使用Java进行计算">使用Java进行计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 类功能说明：地图坐标距离计算工具类</span><br><span class="line"> * Title: DistanceUtil.java</span><br><span class="line"> * <span class="doctag">@author</span> liuxing</span><br><span class="line"> * <span class="doctag">@date</span> 2013-9-8 下午10:36:03</span><br><span class="line"> * <span class="doctag">@version</span> V1.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistanceUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_PI = Math.PI; <span class="comment">// PI</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_2PI = Math.PI * <span class="number">2</span>; <span class="comment">// 2*PI</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_PI180 = Math.PI / <span class="number">180</span>; <span class="comment">// PI/180.0</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_R = <span class="number">6370693.5</span>; <span class="comment">// 地球半径</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * 功能说明：计算两个地图坐标点之间的距离（近距离计算）</span><br><span class="line">	 * liuxing 2013-9-8 下午10:42:17</span><br><span class="line">	 * <span class="doctag">@param</span> lng1 起点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat1 起点纬度</span><br><span class="line">	 * <span class="doctag">@param</span> lng2 终点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat2 终点纬度</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getShortDistance</span><span class="params">(<span class="keyword">double</span> lng1, <span class="keyword">double</span> lat1, <span class="keyword">double</span> lng2, <span class="keyword">double</span> lat2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> ew1, ns1, ew2, ns2;</span><br><span class="line">		<span class="keyword">double</span> dx, dy, dew;</span><br><span class="line">		<span class="keyword">double</span> distance;</span><br><span class="line">		<span class="comment">// 角度转换为弧度</span></span><br><span class="line">		ew1 = Math.toRadians(lng1);</span><br><span class="line">		ns1 = Math.toRadians(lat1);</span><br><span class="line">		ew2 = Math.toRadians(lng2);</span><br><span class="line">		ns2 = Math.toRadians(lat2);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 经度差</span></span><br><span class="line">		dew = ew1 - ew2;</span><br><span class="line">		<span class="comment">// 若跨东经和西经180 度，进行调整</span></span><br><span class="line">		<span class="keyword">if</span> (dew &gt; DEF_PI)&#123;</span><br><span class="line">			dew = DEF_2PI - dew;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dew &lt; -DEF_PI)&#123;</span><br><span class="line">			dew = DEF_2PI + dew;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		dx = DEF_R * Math.cos(ns1) * dew; 	<span class="comment">// 东西方向长度(在纬度圈上的投影长度)</span></span><br><span class="line">		dy = DEF_R * (ns1 - ns2); 			<span class="comment">// 南北方向长度(在经度圈上的投影长度)</span></span><br><span class="line">		<span class="comment">// 勾股定理求斜边长</span></span><br><span class="line">		distance = Math.sqrt(dx * dx + dy * dy);</span><br><span class="line">		<span class="keyword">return</span> distance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * 功能说明：计算两个地图坐标点之间的距离（远距离计算）</span><br><span class="line">	 * liuxing 2013-9-8 下午10:43:21</span><br><span class="line">	 * <span class="doctag">@param</span> lng1 起点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat1 起点纬度</span><br><span class="line">	 * <span class="doctag">@param</span> lng2 终点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat2 终点纬度</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getLongDistance</span><span class="params">(<span class="keyword">double</span> lng1, <span class="keyword">double</span> lat1, <span class="keyword">double</span> lng2, <span class="keyword">double</span> lat2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> ew1, ns1, ew2, ns2;</span><br><span class="line">		<span class="keyword">double</span> distance;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 角度转换为弧度</span></span><br><span class="line">		ew1 = lng1 * DEF_PI180;</span><br><span class="line">		ns1 = lat1 * DEF_PI180;</span><br><span class="line">		ew2 = lng2 * DEF_PI180;</span><br><span class="line">		ns2 = lat2 * DEF_PI180;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 求大圆劣弧与球心所夹的角(弧度)</span></span><br><span class="line">		distance = Math.sin(ns1) * Math.sin(ns2) + Math.cos(ns1) * Math.cos(ns2) * Math.cos(ew1 - ew2);</span><br><span class="line">		<span class="comment">// 调整到[-1..1]范围内，避免溢出</span></span><br><span class="line">		<span class="keyword">if</span> (distance &gt; <span class="number">1.0</span>)&#123;</span><br><span class="line">			distance = <span class="number">1.0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt; -<span class="number">1.0</span>)&#123;</span><br><span class="line">			distance = -<span class="number">1.0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 求大圆劣弧长度</span></span><br><span class="line">		distance = DEF_R * Math.acos(distance);</span><br><span class="line">		<span class="keyword">return</span> distance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> mLat1 = <span class="number">31.24081800000000</span>; 	<span class="comment">// point1纬度</span></span><br><span class="line">		<span class="keyword">double</span> mLng1 = <span class="number">121.46541700000000</span>; 	<span class="comment">// point1经度</span></span><br><span class="line">		<span class="keyword">double</span> mLat2 = <span class="number">31.239946</span>;	<span class="comment">// point2纬度</span></span><br><span class="line">		<span class="keyword">double</span> mLng2 = <span class="number">121.466417</span>;	<span class="comment">// point2经度</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">double</span> distanceByShort = getShortDistance(mLng1, mLat1, mLng2, mLat2);</span><br><span class="line">		System.out.println(distanceByShort);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">double</span> distanceByLong = getLongDistance(mLng1, mLat1, mLng2, mLat2);</span><br><span class="line">		System.out.println(distanceByLong);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用SqlServer函数计算">使用SqlServer函数计算</h2><p>其他数据库版本请找到相应的函数替换后移植</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">-- =============================================</span><br><span class="line">-- Author:      liuxing</span><br><span class="line">-- Create date: 2013-09-10</span><br><span class="line">-- Description:	计算2个坐标点的距离（短距离计算）</span><br><span class="line">-- =============================================</span><br><span class="line">CREATE function dbo.fn_getShortDistance(</span><br><span class="line">	 @lng1 decimal(19,11)</span><br><span class="line">	,@lat1 decimal(19,11)</span><br><span class="line">	,@lng2 decimal(19,11)</span><br><span class="line">	,@lat2 decimal(19,11)</span><br><span class="line">)</span><br><span class="line">returns decimal(19,11)</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line">	--declare @lng1 decimal(19,11)</span><br><span class="line">	--declare @lat1 decimal(19,11)</span><br><span class="line">	--declare @lng2 decimal(19,11)</span><br><span class="line">	--declare @lat2 decimal(19,11)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	--set @lat1 = 31.238662--; 	// point1纬度</span><br><span class="line">	--set @lng1 = 121.466633--; // point1经度</span><br><span class="line">	--set @lat2 = 31.239727--;	// point2纬度</span><br><span class="line">	--set @lng2 = 121.462745--;	// point2经度</span><br><span class="line">	declare @ew1 decimal(19,11)</span><br><span class="line">		, @ns1 decimal(19,11)</span><br><span class="line">		, @ew2 decimal(19,11)</span><br><span class="line">		, @ns2 decimal(19,11)</span><br><span class="line">		, @dx decimal(19,11)</span><br><span class="line">		, @dy decimal(19,11)</span><br><span class="line">		, @dew decimal(19,11)</span><br><span class="line">		, @distance decimal(19,11)</span><br><span class="line">	-- 角度转换为弧度</span><br><span class="line">	set @ew1 = Radians(@lng1)-- * 0.01745329252;</span><br><span class="line">	set @ns1 = Radians(@lat1)-- * 0.01745329252;</span><br><span class="line">	set @ew2 = Radians(@lng2)-- * 0.01745329252;</span><br><span class="line">	set @ns2 = Radians(@lat2)-- * 0.01745329252;</span><br><span class="line">	-- 经度差</span><br><span class="line">	set @dew = @ew1 - @ew2;</span><br><span class="line">	-- 若跨东经和西经180 度，进行调整</span><br><span class="line">	if (@dew &gt; Pi())</span><br><span class="line">	begin</span><br><span class="line">		set @dew = 2 * Pi() - @dew;</span><br><span class="line">	end</span><br><span class="line">	else if (@dew &lt; -Pi())</span><br><span class="line">	begin</span><br><span class="line">		set @dew = 2 * Pi() + @dew;</span><br><span class="line">	end</span><br><span class="line">		</span><br><span class="line">	set @dx = 6370693.5 * Cos(@ns1) * @dew -- 东西方向长度(在纬度圈上的投影长度)</span><br><span class="line">	set @dy = 6370693.5 * (@ns1 - @ns2)   -- 南北方向长度(在经度圈上的投影长度)</span><br><span class="line">	-- 勾股定理求斜边长,开平方根</span><br><span class="line">	set @distance = sqrt(@dx * @dx + @dy * @dy);</span><br><span class="line">	return @distance;</span><br><span class="line">	--print @distance</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="使用Java进行计算">使用Java进行计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">]]>
    </summary>
    
      <category term="地图" scheme="http://liuxing.info/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="坐标运算" scheme="http://liuxing.info/tags/%E5%9D%90%E6%A0%87%E8%BF%90%E7%AE%97/"/>
    
      <category term="距离" scheme="http://liuxing.info/tags/%E8%B7%9D%E7%A6%BB/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Websocket实例]]></title>
    <link href="http://liuxing.info/2015/02/09/websocket-demo/"/>
    <id>http://liuxing.info/2015/02/09/websocket-demo/</id>
    <published>2015-02-09T15:33:56.000Z</published>
    <updated>2015-06-16T13:19:43.000Z</updated>
    <content type="html"><![CDATA[<p>记录下自己在用的websocket</p>
<h2 id="介绍">介绍</h2><p>现在很多网站为了实现即时通讯，所用的技术都是轮询(polling)。轮询是在特定的的时间间隔（如每1秒），<br>由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客服端的浏览器。<br>这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，<br>然而HTTP request 的header是非常长的，里面包含的数据可能只是一个很小的值，这样会占用很多的带宽。</p>
<p>而最比较新的技术去做轮询的效果是Comet – 用了AJAX。但这种技术虽然可达到全双工通信，但依然需要发出请求。</p>
<p>在 WebSocket API，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>
<h2 id="运行环境：">运行环境：</h2><h3 id="客户端">客户端</h3><p>实现了websocket的浏览器</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Chrome</td>
<td style="text-align:left">Supported in version 4+</td>
</tr>
<tr>
<td style="text-align:left">Firefox</td>
<td style="text-align:left">Supported in version 4+</td>
</tr>
<tr>
<td style="text-align:left">Internet Explorer</td>
<td style="text-align:left">Supported in version 10+</td>
</tr>
<tr>
<td style="text-align:left">Opera</td>
<td style="text-align:left">Supported in version 10+</td>
</tr>
<tr>
<td style="text-align:left">Safari</td>
<td style="text-align:left">Supported in version 5+</td>
</tr>
</tbody>
</table>
<h3 id="服务端">服务端</h3><h4 id="依赖">依赖</h4><p>Tomcat 7.0.47以上 + J2EE7</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>tomcat-websocket-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>7.0.47<span class="tag">&lt;/<span class="title">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：早前业界没有统一的标准，各服务器都有各自的实现，现在J2EE7的JSR356已经定义了统一的标准，请尽量使用支持最新通用标准的服务器。</p>
<p>详见：<br><a href="http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html" target="_blank" rel="external">http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html</a><br><a href="http://jinnianshilongnian.iteye.com/blog/1909962" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1909962</a></p>
<p>我是用的Tomcat 7.0.57 + Java7<br>必须是Tomcat 7.0.47以上<br>详见：<a href="http://www.iteye.com/news/28414" target="_blank" rel="external">http://www.iteye.com/news/28414</a></p>
<p>ps：最早我们是用的Tomcat 7自带的实现，后来要升级Tomcat 8，结果原来的实现方式在Tomcat 8不支持了，就只好切换到支持Websocket 1.0版本的Tomcat了。</p>
<p>主流的java web服务器都有支持JSR365标准的版本了，请自行Google。 </p>
<p>用nginx做反向代理的需要注意啦，socket请求需要做特殊配置的，切记！</p>
<p>Tomcat的处理方式建议修改为NIO的方式，同时修改连接数到合适的参数，请自行Google！</p>
<p>服务端不需要在web.xml中做额外的配置，Tomcat启动后就可以直接连接了。</p>
<h4 id="实现">实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dooioo.websocket.utils.SessionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：websocket处理类, 使用J2EE7的标准</span><br><span class="line"> *         切忌直接在该连接处理类中加入业务处理代码</span><br><span class="line"> * 作者：liuxing(2014-11-14 04:20)</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">//relationId和userCode是我的业务标识参数,websocket.ws是连接的路径，可以自行定义</span></span><br><span class="line"><span class="annotation">@ServerEndpoint</span>(<span class="string">"/websocket.ws/&#123;relationId&#125;/&#123;userCode&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketEndPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Log log = LogFactory.getLog(WebsocketEndPoint.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 打开连接时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                       @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                       Session session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">"Websocket Start Connecting: "</span> + SessionUtils.getKey(relationId, userCode));</span><br><span class="line">        SessionUtils.put(relationId, userCode, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 收到客户端消息时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> message</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onMessage</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                            @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                            String message) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Got your message ("</span> + message + <span class="string">").Thanks !"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 异常时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                        @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                        Throwable throwable,</span><br><span class="line">                        Session session) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Websocket Connection Exception: "</span> + SessionUtils.getKey(relationId, userCode));</span><br><span class="line">        log.info(throwable.getMessage(), throwable);</span><br><span class="line">        SessionUtils.remove(relationId, userCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 关闭连接时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                        @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                        Session session) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Websocket Close Connection: "</span> + SessionUtils.getKey(relationId, userCode));</span><br><span class="line">        SessionUtils.remove(relationId, userCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工具类用来存储唯一key和连接</p>
<p>这个是我业务的需要，我的业务是服务器有对应动作触发时，推送数据到客户端，没有接收客户端数据的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：用来存储业务定义的sessionId和连接的对应关系</span><br><span class="line"> *          利用业务逻辑中组装的sessionId获取有效连接后进行后续操作</span><br><span class="line"> * 作者：liuxing(2014-12-26 02:32)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Session&gt; clients = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String relationId, <span class="keyword">int</span> userCode, Session session)</span></span>&#123;</span><br><span class="line">        clients.put(getKey(relationId, userCode), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">get</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.get(getKey(relationId, userCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span></span>&#123;</span><br><span class="line">        clients.remove(getKey(relationId, userCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断是否有连接</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasConnection</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.containsKey(getKey(relationId, userCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 组装唯一识别的key</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> relationId + <span class="string">"_"</span> + userCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推送数据到客户端</p>
<p>在其他业务方法中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将数据传回客户端</span><br><span class="line"> * 异步的方式</span><br><span class="line"> * <span class="doctag">@param</span> relationId</span><br><span class="line"> * <span class="doctag">@param</span> userCode</span><br><span class="line"> * <span class="doctag">@param</span> message</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcast</span><span class="params">(String relationId, <span class="keyword">int</span> userCode, String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TelSocketSessionUtils.hasConnection(relationId, userCode)) &#123;</span><br><span class="line">        TelSocketSessionUtils.get(relationId, userCode).getAsyncRemote().sendText(message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(TelSocketSessionUtils.getKey(relationId, userCode) + <span class="string">" Connection does not exist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我是使用异步的方法推送数据，还有同步的方法</p>
<p>详见：<a href="http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html" target="_blank" rel="external">http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html</a></p>
<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var webSocket = <span class="keyword">null</span>;</span><br><span class="line">var tryTime = <span class="number">0</span>;</span><br><span class="line">$(function () &#123;</span><br><span class="line">    initSocket();</span><br><span class="line"></span><br><span class="line">    window.onbeforeunload = function () &#123;</span><br><span class="line">        <span class="comment">//离开页面时的其他操作</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 初始化websocket，建立连接</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">function <span class="title">initSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!window.WebSocket) &#123;</span><br><span class="line">        alert(<span class="string">"您的浏览器不支持websocket！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    webSocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8080/websocket.ws/"</span> + relationId + <span class="string">"/"</span> + userCode);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 收到服务端消息</span></span><br><span class="line">    webSocket.onmessage = function (msg) &#123;</span><br><span class="line">        console.log(msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异常</span></span><br><span class="line">    webSocket.onerror = function (event) &#123;</span><br><span class="line">        console.log(event);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建立连接</span></span><br><span class="line">    webSocket.onopen = function (event) &#123;</span><br><span class="line">        console.log(event);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断线重连</span></span><br><span class="line">    webSocket.onclose = function () &#123;</span><br><span class="line">        <span class="comment">// 重试10次，每次之间间隔10秒</span></span><br><span class="line">        <span class="keyword">if</span> (tryTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            setTimeout(function () &#123;</span><br><span class="line">                webSocket = <span class="keyword">null</span>;</span><br><span class="line">                tryTime++;</span><br><span class="line">                initSocket();</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tryTime = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他调试工具</p>
<p>Java实现一个websocket的客户端</p>
<p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.java-websocket<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>Java-WebSocket<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.ClientEndpoint;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;  </span><br><span class="line">   </span><br><span class="line"><span class="annotation">@ClientEndpoint</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;  </span><br><span class="line">    <span class="annotation">@OnOpen</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Connected to endpoint: "</span> + session.getBasicRemote());  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            session.getBasicRemote().sendText(<span class="string">"Hello"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="annotation">@OnMessage</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;  </span><br><span class="line">        System.out.println(message);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="annotation">@OnError</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;  </span><br><span class="line">        t.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.net.URI;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.ContainerProvider;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.DeploymentException;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.WebSocketContainer;  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientApp</span> </span>&#123;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> Session session;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span>  </span><br><span class="line">             </span>&#123;  </span><br><span class="line">   </span><br><span class="line">            WebSocketContainer container = ContainerProvider.getWebSocketContainer();  </span><br><span class="line">   </span><br><span class="line">            String uri = <span class="string">"ws://127.0.0.1:8080/websocket.ws/relationId/12345"</span>;  </span><br><span class="line">            System.out.println(<span class="string">"Connecting to "</span> + uri);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                session = container.connectToServer(MyClient.class, URI.create(uri));  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (DeploymentException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;               </span><br><span class="line">   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;  </span><br><span class="line">        MyClientApp client = <span class="keyword">new</span> MyClientApp();  </span><br><span class="line">        client.start();  </span><br><span class="line">   </span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));  </span><br><span class="line">        String input = <span class="string">""</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            do&#123;  </span><br><span class="line">                input = br.readLine();  </span><br><span class="line">                <span class="keyword">if</span>(!input.equals(<span class="string">"exit"</span>))  </span><br><span class="line">                    client.session.getBasicRemote().sendText(input);  </span><br><span class="line">   </span><br><span class="line">            &#125;<span class="keyword">while</span>(!input.equals(<span class="string">"exit"</span>));  </span><br><span class="line">   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>chrome安装一个websocket客户端调试 </p>
<p><img src="/images/websocket-01.png" alt="websocket-01"></p>
<p>最后</p>
<p>为了统一的操作体验，对于一些不支持websocket的浏览器，请使用socketjs技术做客户端开发。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录下自己在用的websocket</p>
<h2 id="介绍">介绍</h2><p>现在很多网站为了实现即时通讯，所用的技术都是轮询(polling)。轮询是在特定的的时间间隔（如每1秒），<br>由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据]]>
    </summary>
    
      <category term="websocket" scheme="http://liuxing.info/tags/websocket/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jquery常用选择器]]></title>
    <link href="http://liuxing.info/2015/02/01/jquery%E5%B8%B8%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://liuxing.info/2015/02/01/jquery常用选择器/</id>
    <published>2015-01-31T16:00:00.000Z</published>
    <updated>2015-06-16T13:06:06.000Z</updated>
    <content type="html"><![CDATA[<p>记录一下</p>
<h2 id="选择器">选择器</h2><h3 id="基本选择器">基本选择器</h3><p> <code>#</code>id —— 根据指定的id匹配一个元素<br> element —— 根据“元素名”匹配元素<br> .class —— 根据指定的“类名”匹配元素<br> selector1,selector2,selector3… —— 组合选择器，为并集关系</p>
<ul>
<li>—— 通用选择器， 匹配所有元素</li>
</ul>
<h3 id="层次选择器">层次选择器</h3><p> $(‘ancestor descendant’) —— 匹配ancestor下的所有descendant元素， 包括子孙节点<br> $(‘parent &gt; child’) —— 匹配parent下的所有child元素， 注意child为parent的直接子节点， 即不包含子孙节点<br> $(‘prev + next’) —— 匹配pre元素后的next元素<br> $(‘prev~siblings’) —— 匹配prev元素后的所有siblings元素</p>
<h3 id="基本过滤选择器（针对一个集合的操作，可以把这个集合想象成ArrayList）">基本过滤选择器（针对一个集合的操作，可以把这个集合想象成ArrayList）</h3><p> :first —— 选择第一个元素， 如$(‘div:first’)， 选择第一个div元素<br> :last —— 选择最后一个元素<br> :not(selector) —— 过滤掉所有与给定selector匹配的元素，如$(‘input:not(.myClass)’)选取class不是myClass的input元素<br> :even —— 选取索引是偶数的所有元素， 索引从0开始<br> :odd —— 选取索引是奇数的所有元素<br> :eq(index)  —— 选取索引是index的元素<br> :gt(index) —— 选取索引大于index的所有元素<br> :header —— 选取所有的标题元素，如h1,h2,h3等<br> :animated —— 选取当前正在进行动画的的所有元素</p>
<h3 id="子元素过滤器（父元素的第几个孩子，故在使用时都会以父元素作为上下文）">子元素过滤器（父元素的第几个孩子，故在使用时都会以父元素作为上下文）</h3><p> :nth-child —— 选取父元素的第几个孩子， 注意索引下标从1开始， 而:eq(index)是从0开始的<br> :nth-child(even) 选取父元素下索引值是偶数的子元素<br> :nth-child(odd) 选取父元素下索引值是奇数的子元素<br> :nth-child(index) 选取父元素下索引值为index的子元素<br> :nth-child(3n) 选取父元素下索引值是3的倍数的元素（n从0开始）<br> :nth-child(3n+1) 选取父元素下索引值是3n+1的元素 （n从0开始）<br> :first-child —— 父元素下的第一个孩子<br> :last-child —— 父元素下的最后一个孩子<br> :only-child —— 父元素下的唯一孩子（选中独生子）</p>
<h3 id="内容过滤选择器">内容过滤选择器</h3><p> :contains(text) —— 选取含有文本内容为”text”的元素<br> :empty —— 选取不包含子元素或文本的空元素<br> :has(selector) —— 选取含有选择器所匹配的元素的元素，如$(‘div:has(p)’)选取含有p元素的所有div元素<br> :parent —— 选取含有子元素或文本的元素，如$(‘div:parent’)选取拥有子元素或文本元素的所有div元素</p>
<h3 id="可见性过滤选择器">可见性过滤选择器</h3><p> :hidden ——  选取所有不可见元素，包括hidden， display:none，visibility:hidden元素，若只想选择input，则可用input:hidden<br> :visible —— 选取所有可见元素</p>
<h3 id="属性过滤选择器">属性过滤选择器</h3><p> [attribute] —— 选取拥有此属性的元素<br> [attribute=value] —— 选取属性值为value的元素<br> [attribute!=value] —— 选取属性值不等于value的元素<br> [attribute^=value] —— 选取属性值以value开头的元素<br> [attribute$=value] —— 选取属性值以vlue结尾的元素<br> [attribute*=value] —— 选取属性值包含value的元素<br> [selector1][selector2][selector3] —— 复合属性选择器，交集关系， 如$(“div[id][title$=’test’]”)选取拥有属性id，并且属性title以”test”结尾的div元素</p>
<h3 id="表单对象属性过滤器">表单对象属性过滤器</h3><p> :enabled —— 选取所有可用元素<br> :disabled —— 选取所有不可用元素<br> :checked —— 选取所有被选中的元素（单选和复选框）<br> :selected —— 选取所有被选中的select元素</p>
<h3 id="表单选择器">表单选择器</h3><p> :input —— 选取所有的input,textarea,select,button元素<br> :text —— 选取所有的单行文本<br> :password —— 选取所有的密码框<br> :radio —— 选取所有的单选按钮<br> :checkbox —— 选取所有的复选框<br> :submit —— 选取所有的提交按钮<br> :image —— 选取所有的图像按钮<br> :reset —— 选取所有的重置按钮<br> :button —— 选取所有的按钮<br> :file —— 选取所有的上传文件域<br> :hidden —— 选取所拥有不可见元素</p>
<h2 id="更多">更多</h2><p> 更多语法参阅API文档</p>
<p> <a href="http://jquery.cuishifeng.cn" target="_blank" rel="external">http://jquery.cuishifeng.cn</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录一下</p>
<h2 id="选择器">选择器</h2><h3 id="基本选择器">基本选择器</h3><p> <code>#</code>id —— 根据指定的id匹配一个元素<br> element —— 根据“元素名”匹配元素<br> .class —— 根据指]]>
    </summary>
    
      <category term="jquery" scheme="http://liuxing.info/tags/jquery/"/>
    
      <category term="前端" scheme="http://liuxing.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[备忘]]></title>
    <link href="http://liuxing.info/2015/01/01/faqs/"/>
    <id>http://liuxing.info/2015/01/01/faqs/</id>
    <published>2014-12-31T16:00:00.000Z</published>
    <updated>2015-06-16T13:03:53.000Z</updated>
    <content type="html"><![CDATA[<p>记录工作中遇到的一些小问题及解决办法，以防忘记后重头再找答案。</p>
<h2 id="格式:">格式:</h2><p>问:Win7下 Eclipse中按”Alt+Ctrl+Down或Alt+Ctrl+Up”时，结果屏幕倒了怎么办？<br>答:是不是和其它应用的快捷键冲突了？比如Intel显卡，则可选择“图形属性”&gt;“选项和支持”，将对应快捷键换掉。参考:<a href="http://www.2cto.com/os/201201/116412.html" target="_blank" rel="external">http://www.2cto.com/os/201201/116412.html</a></p>
<h2 id="或作为url收藏记录">或作为url收藏记录</h2><ul>
<li>Markdown语法: <a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">http://wowubuntu.com/markdown/basic.html</a><br>  马克飞象: <a href="http://maxiang.info/" target="_blank" rel="external">http://maxiang.info/</a><br>  Cmd Markdown: <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">https://www.zybuluo.com/mdeditor</a><br>  代码显示规范: <a href="http://hexo.chenall.net/post/code/" target="_blank" rel="external">http://hexo.chenall.net/post/code/</a></li>
<li>Oracle现在真是恶心，下载个Java SDK还非得让登陆不可。只好再找下载地址了: <a href="http://ghaffarian.net/downloads/" target="_blank" rel="external">http://ghaffarian.net/downloads/</a>  </li>
<li>GIT文章收藏:<br>  Git分支管理策略: <a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/07/git.html</a><br>  Git查看、删除、重命名远程分支和tag: <a href="http://zengrong.net/post/1746.htm" target="_blank" rel="external">http://zengrong.net/post/1746.htm</a>  </li>
<li>Google无障碍浏览链接: <a href="https://github.com/greatfire/wiki" target="_blank" rel="external">https://github.com/greatfire/wiki</a>  </li>
<li>在线Android等源码: <a href="http://www.grepcode.com/" target="_blank" rel="external">http://www.grepcode.com/</a>, <a href="http://androidxref.com/" target="_blank" rel="external">http://androidxref.com/</a>  </li>
<li>Twitter University: <a href="http://www.bluemobi.cn/" target="_blank" rel="external">http://www.bluemobi.cn/</a>  </li>
</ul>
<h2 id="本项目使用了">本项目使用了</h2><ul>
<li>CNZZ的网站统计服务，官网:<a href="http://cnzz.com/" target="_blank" rel="external">http://cnzz.com/</a></li>
<li>友言的网友评论服务，官网:<a href="http://www.uyan.cc/" target="_blank" rel="external">http://www.uyan.cc/</a>  </li>
<li>Google 的Adsense广告，官网:<a href="https://www.google.com/adsense/login/zh_CN/" target="_blank" rel="external">https://www.google.com/adsense/login/zh_CN/</a>  </li>
</ul>
<p>如需查看或管理网站统计、评论或广告，请自行注册帐号并修改_includes目录下相关文件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录工作中遇到的一些小问题及解决办法，以防忘记后重头再找答案。</p>
<h2 id="格式:">格式:</h2><p>问:Win7下 Eclipse中按”Alt+Ctrl+Down或Alt+Ctrl+Up”时，结果屏幕倒了怎么办？<br>答:是不是和其它应用的快捷键冲突了]]>
    </summary>
    
      <category term="其他" scheme="http://liuxing.info/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我编程我快乐]]></title>
    <link href="http://liuxing.info/2014/12/10/%E6%88%91%E7%BC%96%E7%A8%8B%E6%88%91%E5%BF%AB%E4%B9%90/"/>
    <id>http://liuxing.info/2014/12/10/我编程我快乐/</id>
    <published>2014-12-10T06:51:20.000Z</published>
    <updated>2015-06-16T13:07:55.000Z</updated>
    <content type="html"><![CDATA[<p>感觉还不错，分享一下！</p>
<p><img src="/images/bianchenghappy/01.png" alt="01"></p>
<p><img src="/images/bianchenghappy/02.png" alt="02"></p>
<p><img src="/images/bianchenghappy/03.png" alt="03"></p>
<p><img src="/images/bianchenghappy/04.png" alt="04"></p>
<p><strong>你懂的！</strong></p>
<p>链接: <a href="http://pan.baidu.com/s/1nqpGE" target="_blank" rel="external">http://pan.baidu.com/s/1nqpGE</a> 密码: k2un</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感觉还不错，分享一下！</p>
<p><img src="/images/bianchenghappy/01.png" alt="01"></p>
<p><img src="/images/bianchenghappy/02.png" alt="02"></p>
<p><i]]>
    </summary>
    
      <category term="心态" scheme="http://liuxing.info/tags/%E5%BF%83%E6%80%81/"/>
    
      <category term="编程" scheme="http://liuxing.info/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="职业发展" scheme="http://liuxing.info/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
      <category term="书摘" scheme="http://liuxing.info/categories/%E4%B9%A6%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java7 Try-with-resources (TWR)]]></title>
    <link href="http://liuxing.info/2014/09/25/Java7%20Try-with-resources%20(TWR)/"/>
    <id>http://liuxing.info/2014/09/25/Java7 Try-with-resources (TWR)/</id>
    <published>2014-09-25T05:45:49.000Z</published>
    <updated>2015-06-16T13:05:05.000Z</updated>
    <content type="html"><![CDATA[<p>转自《Java程序员修炼之道》</p>
<p>使用Java7的Try-with-resources来自动关闭资源</p>
<p>这个修改说起来容易，但其实暗藏玄机，最终证明做起来比最初预想的要难。其基本设想是把资源（比如文件或类似的东西）的作用域限定在代码块内，当程序离开这个代码块时，资源会被自动关闭。</p>
<p>这是一项非常重要的改进，因为没人能在手动关闭资源时做到100%正确，甚至不久前Sun提供的操作指南都是错的。在向Coin项目提交这一提案时，提交者宣称JDK中有三分之二的close()用法都有bug，真是不可思议！</p>
<p>好在编译器可以生成这种学究化、公式化且手工编写易犯错的代码，所以Java 7借助了编译器来实现这项改进。</p>
<p>这可以减少我们编写错误代码的几率。相比之下，想想你用Java 6写段代码，要从一个URL（url）中读取字节流，并把读取到的内容写入到文件（out）中，这么做很容易产生错误。以下代码是可行方案之一。</p>
<p><strong>Java 6中的资源管理语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  is = url.openStream();</span><br><span class="line">  OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buf)) &gt;= <span class="number">0</span>)</span><br><span class="line">      out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException iox) &#123;               <span class="comment">// 处理异常（能读或写）</span></span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       out.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException closeOutx) &#123;      <span class="comment">// 遇到异常也做不了什么</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (FileNotFoundException fnfx) &#123;      <span class="comment">// 处理异常</span></span><br><span class="line"> &#125; <span class="keyword">catch</span> (IOException openx) &#123;               <span class="comment">// 处理异常</span></span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (is != <span class="keyword">null</span>) is.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException closeInx) &#123;         <span class="comment">// 遇到异常也做不了什么</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>看明白了吗？重点是在处理外部资源时，墨菲定律（任何事都可能出错）一定会生效，比如：</p>
<ul>
<li>URL中的InputStream无法打开，不能读取或无法正常关闭；</li>
<li>OutputStream对应的File无法打开，无法写入或不能正常关闭；</li>
<li>上面的问题同时出现。</li>
</ul>
<p>最后一种情况是最让人头疼的——异常的各种组合拳打出来令人难以招架。</p>
<p>新语法能大大减少错误发生的可能性，这正是它受欢迎的主要原因。编译器不会犯开发人员编写代码时易犯的错误。</p>
<p>让我们看看代码清单1-3中的代码用Java 7写出来什么样。和前面一样，url是一个指向下载目标文件的URL对象，file是一个保存下载数据的File对象。</p>
<p><strong>Java 7中的资源管理语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">     InputStream is = url.openStream() ) &#123;</span><br><span class="line">  <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">  <span class="keyword">int</span>  len;</span><br><span class="line">  <span class="keyword">while</span> ((len = is.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是资源自动化管理代码块的基本形式——把资源放在try的圆括号内。C#程序员看到这个也许会觉得有点眼熟，是的，它的确很像C#中的从句，带着这种理解使用这个新特性是个不错的起点。在这段代码块中使用的资源在处理完成后会自动关闭。</p>
<p>但使用try-with-resources特性时还是要小心，因为在某些情况下资源可能无法关闭。比如在下面的代码中，如果从文件（someFile.bin）创建ObjectInputStream时出错，FileInputStream可能就无法正确关闭。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> ( ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">      FileInputStream(<span class="string">"someFile.bin"</span>)) ) &#123; </span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假定文件（someFile.bin）存在，但可能不是ObjectInput类型的文件，所以文件无法正确打开。因此不能构建ObjectInputStream，所以FileInputStream也没办法关闭。</p>
<p>要确保try-with-resources生效，正确的用法是为各个资源声明独立变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> ( FileInputStream fin = <span class="keyword">new</span> FileInputStream(<span class="string">"someFile.bin"</span>);</span><br><span class="line">          ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fin) ) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TWR的另一个好处是改善了错误跟踪的能力，能够更准确地跟踪堆栈中的异常。在Java 7之前，处理资源时抛出的异常信息经常会被覆盖。TWR中可能也会出现这种情况，因此Java 7对跟踪堆栈进行了改进，现在开发人员能看到可能会丢失的异常类型信息。</p>
<p>比如在下面这段代码中，有一个返回InputStream的值为null的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span>(InputStream i = getNullStream()) &#123;</span><br><span class="line">   i.available();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在改进后的跟踪堆栈中能看到提示，注意其中被抑制的NullPointerException（简称NPE）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException </span><br><span class="line">  at wgjd.ch01.ScratchSuprExcep.run(ScratchSuprExcep.java:<span class="number">23</span>)</span><br><span class="line">  at wgjd.ch01.ScratchSuprExcep.main(ScratchSuprExcep.java:<span class="number">39</span>)</span><br><span class="line">  Suppressed:java.lang.NullPointerException </span><br><span class="line">  at wgjd.ch01.ScratchSuprExcep.run(ScratchSuprExcep.java:<span class="number">24</span>)   </span><br><span class="line">    <span class="number">1</span> more</span><br></pre></td></tr></table></figure>
<p><strong>TWR与AutoCloseable</strong></p>
<p>目前TWR特性依靠一个新定义的接口实现AutoCloseable。TWR的try从句中出现的资源类都必须实现这个接口。Java 7平台中的大多数资源类都被修改过，已经实现了AutoCloseable（Java 7中还定义了其父接口Closeable），但并不是全部资源相关的类都采用了这项新技术。不过，JDBC 4.1已经具备了这个特性。</p>
<p>然而在你自己的代码里，在需要处理资源时一定要用TWR，从而避免在异常处理时出现bug。</p>
<p>希望你能尽快使用try-with-resources，把那些多余的bug从代码库中赶走。</p>
<p><img src="/images/xiulianzhidao.png" alt="xiulianzhidao"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转自《Java程序员修炼之道》</p>
<p>使用Java7的Try-with-resources来自动关闭资源</p>
<p>这个修改说起来容易，但其实暗藏玄机，最终证明做起来比最初预想的要难。其基本设想是把资源（比如文件或类似的东西）的作用域限定在代码块内，当程序离开这]]>
    </summary>
    
      <category term="Java7" scheme="http://liuxing.info/tags/Java7/"/>
    
      <category term="TWR" scheme="http://liuxing.info/tags/TWR/"/>
    
      <category term="书摘" scheme="http://liuxing.info/categories/%E4%B9%A6%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux软件的安装、更新与卸载]]></title>
    <link href="http://liuxing.info/2014/04/25/linux%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
    <id>http://liuxing.info/2014/04/25/linux软件的安装、更新与卸载/</id>
    <published>2014-04-24T17:52:00.000Z</published>
    <updated>2015-06-16T13:06:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>Linux常见的安装为tar，zip，gz，rpm，deb，bin等。可以简单的分为三类.</p>
<blockquote>
<ul>
<li>打包或压缩文件tar，zip，gz等，一般解压后即可，或者解压后运行sh文件；</li>
<li>对应的有管理工具的deb，rpm等，通常的这类安装文件可以通过第三方的命令行或UI来简单的安装。<br>例如Ubuntu中的apt来安装；deb，Redhat中的yum来安装rpm；</li>
<li>像.bin类，其实就是把sh和zip打包为bin，或把sh和rpm打包为bin等，当在命令行运行bin安装文件时，其实就是bin里面的sh来解压bin中的zip或安装rpm的过程</li>
</ul>
</blockquote>
<p><br><br></p>
<h2 id="安装">安装</h2><h3 id="rpm安装，更新与卸载">rpm安装，更新与卸载</h3><p><em>RPM包，这种软件包就像windows的EXE安装文件一样，各种文件已经编译好，并打了包，哪个文件该放到哪个文件夹，都指定好了，安装非常方便，在图形界面里你只需要双击就能自动安装。但是有一点不好，就是包的依赖关系，很恶心。</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A. rpm安装</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>) 找到相应的软件包，比如jmagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">3</span>.src.rpm，下载到本机某个目录；</span><br><span class="line">  <span class="number">2</span>) 打开一个终端，su 成root用户；</span><br><span class="line">  <span class="number">3</span>) <span class="built_in">cd</span> jmagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">3</span>.src.rpm所在的目录；</span><br><span class="line">  <span class="number">4</span>) 输入rpm -ivh jmagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">3</span>.src.rpm</span><br><span class="line"></span><br><span class="line">B.rpm更新</span><br><span class="line">   <span class="comment">#rpm -Uvh jmagick-6.4.0-3.src.rpm</span></span><br><span class="line"></span><br><span class="line">C.rpm卸载</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>) 查找欲卸载的软件包 rpm -qa | grep ×XXX×</span><br><span class="line">   <span class="number">2</span>) 例如找到软件mysql-<span class="number">4.1</span>.<span class="number">22</span>-<span class="number">2</span>.el4_8.<span class="number">4</span> ，执行rpm <span class="operator">-e</span> mysql-<span class="number">4.1</span>.<span class="number">22</span>-<span class="number">2</span>.el4_8.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"> 注意：查询软件的安装目录，用命令 rpm -ql mysql-<span class="number">4.1</span>.<span class="number">22</span>-<span class="number">2</span>.el4_8.<span class="number">4</span></span><br></pre></td></tr></table></figure>
<h3 id="以-bin结尾的安装包">以.bin结尾的安装包</h3><p><em>bin类似rpm包安装，也比较简单</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin安装</span><br><span class="line">    <span class="number">1</span>) 打开一个SHELL，即终端</span><br><span class="line">    <span class="number">2</span>) 用CD 命令进入源代码压缩包所在的目录</span><br><span class="line">    <span class="number">3</span>) 给文件加上可执行属性：chmod +x ******.bin(中间是字母x，小写)</span><br><span class="line">    <span class="number">4</span>) 执行命令：./******.bin 或者 直接执行 sh ******.bin</span><br><span class="line"></span><br><span class="line">   bin卸载</span><br><span class="line">     把安装时中选择的安装目录删除就OK</span><br></pre></td></tr></table></figure>
<h3 id="tar-gz(bz或bz2等)结尾的源代码包">tar.gz(bz或bz2等)结尾的源代码包</h3><p><em>这种软件包里面都是源程序，没有编译过，需要编译后才能安装</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">源代码安装</span><br><span class="line">    <span class="number">1</span>) 打开一个SHELL，即终端</span><br><span class="line">    <span class="number">2</span>) 用CD 命令进入源代码压缩包所在的目录</span><br><span class="line">    <span class="number">3</span>) 根据压缩包类型解压缩文件(*代表压缩包名称)</span><br><span class="line">　　   tar -zxvf ****.tar.gz</span><br><span class="line">　　   tar -jxvf ****.tar.bz(或bz2)</span><br><span class="line">    <span class="number">4</span>) 用CD命令进入解压缩后的目录</span><br><span class="line">    <span class="number">5</span>) 输入编译文件命令：./configure(有的压缩包已经编译过，这一步可以省去)</span><br><span class="line">    <span class="number">6</span>) 然后是命令：make</span><br><span class="line">    <span class="number">7</span>) 再是安装文件命令：make install</span><br></pre></td></tr></table></figure>
<h3 id="yum安装">yum安装</h3><p><em>yum是rpm的管理工具，管理一个软件库，可以很好的解决依赖关系</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) yum安装</span><br><span class="line">    yum install -y 软件名</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) yum更新</span><br><span class="line">    yum update -y  软件名</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) yum卸载</span><br><span class="line">    yum remove -y 软件名</span><br><span class="line">    或</span><br><span class="line">    yum erase -y 软件名</span><br></pre></td></tr></table></figure>
<h3 id="apt-get安装">apt-get安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get 是deb的管理工具，类似yum</span><br><span class="line">apt-get install package 安装包</span><br><span class="line">apt-get reinstall package  重新安装包</span><br><span class="line">apt-get upgrade 更新已安装的包</span><br><span class="line">apt-cache rdepends package 是查看该包被哪些包依赖</span><br><span class="line">apt-cache depends package 了解使用依赖</span><br><span class="line">apt-get clean &amp;&amp;  apt-get autoclean 清理无用的包</span><br><span class="line">apt-cache show package 获取包的相关信息，如说明、大小、版本等</span><br><span class="line">apt-get remove package 删除包</span><br><span class="line">apt-get purge package  删除包，包括删除配置文件等</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>Linux常见的安装为tar，zip，gz，rpm，deb，bin等。可以简单的分为三类.</p>
<blockquote>
<ul>
<li>打包或压缩文件tar，zip，gz等，一般解压后即可，或者解压后运行sh文件；</li>
<]]>
    </summary>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows 系统常用命令]]></title>
    <link href="http://liuxing.info/2014/03/20/Windows%20%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://liuxing.info/2014/03/20/Windows 系统常用命令/</id>
    <published>2014-03-20T02:54:00.000Z</published>
    <updated>2015-06-16T13:07:12.000Z</updated>
    <content type="html"><![CDATA[<p>来自小辉哥</p>
<h2 id="必备命令">必备命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msinfo32,查看系统各种信息（环境变量、驱动等等）</span><br><span class="line">gpedit.msc 组策略编辑</span><br><span class="line">gpupdate /force 组策略更新 </span><br><span class="line">mstsc 远程桌面 </span><br><span class="line">mmc控制台 </span><br><span class="line">services.msc 服务配置 </span><br><span class="line">taskmgr 任务管理器</span><br><span class="line">regedit：注册表编辑器</span><br><span class="line">compmgmt.msc 计算机管理</span><br><span class="line">devmgmt.msc 设备管理</span><br><span class="line">ServerManager.msc 服务器管理</span><br><span class="line">gpmc.msc组策略管理</span><br><span class="line">ipconfig 查看ip地址信息</span><br><span class="line">tasklist /M </span><br><span class="line">    显示进程引用的所有dll</span><br><span class="line"></span><br><span class="line">tasklist /SVC </span><br><span class="line">    显示每个进程里的服务。配合find 命令，可以筛选指定服务的进程信息 </span><br><span class="line">    例如： tasklist /SVC | find <span class="string">"AjaxCenter"</span></span><br><span class="line"></span><br><span class="line">fsutil fsinfo ntfsinfo c:</span><br><span class="line">    查看文件系统信息，可知道IO block size,对程序优化也有借鉴作用。</span><br></pre></td></tr></table></figure>
<h2 id="其他常用命令">其他常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysdm.cpl：查看计算机属性</span><br><span class="line">dxdiag ： 查看DirectX相关信息,也可以查看内存</span><br><span class="line">devmgmt.msc： 设备管理</span><br><span class="line">wmic diskdrive  可以看出来磁盘和大小.</span><br><span class="line">Wmic logicaldisk 可以看出来磁盘和大小</span><br><span class="line">wmic volume .可以看到有几个盘，每一个盘的文件系统和剩余空间</span><br><span class="line">fsutil volume diskfree c: 每个盘的剩余空间量，其实上一个命令也可以查看的</span><br><span class="line">wmic cpu 上面显示的有位宽，最大始终频率， 生产厂商，二级缓存等信息</span><br><span class="line">wmic memorychip 查看Windows7和<span class="number">2003</span>的内存属性  </span><br><span class="line">WMIC MEMLOGICAL 查看xp内存命令</span><br><span class="line">wmic bios  BIOS信息</span><br><span class="line">systeminfo 详细系统信息，内存，显卡，处理器</span><br><span class="line">wmic  process get Caption,name,commandline | find <span class="string">"red5"</span>,可以获取进程调用命令的详细情况</span><br><span class="line">ver 查看操作系统版本。</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>来自小辉哥</p>
<h2 id="必备命令">必备命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msinfo32,查看系统各种信息（环境变]]>
    </summary>
    
      <category term="windows" scheme="http://liuxing.info/tags/windows/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在windows和linux上安装ImageMagick与Jmagick]]></title>
    <link href="http://liuxing.info/2013/12/20/%E5%9C%A8windows%E5%92%8Clinux%E4%B8%8A%E5%AE%89%E8%A3%85ImageMagick%E4%B8%8EJmagick/"/>
    <id>http://liuxing.info/2013/12/20/在windows和linux上安装ImageMagick与Jmagick/</id>
    <published>2013-12-19T16:29:00.000Z</published>
    <updated>2015-06-16T13:20:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Linux安装Jmagick">Linux安装Jmagick</h2><h3 id="下载JMagick和ImageMagick">下载JMagick和ImageMagick</h3><p><a href="http://downloads.jmagick.org/6.4.0/jmagick-6.4.0-src.tar.gz" target="_blank" rel="external">http://downloads.jmagick.org/6.4.0/jmagick-6.4.0-src.tar.gz</a><br><a href="http://downloads.jmagick.org/6.4.0/ImageMagick-6.4.0-0.tar.gz" target="_blank" rel="external">http://downloads.jmagick.org/6.4.0/ImageMagick-6.4.0-0.tar.gz</a>  </p>
<p>文件存到一个指定目录，如/usr/local/ImageMagick，该目录就是后续的安装目录</p>
<h3 id="安装依赖包">安装依赖包</h3><p>yum install libpng<br>yum install libpng-devel<br>yum install libjpeg<br>yum install libjpeg-devel<br>yum install gd<br>yum install gd-devel<br>yum install libtiff<br>yum install libtiff-devel<br>yum install gcc （很重要）<br>yum install zlib(可选)<br>是zlib通用压缩库，图形格式png使用zlib中的deflate压缩算法</p>
<h3 id="安装ImageMagick">安装ImageMagick</h3><p><code>cd /usr/local/ImageMagick</code></p>
<p>1.解压</p>
<p><code>tar zxf ImageMagick-6.4.0-0.tar.gz</code></p>
<p>2.切换到解压目录</p>
<p><code>cd ImageMagick-6.4.0</code></p>
<p>3.编译源文件</p>
<p><code>./configure --prefix=/usr/local/ImageMagick --enable-shared --without-perl --with-quantum-depth=8</code></p>
<p>configure参数说明：<br>—enable-shared 编译成共享库(建议)<br>—disable-static 不编译成静态库<br>—with-quantum-depth=8 使用8位色深。我的1200万像素数码相机，照出的图片就是8位色深。(建议)<br>—with-windows-font-dir=目录 ，指明字体文件的目录（后面将人工复制中文字体文件到这个目录）(可选)<br>—disable-openmp 禁用多线程，使用多线程性能并没有提高，但CPU占用达到了100%，所以禁用了。(可选)</p>
<h3 id="安装（需要几分钟时间）">安装（需要几分钟时间）</h3><p><code>make &amp;&amp; make install</code></p>
<p>由于ImageMagic被安装在我们自行指定的/usr/local/ImageMagick，后面安装JMagic会找不到需要用到的ImageMagic的命令和库，因此需要配置一下操作系统： </p>
<p>1.编辑/etc/profile里面的PATH环境变量：<br><code>vi /etc/profile</code></p>
<p>结尾加入：<br><code>export PATH=/usr/local/ImageMagick/bin:$PATH</code></p>
<p>2.编辑/etc/ld.so.conf<br><code>vi /etc/ld.so.conf</code></p>
<p>加入：<br><code>/usr/local/ImageMagick/lib</code></p>
<p>3.执行命令，将ImageMagick的库加入系统联接库：<br><code>ldconfig</code></p>
<p>4.重新登录<br>5.查看版本：<br><code>convert --version</code></p>
<p>例如：</p>
<p><code>convert —version</code><br><code>Version: ImageMagick 6.4.0 12/27/11 Q16 http://www.imagemagick.org</code><br><code>Copyright: Copyright (C) 1999-2008 ImageMagick Studio LLC</code></p>
<h3 id="安装并配置JMagick">安装并配置JMagick</h3><p>1.解压<br><code>tar xzvf jmagick-6.4.0-src.tar.gz</code></p>
<p>2.解压源码移入/usr/local/jmagick<br><code>mv 6.4.0/ /usr/local/jmagick</code></p>
<p>3.切换到目录<br><code>cd /usr/local/jmagick/</code></p>
<p>4.查看所有环境变量<br><code>env</code></p>
<p>5.编译源文件<br><code>./configure --with-java-home=/usr/java/jdk1.7.0/ --with-magick-home=/usr/local/ImageMagick</code></p>
<p>6.安装（需要几分钟）<br><code>make &amp;&amp; make install</code></p>
<p>7.保证已经配置好环境变量<br><code>$JAVA_HOME 和  $JRE_HOME</code><br>切换到用户根目录查看<br><code>vi /.bash_profile</code><br><code>vi /home/loupan/.bash_profile</code><br>…</p>
<p>如：<br><code>export JAVA_HOME=/usr/local/java/jdk1.7.0_45</code><br><code>export JRE_HOME=/usr/local/java/jdk1.7.0_45/jre</code><br><code>export PATH=$JAVA_HOME/bin:$PATH</code><br><code>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code></p>
<p>8.拷贝依赖文件到jdk<br><code>cp /usr/local/jmagick/lib/libJMagick-6.4.0.so $JAVA_HOME/jre/lib/amd64/libJMagick.so</code><br><code>cp /usr/local/jmagick/lib/jmagick-6.4.0.jar $JRE_HOME/lib/jmagick.jar</code></p>
<p>备注：</p>
<p><code>$JAVA_HOME=/usr/java/jdk1.7.0/</code><br><code>$JRE_HOME=$JAVA_HOME/jre</code></p>
<h2 id="windows安装Jmagick">windows安装Jmagick</h2><p>以ImageMagick-6.3.9-0-Q16-windows-dll.exe安装到windows为例，</p>
<p>下载ImageMagick-6.3.9-0-Q16-windows-dll.exe和jmagick-win-6.3.9-Q16.zip</p>
<p>1.下载ImageMagick-6.3.9-0-Q16-windows-dll.exe安装，在那个多选界面请选择所有内容(是一些依赖的库，避免出现不可预知的错误)。<br>2.检查看系统环境变量PATH里面是否添加了环境变量，如果没有需要添加安装路径。<br>3.将jmagick.dll拷贝到C:/windows/system32目录下。<br>4.将jmagick.dll拷贝到%TOMECAT%/bin目录下。<br>5.将jmagick.dll拷贝到%JAVA_HOME%/bin目录下。<br>6.还要把jmagick.jar复制到%JAVA_HOME%/jre/lib/ext下<br>7.还要把jmagick.jar复制到%TOMCAT%/lib下<br>8.使用时将jmagick.jar拷贝到项目，在类里加上静态块，用系统的类加载器指定，否则会出现类无法加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">     <span class="comment">// 如果部署到WEB应用，就要加下面这句。不然会报“UnsatisfiedLinkError: no JMagick in</span></span><br><span class="line">    <span class="comment">// java.library.path”。</span></span><br><span class="line">    System. setProperty(<span class="string">"jmagick.systemclassloader"</span>, <span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><p><a href="http://xlogin.blog.51cto.com/3473583/717321" target="_blank" rel="external">http://xlogin.blog.51cto.com/3473583/717321</a><br><a href="http://elf8848.iteye.com/blog/455675" target="_blank" rel="external">http://elf8848.iteye.com/blog/455675</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Linux安装Jmagick">Linux安装Jmagick</h2><h3 id="下载JMagick和ImageMagick">下载JMagick和ImageMagick</h3><p><a href="http://downloads.jmagick.org]]>
    </summary>
    
      <category term="jmagick" scheme="http://liuxing.info/tags/jmagick/"/>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="windows" scheme="http://liuxing.info/tags/windows/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用jmagick将CMYK转换为RGB]]></title>
    <link href="http://liuxing.info/2013/05/23/%E4%BD%BF%E7%94%A8jmagick%E5%B0%86CMYK%E8%BD%AC%E6%8D%A2%E4%B8%BARGB/"/>
    <id>http://liuxing.info/2013/05/23/使用jmagick将CMYK转换为RGB/</id>
    <published>2013-05-22T16:27:00.000Z</published>
    <updated>2015-06-16T13:20:00.000Z</updated>
    <content type="html"><![CDATA[<p>最近发现公司图片库中有些打水印的图片水印色彩和其他的不一样，后来发现是设计师上传的图片的色彩值是CMYK的，想要统一成RGB格式的。<br>之前使用的是jmagick进行的图片压缩和水印，看了一下jmagick的官方介绍，是有提供转换图片色彩格式的方法。记录一下，给碰到类似问题的同学提供参考。</p>
<p>jmagick的ColorspaceType里面是色彩格式对应的常量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GRAYColorspace = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TransparentColorspace = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OHTAColorspace = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> XYZColorspace = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> YCbCrColorspace = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> YCCColorspace = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> YIQColorspace = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> YPbPrColorspace = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> YUVColorspace = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CMYKColorspace = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> sRGBColorspace = <span class="number">12</span>;</span><br></pre></td></tr></table></figure>
<p>将图片创建成MagickImage对象</p>
<p>ImageInfo imageInfo = new ImageInfo(filePath);<br>MagickImage fromImage = new MagickImage(imageInfo);</p>
<p>然后通过fromImage.getColorspace()可以拿到色彩格式</p>
<p>完整代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * jmagick 将所有图片色彩统一为RGB</span><br><span class="line">	 * <span class="doctag">@param</span> filePath 原图路径</span><br><span class="line">	 * <span class="doctag">@param</span> toFilePath 转换后的图片路径</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 * <span class="doctag">@throws</span> Exception</span><br><span class="line">	 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">convert2RGB</span><span class="params">(String filePath, String toFilePath)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        ImageInfo imageInfo = <span class="keyword">new</span> ImageInfo(filePath);</span><br><span class="line">        MagickImage fromImage = <span class="keyword">new</span> MagickImage(imageInfo);</span><br><span class="line">        <span class="keyword">if</span>(fromImage.getColorspace() != ColorspaceType.RGBColorspace)&#123;</span><br><span class="line">            <span class="comment">//因为是将所有其他格式转换为RGB格式，需要将当前文件的色彩格式传入</span></span><br><span class="line">            fromImage.transformRgbImage(fromImage.getColorspace());</span><br><span class="line">            fromImage.setFileName(toFilePath);</span><br><span class="line">            fromImage.writeImage(imageInfo);</span><br><span class="line">            stream = <span class="keyword">new</span> FileInputStream(toFilePath);</span><br><span class="line">            <span class="keyword">return</span> stream;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(filePath));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近发现公司图片库中有些打水印的图片水印色彩和其他的不一样，后来发现是设计师上传的图片的色彩值是CMYK的，想要统一成RGB格式的。<br>之前使用的是jmagick进行的图片压缩和水印，看了一下jmagick的官方介绍，是有提供转换图片色彩格式的方法。记录一下，给碰到类似]]>
    </summary>
    
      <category term="jmagick" scheme="http://liuxing.info/tags/jmagick/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个简单的百度地图示例]]></title>
    <link href="http://liuxing.info/2012/09/08/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%A4%BA%E4%BE%8B/"/>
    <id>http://liuxing.info/2012/09/08/一个简单的百度地图示例/</id>
    <published>2012-09-07T16:25:00.000Z</published>
    <updated>2015-06-16T13:07:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>百度地图API是一套由JavaScript语言编写的应用程序接口，它能够帮助您在网站中构建功能丰富、交互性强的地图应用。百度地图API包含了构建地图基本功能的各种接口，提供了诸如本地搜索、路线规划等数据服务。</p>
<p>百度地图相对谷歌地图来说，提供的数据比较全面，比如交通路线。功能也比较多，基本上现在各大网站都是使用的百度地图，同时文档和API也做得不错。</p>
<p>个人建议使用百度地图API开发时，详细阅读官方提供的类参考和官方示例。最好是对API中各个类的基本功能有个大致的了解。如果看到某些网站的地图很炫，也可以借助firebug或其他工具查看源码参考其实现。官网成功案例展示的那些网站的地图功能都可以参考。如果想要更高级绚丽的功能，官网的地图开源库也可以了解一下。</p>
<p>贴出来的code是js的代码，可以运行的实例请下载文章的附件。有部分功能使用了jquery，不了解的童鞋请了解下jquery的使用语法。</p>
<p>此demo主要实现了以下几个功能</p>
<ul>
<li>创建一个简单地图实例，配置了常用的地图上的控件，比如缩略地图、比例尺控件、缩放控件等。</li>
<li>使用ajax查询后台数据，并将其标注到地图中（大众化需求）。</li>
<li>拖拽地图后保存修改后的坐标（大众化需求）。</li>
<li>通过地图外的html操作地图内的功能（demo中只提供了点击某个链接，在地图中对应标注上打开信息窗口，需要其他工的请参考类文档后自由发挥）。</li>
<li>其他一些细微的功能，基本地图中要用到的。</li>
</ul>
<p>code中使用js实现的hash完成了部分功能，不理解该原理的童鞋也请自己去补习相关知识，或者使用数组形式，官方示例中可以找到相关实现好的code。</p>
<p>自己的js是已经使用闭包的形式了，这里还是普通形式，建议使用闭包方式，好处的话大家都懂得。最后还是那句话，请多看类参考文档和官方示例。</p>
<h2 id="示例">示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开始加载地图的处理 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="openscad"></span><br><span class="line"><span class="comment">// 存储信息窗的hash表</span></span><br><span class="line">var infoWindowMap = new Hash<span class="params">()</span>; </span><br><span class="line"><span class="comment">// 存储标注的hash表</span></span><br><span class="line">var markerMap = new Hash<span class="params">()</span>;	  </span><br><span class="line"></span><br><span class="line">var buildingJsonStr = '[&#123;<span class="string">"buildingId"</span>: <span class="string">"0710101842282A67E3162603F6250D67"</span>, <span class="string">"name"</span>: <span class="string">"02"</span>, <span class="string">"x"</span>: <span class="string">"31.22127"</span>, <span class="string">"y"</span>: <span class="string">"121.398516"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422820AD64EAB3AC576FFD3E"</span>, <span class="string">"name"</span>: <span class="string">"03"</span>, <span class="string">"x"</span>: <span class="string">"31.221587"</span>, <span class="string">"y"</span>: <span class="string">"121.397745"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422845B31172C77A176BDB43"</span>, <span class="string">"name"</span>: <span class="string">"04"</span>, <span class="string">"x"</span>: <span class="string">"31.220695"</span>, <span class="string">"y"</span>: <span class="string">"121.39827"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228A7EF4B0094030694C1B5"</span>, <span class="string">"name"</span>: <span class="string">"05"</span>, <span class="string">"x"</span>: <span class="string">"31.220769"</span>, <span class="string">"y"</span>: <span class="string">"121.397956"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228057205C5220A4924B99F"</span>, <span class="string">"name"</span>: <span class="string">"06"</span>, <span class="string">"x"</span>: <span class="string">"31.220178"</span>, <span class="string">"y"</span>: <span class="string">"121.398149"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422891C6FB5F3838EA67AEB6"</span>, <span class="string">"name"</span>: <span class="string">"07"</span>, <span class="string">"x"</span>: <span class="string">"31.220236"</span>, <span class="string">"y"</span>: <span class="string">"121.397776"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228E99A96B62460853A93B0"</span>, <span class="string">"name"</span>: <span class="string">"08"</span>, <span class="string">"x"</span>: <span class="string">"31.220576"</span>, <span class="string">"y"</span>: <span class="string">"121.397269"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228F4A035D852D89F418667"</span>, <span class="string">"name"</span>: <span class="string">"09"</span>, <span class="string">"x"</span>: <span class="string">"31.220638"</span>, <span class="string">"y"</span>: <span class="string">"121.396932"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228869C8C3AA796DB2D6A17"</span>, <span class="string">"name"</span>: <span class="string">"10"</span>, <span class="string">"x"</span>: <span class="string">"31.22051"</span>, <span class="string">"y"</span>: <span class="string">"121.39633"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"0710101842288CD20D0E333F3D775AEE"</span>, <span class="string">"name"</span>: <span class="string">"11"</span>, <span class="string">"x"</span>: <span class="string">"31.220634"</span>, <span class="string">"y"</span>: <span class="string">"121.395917"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228465B808DF2361EF74872"</span>, <span class="string">"name"</span>: <span class="string">"12"</span>, <span class="string">"x"</span>: <span class="string">"31.221186"</span>, <span class="string">"y"</span>: <span class="string">"121.396132"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422876B9BD4DD764214A37EF"</span>, <span class="string">"name"</span>: <span class="string">"13"</span>, <span class="string">"x"</span>: <span class="string">"31.221151"</span>, <span class="string">"y"</span>: <span class="string">"121.396478"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422860A7AEE993AD2F3D254E"</span>, <span class="string">"name"</span>: <span class="string">"14"</span>, <span class="string">"x"</span>: <span class="string">"31.221923"</span>, <span class="string">"y"</span>: <span class="string">"121.396478"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228D993F7D6F104C6241EA0"</span>, <span class="string">"name"</span>: <span class="string">"15"</span>, <span class="string">"x"</span>: <span class="string">"31.221529"</span>, <span class="string">"y"</span>: <span class="string">"121.397035"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228C77408F277C2A0FFF9EA"</span>, <span class="string">"name"</span>: <span class="string">"16"</span>, <span class="string">"x"</span>: <span class="string">"31.222487"</span>, <span class="string">"y"</span>: <span class="string">"121.39682"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422850C5CEFCC37B745AE217"</span>, <span class="string">"name"</span>: <span class="string">"17"</span>, <span class="string">"x"</span>: <span class="string">"31.222155"</span>, <span class="string">"y"</span>: <span class="string">"121.397278"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228CE5998B16072B7EADAF0"</span>, <span class="string">"name"</span>: <span class="string">"18"</span>, <span class="string">"x"</span>: <span class="string">"31.222992"</span>, <span class="string">"y"</span>: <span class="string">"121.396829"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228C4AE0885ED1B1934CAC7"</span>, <span class="string">"name"</span>: <span class="string">"19"</span>, <span class="string">"x"</span>: <span class="string">"31.223008"</span>, <span class="string">"y"</span>: <span class="string">"121.397215"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228A28019A162C9F30FB412"</span>, <span class="string">"name"</span>: <span class="string">"20"</span>, <span class="string">"x"</span>: <span class="string">"31.223054"</span>, <span class="string">"y"</span>: <span class="string">"121.397745"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"071010184228BE86B8C490400D07A7D9"</span>, <span class="string">"name"</span>: <span class="string">"21"</span>, <span class="string">"x"</span>: <span class="string">"31.223039"</span>, <span class="string">"y"</span>: <span class="string">"121.398109"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"0710101842284F721F26E60E4AE38B78"</span>, <span class="string">"name"</span>: <span class="string">"22"</span>, <span class="string">"x"</span>: <span class="string">"31.223062"</span>, <span class="string">"y"</span>: <span class="string">"121.398702"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422835C890FA62A7AC3D7B4F"</span>, <span class="string">"name"</span>: <span class="string">"23"</span>, <span class="string">"x"</span>: <span class="string">"31.223077"</span>, <span class="string">"y"</span>: <span class="string">"121.399106"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"0710101842293A343A9B0EE1A2F87ED6"</span>, <span class="string">"name"</span>: <span class="string">"24"</span>, <span class="string">"x"</span>: <span class="string">"31.222533"</span>, <span class="string">"y"</span>: <span class="string">"121.398567"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"0710101842298447B5294F823BF14B2E"</span>, <span class="string">"name"</span>: <span class="string">"25"</span>, <span class="string">"x"</span>: <span class="string">"31.222128"</span>, <span class="string">"y"</span>: <span class="string">"121.398109"</span>&#125;, &#123;<span class="string">"buildingId"</span>: <span class="string">"07101018422905330D8B854F88DD30DD"</span>, <span class="string">"name"</span>: <span class="string">"26"</span>, <span class="string">"x"</span>: <span class="string">"31.221888"</span>, <span class="string">"y"</span>: <span class="string">"121.398769"</span>&#125;]';</span><br><span class="line"></span><br><span class="line">var estateJsonStr = '[&#123;<span class="string">"estateId"</span>: <span class="string">"0705280229021824977FE8318D179397"</span>, <span class="string">"name"</span>: <span class="string">"天山河畔花园"</span>, <span class="string">"address"</span>: <span class="string">"水城路883弄/长宁路"</span>, <span class="string">"x"</span>: <span class="string">"31.221034"</span>, <span class="string">"y"</span>: <span class="string">"121.397223"</span>&#125;]'</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取相关的json数组</span><br><span class="line"> * @returns</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJsonData</span><span class="params">()</span> &#123;</span></span><br><span class="line">    var reltJson;</span><br><span class="line">    var url = <span class="string">"Your url"</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// 此处注释请求后台程序获取json数组的方法，直接返回定义好的json数组</span></span><br><span class="line"><span class="comment">//    $.ajax(&#123;</span></span><br><span class="line"><span class="comment">//        type: 'GET',</span></span><br><span class="line"><span class="comment">//        url: url,</span></span><br><span class="line"><span class="comment">//        async: false,</span></span><br><span class="line"><span class="comment">//        dataType: 'json',</span></span><br><span class="line"><span class="comment">//        timeout: 50000,</span></span><br><span class="line"><span class="comment">//        cache: false,</span></span><br><span class="line"><span class="comment">//        error: function(XMLHttpRequest, status, thrownError) &#123;</span></span><br><span class="line"><span class="comment">//            alert('Error loading ' + url +', Please send it again!');</span></span><br><span class="line"><span class="comment">//        &#125;,</span></span><br><span class="line"><span class="comment">//        success: function(json) &#123;</span></span><br><span class="line"><span class="comment">//            reltJson = json;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 转换json数组字符串成json对象，正式使用时上述ajax方法直接拿到的是json对象，不需要这步操作</span></span><br><span class="line">	reltJson = eval<span class="params">(buildingJsonStr)</span>;</span><br><span class="line"></span><br><span class="line">    return reltJson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">var map;			<span class="comment">// 地图对象		</span></span><br><span class="line">var estateJson;		<span class="comment">// 中心点json数据</span></span><br><span class="line">var mouseoutIcon;   <span class="comment">// 鼠标移出标注时的图像对象</span></span><br><span class="line">var mouseoverIcon;  <span class="comment">// 鼠标放在标注时的图像对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制地图</span></span><br><span class="line">drawMap<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 绘制地图</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawMap</span><span class="params">()</span>&#123;</span></span><br><span class="line">	estateJson = eval<span class="params">(estateJsonStr)</span>[<span class="number">0</span>];															<span class="comment">// 初始化中心点的json数据</span></span><br><span class="line">	map = new BMap.Map<span class="params">(<span class="string">"container"</span>,&#123;mapType: BMAP_HYBRID_MAP, enableHighResolution: <span class="literal">true</span>&#125;)</span>;			<span class="comment">// 设置卫星图为底图</span></span><br><span class="line">	initIcon<span class="params">()</span>;</span><br><span class="line">	configuration<span class="params">()</span>;</span><br><span class="line">	buildContextMenu<span class="params">()</span>;</span><br><span class="line">	initCenterMarker<span class="params">()</span>;</span><br><span class="line">	initOtherMarkers<span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 地图基本功能设置</span><br><span class="line"> * @param map</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configuration</span><span class="params">()</span>&#123;</span></span><br><span class="line">	<span class="comment">// 初始化中心坐标</span></span><br><span class="line">	var point = getPoint<span class="params">(estateJson.y, estateJson.x)</span>;				</span><br><span class="line">	<span class="comment">// 启用键盘操作</span></span><br><span class="line">	map.enableKeyboard<span class="params">()</span>;								</span><br><span class="line">	<span class="comment">// 启用滚轮放大缩小</span></span><br><span class="line">	map.enableScrollWheelZoom<span class="params">()</span>;		</span><br><span class="line">	<span class="comment">// 初始化地图,设置中心点坐标和地图级别</span></span><br><span class="line">	map.centerAndZoom<span class="params">(point, <span class="number">18</span>)</span>;                    			</span><br><span class="line">	<span class="comment">// 添加比例尺控件</span></span><br><span class="line">	map.addControl<span class="params">(new BMap.ScaleControl<span class="params">()</span>)</span>;		</span><br><span class="line">	<span class="comment">// 添加平移缩放控件</span></span><br><span class="line">	map.addControl<span class="params">(new BMap.NavigationControl<span class="params">()</span>)</span>;											</span><br><span class="line">	<span class="comment">// 启用地图惯性拖拽</span></span><br><span class="line">	map.enableInertialDragging<span class="params">()</span>;										</span><br><span class="line">	<span class="comment">// 展示普通街道、卫星和路网的混合视图</span></span><br><span class="line">	map.addControl<span class="params">(new BMap.MapTypeControl<span class="params">(&#123;mapTypes: [BMAP_NORMAL_MAP, BMAP_HYBRID_MAP]&#125;)</span>)</span>;	</span><br><span class="line">	<span class="comment">// 创建缩略地图控件</span></span><br><span class="line">	var control = new BMap.OverviewMapControl<span class="params">()</span>;										</span><br><span class="line">	<span class="comment">// 展开缩略地图控件，默认不展开</span></span><br><span class="line">	control.changeView<span class="params">()</span>;		</span><br><span class="line">	<span class="comment">// 添加缩略地图控件</span></span><br><span class="line">	map.addControl<span class="params">(control)</span>;  </span><br><span class="line">	<span class="comment">// 设置地图显示的城市 此项是必须设置的</span></span><br><span class="line">	map.setCurrentCity<span class="params">(<span class="string">"上海"</span>)</span>;          															</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 创建右键菜单</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildContextMenu</span><span class="params">()</span>&#123;</span></span><br><span class="line">	var contextMenu  = new BMap.ContextMenu<span class="params">()</span>;</span><br><span class="line">	var txtMenuItem = [</span><br><span class="line">	  &#123;</span><br><span class="line">	   <span class="built_in">text</span>:'放大',</span><br><span class="line">	   callback:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span>map.zoomIn<span class="params">()</span>;&#125;</span><br><span class="line">	  &#125;,</span><br><span class="line">	  &#123;</span><br><span class="line">	   <span class="built_in">text</span>:'缩小',</span><br><span class="line">	   callback:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span>map.zoomOut<span class="params">()</span>;&#125;</span><br><span class="line">	  &#125;,</span><br><span class="line">	  &#123;</span><br><span class="line">	   <span class="built_in">text</span>:'放置到最大级',</span><br><span class="line">	   callback:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span>map.setZoom<span class="params">(<span class="number">20</span>)</span>;&#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	 ];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>; i &lt; txtMenuItem.length; i++)</span>&#123;</span><br><span class="line">		contextMenu.addItem<span class="params">(new BMap.MenuItem<span class="params">(txtMenuItem[i].text,txtMenuItem[i].callback,<span class="number">100</span>)</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span><span class="params">(i==<span class="number">1</span> || i==<span class="number">3</span>)</span> &#123;</span><br><span class="line">			contextMenu.addSeparator<span class="params">()</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	map.addContextMenu<span class="params">(contextMenu)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 初始化标注图像</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initIcon</span><span class="params">()</span>&#123;</span></span><br><span class="line">	mouseoutIcon = new BMap.Icon<span class="params">(<span class="string">"images/marker-icon.gif"</span>, new BMap.Size<span class="params">(<span class="number">12</span>, <span class="number">21</span>)</span>, &#123;imageOffset:new BMap.Size<span class="params">(-<span class="number">46</span>,<span class="number">0</span>)</span>&#125;)</span>;</span><br><span class="line">	mouseoverIcon = new BMap.Icon<span class="params">(<span class="string">"images/marker-icon.gif"</span>, new BMap.Size<span class="params">(<span class="number">12</span>, <span class="number">21</span>)</span>, &#123;imageOffset:new BMap.Size<span class="params">(-<span class="number">69</span>,<span class="number">0</span>)</span>&#125;)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 初始化中心点标注</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initCenterMarker</span><span class="params">()</span>&#123;</span></span><br><span class="line">	addMarker<span class="params">(getPoint<span class="params">(estateJson.y, estateJson.x)</span>, estateJson.name, estateJson.estateId)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 初始化其他标注</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initOtherMarkers</span><span class="params">()</span>&#123;</span></span><br><span class="line">	<span class="comment">// 获取其他json数据</span></span><br><span class="line">	var markersJson = getJsonData<span class="params">()</span>;</span><br><span class="line">	$.each<span class="params">(markersJson, function<span class="params">()</span>&#123;</span><br><span class="line">		addMarker<span class="params">(getPoint<span class="params">(this.y, this.x)</span>, this.name, this.buildingId)</span>;</span><br><span class="line">	&#125;)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取栋座坐标point对象</span><br><span class="line"> * 无坐标时，随机生成在小区坐标附近</span><br><span class="line"> * @param y</span><br><span class="line"> * @param x</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoint</span><span class="params">(y, x)</span>&#123;</span></span><br><span class="line">	<span class="comment">// 因为json字符串中定义的是字符串，需要转换成float</span></span><br><span class="line">	var _y = parseFloat<span class="params">(y)</span>;</span><br><span class="line">	var _x = parseFloat<span class="params">(x)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 如果是有效的坐标，则直接创建point</span></span><br><span class="line">	<span class="keyword">if</span><span class="params">(_y &gt; <span class="number">0</span> || _x &gt; <span class="number">0</span>)</span></span><br><span class="line">		return new BMap.Point<span class="params">(_y, _x)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 如果不是有效坐标，则创建中心点附近的随机坐标值</span></span><br><span class="line">	var bounds = map.getBounds<span class="params">()</span>;</span><br><span class="line">	var sw = bounds.getSouthWest<span class="params">()</span>;</span><br><span class="line">	var ne = bounds.getNorthEast<span class="params">()</span>;</span><br><span class="line">	var lngSpan = Math.<span class="built_in">abs</span><span class="params">(sw.lng - ne.lng)</span>;</span><br><span class="line">	var latSpan = Math.<span class="built_in">abs</span><span class="params">(ne.lat - sw.lat)</span>;</span><br><span class="line">	return new BMap.Point<span class="params">(sw.lng + lngSpan * <span class="params">(Math.random<span class="params">()</span> * <span class="number">0.8</span>)</span>, ne.lat - latSpan * <span class="params">(Math.random<span class="params">()</span> * <span class="number">0.8</span>)</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 添加多个标注</span><br><span class="line"> * @param point 坐标</span><br><span class="line"> * @param text 标注文本</span><br><span class="line"> * @param buildingId 编号</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMarker</span><span class="params">(point, text, id)</span>&#123;</span></span><br><span class="line">	<span class="comment">// 创建标注</span></span><br><span class="line">	var marker = new BMap.Marker<span class="params">(point, &#123;icon:mouseoutIcon&#125;)</span>;</span><br><span class="line">	marker.setLabel<span class="params">(new BMap.Label<span class="params">(text, &#123;offset:new BMap.Size<span class="params">(<span class="number">9</span>,-<span class="number">20</span>)</span>&#125;)</span>)</span>;</span><br><span class="line">	marker.setTitle<span class="params">(text)</span>;</span><br><span class="line">	marker.enableDragging<span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 标注拖拽结束后绑定的事件</span></span><br><span class="line">	marker.addEventListener<span class="params">(<span class="string">"dragend"</span>, function<span class="params">(e)</span>&#123;</span><br><span class="line">		editCoord<span class="params">(id, e.point.lat, e.point.lng, text)</span>;</span><br><span class="line">	&#125;)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 鼠标离开标注时绑定的事件</span></span><br><span class="line">	marker.addEventListener<span class="params">(<span class="string">"mouseout"</span>, function<span class="params">(e)</span>&#123;</span><br><span class="line">		marker.setIcon<span class="params">(mouseoutIcon)</span>;</span><br><span class="line">	&#125;)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 鼠标移到标注时绑定的事件</span></span><br><span class="line">	marker.addEventListener<span class="params">(<span class="string">"mouseover"</span>, function<span class="params">(e)</span>&#123;</span><br><span class="line">		marker.setIcon<span class="params">(mouseoverIcon)</span>;</span><br><span class="line">	&#125;)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 鼠标点击标注时绑定的事件</span></span><br><span class="line">	marker.addEventListener<span class="params">(<span class="string">"click"</span>, function<span class="params">(e)</span>&#123; </span><br><span class="line">		marker.openInfoWindow<span class="params">(infoWindow)</span>;</span><br><span class="line">	&#125;)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 信息窗关闭时绑定的事件</span></span><br><span class="line">	marker.addEventListener<span class="params">(<span class="string">"infowindowclose"</span>, function<span class="params">(e)</span>&#123; </span><br><span class="line">		marker.setIcon<span class="params">(mouseoutIcon)</span>;</span><br><span class="line">	&#125;)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 信息窗打开时绑定的事件</span></span><br><span class="line">	marker.addEventListener<span class="params">(<span class="string">"infowindowopen"</span>, function<span class="params">(e)</span>&#123; </span><br><span class="line">		marker.setIcon<span class="params">(mouseoverIcon)</span>;</span><br><span class="line">	&#125;)</span>;</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 显示到地图中</span></span><br><span class="line">	map.addOverlay<span class="params">(marker)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建信息窗</span></span><br><span class="line">	var infoWindow = new BMap.InfoWindow<span class="params">(getContent<span class="params">(text)</span>)</span>;	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储到hash</span></span><br><span class="line">	infoWindowMap.put<span class="params">(id, infoWindow)</span>;</span><br><span class="line">	markerMap.put<span class="params">(id, marker)</span>;</span><br><span class="line"></span><br><span class="line">	var link = '&lt;li&gt;&lt;a href=<span class="string">"javascript:void(0);"</span> onclick=<span class="string">"showInfoWindos(\''+id+'\')"</span>&gt;'+ <span class="built_in">text</span> +'&lt;/a&gt;&lt;/li&gt;';</span><br><span class="line">	$<span class="params">('#a_view')</span>.append<span class="params">(link)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 展示标注的信息窗</span><br><span class="line"> * @param id</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showInfoWindos</span><span class="params">(id)</span>&#123;</span></span><br><span class="line">	var marker = markerMap.get<span class="params">(id)</span>;</span><br><span class="line">	<span class="keyword">if</span><span class="params">(infoWindowMap.get<span class="params">(id)</span> != <span class="literal">undef</span>ined)</span>&#123;</span><br><span class="line">		marker.openInfoWindow<span class="params">(infoWindowMap.get<span class="params">(id)</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 保存坐标编辑</span><br><span class="line"> * @param id</span><br><span class="line"> * @param x</span><br><span class="line"> * @param y</span><br><span class="line"> * @param name</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">editCoord</span><span class="params">(id, x, y, name)</span>&#123;</span></span><br><span class="line"><span class="comment">//    $.ajax(&#123;</span></span><br><span class="line"><span class="comment">//        type: 'POST',</span></span><br><span class="line"><span class="comment">//        url: 'Your url',</span></span><br><span class="line"><span class="comment">//        data: &#123;	</span></span><br><span class="line"><span class="comment">//				'id' : id, </span></span><br><span class="line"><span class="comment">//				'x' : x, </span></span><br><span class="line"><span class="comment">//				'y' : y</span></span><br><span class="line"><span class="comment">//		&#125;,</span></span><br><span class="line"><span class="comment">//        success: function(data) &#123;</span></span><br><span class="line"><span class="comment">//            showMsg("&lt;strong&gt;" + name + "修改后的坐标已自动保存&lt;/strong&gt;");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line"></span><br><span class="line">	showMsg<span class="params">('&lt;strong&gt;<span class="string">"' + name + '"</span>修改后的坐标已自动保存&lt;/strong&gt;')</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取信息窗html</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">(name)</span>&#123;</span></span><br><span class="line">	var content = <span class="string">"&lt;div&gt;&lt;p&gt;&#123;name&#125;&lt;/p&gt;&lt;/div&gt;"</span>;</span><br><span class="line">	return content.replace<span class="params">(<span class="string">"&#123;name&#125;"</span>, name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 展示坐标修改后的提醒内容</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span><span class="params">(msg)</span>&#123;</span></span><br><span class="line">	$<span class="params">('#msg_view')</span>.html<span class="params">(msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>酸奶小妹的博客也提供了不少的实例：<a href="http://www.cnblogs.com/milkmap/tag/%E5%9C%B0%E5%9B%BEAPI/default.html?page=1" target="_blank" rel="external">http://www.cnblogs.com/milkmap/tag/%E5%9C%B0%E5%9B%BEAPI/default.html?page=1</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>百度地图API是一套由JavaScript语言编写的应用程序接口，它能够帮助您在网站中构建功能丰富、交互性强的地图应用。百度地图API包含了构建地图基本功能的各种接口，提供了诸如本地搜索、路线规划等数据服务。</p>
<p>百度地图相对]]>
    </summary>
    
      <category term="地图" scheme="http://liuxing.info/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="前端" scheme="http://liuxing.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS Hash对象]]></title>
    <link href="http://liuxing.info/2012/09/08/JS%20Hash%E5%AF%B9%E8%B1%A1/"/>
    <id>http://liuxing.info/2012/09/08/JS Hash对象/</id>
    <published>2012-09-07T16:23:00.000Z</published>
    <updated>2015-06-16T13:06:12.000Z</updated>
    <content type="html"><![CDATA[<p>引用：<a href="http://blog.csdn.net/cheng5128/article/details/5072385" target="_blank" rel="external">http://blog.csdn.net/cheng5128/article/details/5072385</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 哈希对象</span><br><span class="line"> * </span><br><span class="line"> * empty 			清空hash。</span><br><span class="line"> * contains 		检测hash是否包含此键值对，参数为key</span><br><span class="line"> * put 				向hash增加一个键值对，参数两个，key与value</span><br><span class="line"> * get 				根据key取得相应的value</span><br><span class="line"> * remove 		根据key移除相应的键值对，返回修改后的hash</span><br><span class="line"> * pop 				根据key移除相应的键值对，返回被移除的value</span><br><span class="line"> * keys 			取得所有的键，以数组形式返回</span><br><span class="line"> * values 			取得所有的值，以数组形式返回</span><br><span class="line"> * items 			取得所有的键值对，以数组形式返回</span><br><span class="line"> * toObject 		变成普通对象</span><br><span class="line"> * ensure 		仅当此键不存在时才添加新的键值对</span><br><span class="line"> * forEach或each 	类似Array.forEach，迭代执行传入函数</span><br><span class="line"> * map 				类似Array.map，迭代执行传入函数，把执行结果放到一个新hash返回</span><br><span class="line"> * filter 			类似Array.filter，迭代执行传入函数，把符合条件的键值对放到一个新hash返回</span><br><span class="line"> * toString 		没什么好说的</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Hash = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">arguments</span>.callee) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">arguments</span>.callee.fn.init(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Hash.fn = Hash.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = obj[<span class="number">0</span>],</span><br><span class="line">        value = obj[<span class="number">1</span>],</span><br><span class="line">        core = &#123;&#125;,</span><br><span class="line">        toString = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj.length === <span class="number">2</span>) &#123; <span class="comment">//如果有两个参数</span></span><br><span class="line">            core[key] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (toString.call(key) === <span class="string">'[object String]'</span>) &#123;</span><br><span class="line">                key = key.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>); <span class="comment">//进行trim操作</span></span><br><span class="line">                <span class="keyword">var</span> arr = key.indexOf(<span class="string">","</span>) !== -<span class="number">1</span> ? key.split(<span class="string">","</span>) : key.split(<span class="regexp">/\s+/g</span>);</span><br><span class="line">                <span class="keyword">while</span> ((value = arr[i++])) core[value] = arr[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (toString.call(key) === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = key.length; i &lt; n; i++) core[i] = key[i]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                core = key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.empty();</span><br><span class="line">        <span class="keyword">if</span> (core) <span class="keyword">this</span>.update(core);</span><br><span class="line">    &#125;,</span><br><span class="line">    empty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._hash = &#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//用于初始化hash</span></span><br><span class="line">    <span class="comment">//把普通对象的键值利用put方法传入_hash中,不考虑其prototype的成员</span></span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) <span class="keyword">if</span> (obj.hasOwnProperty(prop)) <span class="keyword">this</span>.put(prop, obj[prop]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    contains: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.get(key) !== <span class="keyword">void</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    put: <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.contains(key)) &#123; <span class="comment">//如果没包含则</span></span><br><span class="line">            <span class="keyword">this</span>.length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._hash[key] = value;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//取得相应的值</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._hash[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//移除一个键值对</span></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>._hash[key];</span><br><span class="line">        <span class="keyword">this</span>.length--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//移除指定的键值对，并返回对应的值</span></span><br><span class="line">    pop: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = <span class="keyword">this</span>.get(key);</span><br><span class="line">        <span class="keyword">this</span>.remove(key);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//取得所有的键，以数组形式返回</span></span><br><span class="line">    keys: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> keys = [],</span><br><span class="line">        obj = <span class="keyword">this</span>._hash;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) <span class="keyword">if</span> (obj.hasOwnProperty(prop)) keys.push(prop);</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//取得所有的值，以数组形式返回</span></span><br><span class="line">    values: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> values = [],</span><br><span class="line">        obj = <span class="keyword">this</span>._hash;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) <span class="keyword">if</span> (obj.hasOwnProperty(prop)) values.push(obj[prop]);</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//取得所有的键值对，以数组形式返回</span></span><br><span class="line">    items: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> items = [],</span><br><span class="line">        obj = <span class="keyword">this</span>._hash;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) <span class="keyword">if</span> (obj.hasOwnProperty(prop)) items.push([prop, obj[prop]]);</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//变成普通对象</span></span><br><span class="line">    toObject: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._hash;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//仅当此键不存在时才添加，</span></span><br><span class="line">    ensure: <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = <span class="keyword">this</span>.get(key);</span><br><span class="line">        <span class="keyword">if</span> (results === <span class="keyword">void</span>(<span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">this</span>.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;,</span><br><span class="line">    forEach: <span class="function"><span class="keyword">function</span>(<span class="params">fn, bind</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pairs = <span class="keyword">this</span>.items();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = pairs.length; i &lt; n; i++) &#123;</span><br><span class="line">            fn.call(bind, pairs[i][<span class="number">1</span>], pairs[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    map: <span class="function"><span class="keyword">function</span>(<span class="params">fn, bind</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = hash(&#123;&#125;);</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">            results.put(key, fn.call(bind, value, key));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;,</span><br><span class="line">    filter: <span class="function"><span class="keyword">function</span>(<span class="params">fn, bind</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> results = hash(&#123;&#125;);</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fn.call(bind, value, key)) results.put(key, value);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;,</span><br><span class="line">    index: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="comment">//与get方法相反，取得其key</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">this</span>._hash;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) <span class="keyword">if</span> (obj.hasOwnProperty(prop) &amp;&amp; obj[prop] === val) <span class="keyword">return</span> prop;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pairs = <span class="keyword">this</span>.items(),</span><br><span class="line">        results = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = pairs.length; i &lt; n; i++) &#123;</span><br><span class="line">            results[i] = pairs[i][<span class="number">0</span>] + <span class="string">":"</span> + pairs[i][<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123; "</span> + results.join(<span class="string">", "</span>) + <span class="string">" &#125;"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    each: <span class="keyword">this</span>.forEach</span><br><span class="line">&#125;;</span><br><span class="line">Hash.fn.init.prototype = Hash.fn;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>引用：<a href="http://blog.csdn.net/cheng5128/article/details/5072385" target="_blank" rel="external">http://blog.csdn.net/cheng5128/article]]>
    </summary>
    
      <category term="js" scheme="http://liuxing.info/tags/js/"/>
    
      <category term="前端" scheme="http://liuxing.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用pinyin4j将中文转换为拼音]]></title>
    <link href="http://liuxing.info/2012/08/16/%E4%BD%BF%E7%94%A8pinyin4j%E5%B0%86%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%8B%BC%E9%9F%B3/"/>
    <id>http://liuxing.info/2012/08/16/使用pinyin4j将中文转换为拼音/</id>
    <published>2012-08-15T16:20:00.000Z</published>
    <updated>2015-06-16T13:20:04.000Z</updated>
    <content type="html"><![CDATA[<p>直接代码</p>
<h2 id="实现一">实现一</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.PinyinHelper;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinToneType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 将中文转换为拼音</span><br><span class="line">	 * <span class="doctag">@param</span> name</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEname</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		HanyuPinyinOutputFormat pyFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">		pyFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">		pyFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">		pyFormat.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> PinyinHelper.toHanyuPinyinString(name, pyFormat, <span class="string">""</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 取字符拼音的第一个字母</span><br><span class="line">	 * <span class="doctag">@param</span> name</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFirstEName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(DyString.isEmpty(name))</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		</span><br><span class="line">		String spell = <span class="string">""</span>;</span><br><span class="line">		String _name = name.replaceAll(<span class="string">"[　― …《》\\.,，。;`；\\!！\\?？‘’＜＞\"“”、■#★●【】\\&#123;\\&#125;\\[\\]（）+｛｝［］\\(\\)\\|\\-:：~～!@#$%^&amp;*\\(\\)/\\,\\.￥——]"</span>, <span class="string">""</span>).trim();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">char</span>[] strs = _name.toCharArray();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">			String upCaseText = getEname(<span class="string">""</span> + strs[i]);</span><br><span class="line">			spell += upCaseText.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> spell;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(getEname(<span class="string">"长沙阁酒店公寓（瑞苑）"</span>));</span><br><span class="line">		System.out.println(getFirstEName(<span class="string">"长沙阁酒店公寓（瑞苑）"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现二">实现二</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.PinyinHelper;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinToneType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 汉字转换拼音工具类</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@Author</span> liuxing</span><br><span class="line"> * <span class="doctag">@Date</span> 2013-03-14</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PinYin4JCn</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> HanyuPinyinOutputFormat spellFormat = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String reg = <span class="string">"[　― …《》\\.,，。;`；\\!！\\?？‘’＜＞\"“”、■#★●【】\\&#123;\\&#125;\\[\\]（）+｛｝［］\\(\\)\\|\\-:：~～!@#$%^&amp;*\\(\\)/\\,\\.￥——]"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 将中文转换为拼音</span><br><span class="line">	 * 不区分多音字</span><br><span class="line">	 * <span class="doctag">@param</span> name</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">converterNoSpaceSpell</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(spellFormat == <span class="keyword">null</span>)&#123;</span><br><span class="line">			spellFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">			spellFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">			spellFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">			spellFormat.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> PinyinHelper.toHanyuPinyinString(name, spellFormat, <span class="string">""</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 将中文转换为全拼（带空格）</span><br><span class="line">	 * 不区分多音字</span><br><span class="line">	 * <span class="doctag">@param</span> name</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">converterSpell</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(spellFormat == <span class="keyword">null</span>)&#123;</span><br><span class="line">			spellFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">			spellFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">			spellFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">			spellFormat.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> PinyinHelper.toHanyuPinyinString(name, spellFormat, <span class="string">" "</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 取字符拼音的第一个字母</span><br><span class="line">	 * 不区分多音字</span><br><span class="line">	 * <span class="doctag">@param</span> name</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">converterToFirstSpell</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(Strings.isEmpty(name))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		String spell = <span class="string">""</span>;</span><br><span class="line">		String _name = name.replaceAll(reg, <span class="string">""</span>).trim();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">char</span>[] strs = _name.toCharArray();</span><br><span class="line">		String upCaseText = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">			upCaseText = converterNoSpaceSpell(<span class="string">""</span> + strs[i]);</span><br><span class="line">			spell += upCaseText.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> spell;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 汉字转换位汉语拼音首字母，英文字符不变，</span><br><span class="line">	 * 特殊字符丢失 支持多音字，生成方式如（重当参:cdc,zds,cds,zdc）</span><br><span class="line">	 * <span class="doctag">@param</span> chines</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">converterToFirstSpellWithPolyphone</span><span class="params">(String chines)</span> </span>&#123;</span><br><span class="line">		StringBuffer pinyinName = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">char</span>[] nameChar = chines.toCharArray();</span><br><span class="line">		HanyuPinyinOutputFormat defaultFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">		defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">		defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nameChar.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nameChar[i] &gt; <span class="number">128</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// 取得当前汉字的所有全拼</span></span><br><span class="line">					String[] strs = PinyinHelper.toHanyuPinyinStringArray(nameChar[i], defaultFormat);</span><br><span class="line">					<span class="keyword">if</span> (strs != <span class="keyword">null</span>) &#123;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs.length; j++) &#123;</span><br><span class="line">							<span class="comment">// 取首字母</span></span><br><span class="line">							pinyinName.append(strs[j].charAt(<span class="number">0</span>));</span><br><span class="line">							<span class="keyword">if</span> (j != strs.length - <span class="number">1</span>) &#123;</span><br><span class="line">								pinyinName.append(<span class="string">","</span>);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line"><span class="comment">//					else &#123;</span></span><br><span class="line"><span class="comment">//						pinyinName.append(nameChar[i]);</span></span><br><span class="line"><span class="comment">//					&#125;</span></span><br><span class="line">				&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				pinyinName.append(nameChar[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			pinyinName.append(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> parseTheChineseByObject(discountTheChinese(pinyinName.toString()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 汉字转换位汉语全拼，英文字符不变，特殊字符丢失</span><br><span class="line">	 * 支持多音字，生成方式如（重当参:zhongdangcen,zhongdangcan,chongdangcen,chongdangshen,zhongdangshen,chongdangcan）</span><br><span class="line">	 * <span class="doctag">@param</span> chines</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">converterToSpellWithPolyphone</span><span class="params">(String chines)</span> </span>&#123;</span><br><span class="line">		StringBuffer pinyinName = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">char</span>[] nameChar = chines.toCharArray();</span><br><span class="line">		HanyuPinyinOutputFormat defaultFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">		defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">		defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nameChar.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nameChar[i] &gt; <span class="number">128</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// 取得当前汉字的所有全拼</span></span><br><span class="line">					String[] strs = PinyinHelper.toHanyuPinyinStringArray(</span><br><span class="line">							nameChar[i], defaultFormat);</span><br><span class="line">					<span class="keyword">if</span> (strs != <span class="keyword">null</span>) &#123;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs.length; j++) &#123;</span><br><span class="line">							pinyinName.append(strs[j]);</span><br><span class="line">							<span class="keyword">if</span> (j != strs.length - <span class="number">1</span>) &#123;</span><br><span class="line">								pinyinName.append(<span class="string">","</span>);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				pinyinName.append(nameChar[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			pinyinName.append(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> parseTheChineseByObject(discountTheChinese(pinyinName.toString()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * 功能说明：获取所有的优化结果集</span><br><span class="line">	 * 刘兴  2013-8-7 下午5:19:24</span><br><span class="line">	 * 修改者名字：</span><br><span class="line">	 * 修改日期：</span><br><span class="line">	 * 修改内容：</span><br><span class="line">	 * <span class="doctag">@param</span> str</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">converterToAllSpellWithPolyphone</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">		String firstSpell = converterToFirstSpellWithPolyphone(str);</span><br><span class="line">		String spell = converterToSpellWithPolyphone(str);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(Strings.isNotEmpty(firstSpell))&#123;</span><br><span class="line">			firstSpell = firstSpell + <span class="string">","</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> firstSpell + spell;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 去除多音字重复数据</span><br><span class="line">	 * <span class="doctag">@param</span> theStr</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Integer&gt;&gt; discountTheChinese(String theStr) &#123;</span><br><span class="line">		<span class="comment">// 去除重复拼音后的拼音列表</span></span><br><span class="line">		List&lt;Map&lt;String, Integer&gt;&gt; mapList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Integer&gt;&gt;();</span><br><span class="line">		<span class="comment">// 用于处理每个字的多音字，去掉重复</span></span><br><span class="line">		Map&lt;String, Integer&gt; onlyOne = <span class="keyword">null</span>;</span><br><span class="line">		String[] firsts = theStr.split(<span class="string">" "</span>);</span><br><span class="line">		<span class="comment">// 读出每个汉字的拼音</span></span><br><span class="line">		<span class="keyword">for</span> (String str : firsts) &#123;</span><br><span class="line">			onlyOne = <span class="keyword">new</span> Hashtable&lt;String, Integer&gt;();</span><br><span class="line">			String[] china = str.split(<span class="string">","</span>);</span><br><span class="line">			<span class="comment">// 多音字处理</span></span><br><span class="line">			<span class="keyword">for</span> (String s : china) &#123;</span><br><span class="line">				Integer count = onlyOne.get(s);</span><br><span class="line">				<span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">					onlyOne.put(s, <span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					onlyOne.remove(s);</span><br><span class="line">					count++;</span><br><span class="line">					onlyOne.put(s, count);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			mapList.add(onlyOne);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mapList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 解析并组合拼音，对象合并方案</span><br><span class="line">	 * <span class="doctag">@param</span> list</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">parseTheChineseByObject</span><span class="params">(List&lt;Map&lt;String, Integer&gt;&gt; list)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Integer&gt; first = <span class="keyword">null</span>; <span class="comment">// 用于统计每一次,集合组合数据</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">			<span class="comment">// 每一组集合与上一次组合的Map</span></span><br><span class="line">			Map&lt;String, Integer&gt; temp = <span class="keyword">new</span> Hashtable&lt;String, Integer&gt;();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 第一次循环，first为空</span></span><br><span class="line">			<span class="keyword">if</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 取出上次组合与此次集合的字符，并保存</span></span><br><span class="line">				<span class="keyword">for</span> (String s : first.keySet()) &#123;</span><br><span class="line">					<span class="keyword">for</span> (String s1 : list.get(i).keySet()) &#123;</span><br><span class="line">						temp.put(s + s1, <span class="number">1</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">// 清理上一次组合数据</span></span><br><span class="line">				<span class="keyword">if</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					first.clear();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (String s : list.get(i).keySet()) &#123;</span><br><span class="line">					temp.put(s, <span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 保存组合数据以便下次循环使用</span></span><br><span class="line">			<span class="keyword">if</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				first = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (first == <span class="keyword">null</span>) </span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		</span><br><span class="line">		String reltStr = <span class="string">""</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (String str : first.keySet()) &#123;</span><br><span class="line">			reltStr += (<span class="string">","</span> + str);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (Strings.isNotEmpty(reltStr)) &#123;</span><br><span class="line">			<span class="keyword">return</span> reltStr.replaceFirst(<span class="string">","</span>, <span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> reltStr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String str = <span class="string">"单田芳"</span>;</span><br><span class="line"><span class="comment">//		System.out.println(converterToFirstSpellWithPolyphone(str));</span></span><br><span class="line"><span class="comment">//		System.out.println(converterToSpellWithPolyphone(str));</span></span><br><span class="line"><span class="comment">//		System.out.println(converterSpell(str));</span></span><br><span class="line">		System.out.println(converterToFirstSpellWithPolyphone(str));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>直接代码</p>
<h2 id="实现一">实现一</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">im]]>
    </summary>
    
      <category term="pinyin4j" scheme="http://liuxing.info/tags/pinyin4j/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谷歌地图坐标转换百度地图坐标 ]]></title>
    <link href="http://liuxing.info/2012/08/16/%E8%B0%B7%E6%AD%8C%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%20/"/>
    <id>http://liuxing.info/2012/08/16/谷歌地图坐标转换百度地图坐标 /</id>
    <published>2012-08-15T16:16:00.000Z</published>
    <updated>2015-06-16T13:20:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="功能代码">功能代码</h2><p>httpclient方式请求百度的转换地址<br><a href="http://api.map.baidu.com/ag/coord/convert?from=2&amp;to=4&amp;x=&amp;y=" target="_blank" rel="external">http://api.map.baidu.com/ag/coord/convert?from=2&amp;to=4&amp;x=&amp;y=</a><br>拿到的是转换后的json数据，但是坐标值是base64加密过的字符，需要解密一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.GetMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaiduMapUtils</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String googleToBaiduUrl = <span class="string">"http://api.map.baidu.com/ag/coord/convert?from=2&amp;to=4&amp;x=#x#&amp;y=#y#"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpClientForGet</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">		HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">		GetMethod getMethod = <span class="keyword">new</span> GetMethod(url);</span><br><span class="line">		getMethod.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>); </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			client.executeMethod(getMethod);</span><br><span class="line">			<span class="keyword">if</span> (getMethod.getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">				<span class="keyword">return</span> getMethod.getResponseBodyAsString();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (HttpException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			getMethod.releaseConnection();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 转换谷歌为百度坐标</span><br><span class="line">	 * <span class="doctag">@param</span> x 经度</span><br><span class="line">	 * <span class="doctag">@param</span> y	纬度</span><br><span class="line">	 * <span class="doctag">@return</span> 获取转换过的百度坐标</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; googleToBaidu(Double x, Double y)&#123;</span><br><span class="line">		Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">		</span><br><span class="line">		String relt = httpClientForGet(getGoogleToBaiduUrl(String.valueOf(x), String.valueOf(y)));</span><br><span class="line">		<span class="keyword">if</span>(DyString.isNotEmpty(relt))</span><br><span class="line">			map = JsonUtils.parserToMap(relt);</span><br><span class="line">		</span><br><span class="line">		map.put(<span class="string">"x"</span>, Base64Utils.decode(map.get(<span class="string">"x"</span>)));</span><br><span class="line">		map.put(<span class="string">"y"</span>, Base64Utils.decode(map.get(<span class="string">"y"</span>)));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 获取请求地址</span><br><span class="line">	 * </span><br><span class="line">	 * <span class="doctag">@param</span> x</span><br><span class="line">	 * <span class="doctag">@param</span> y</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getGoogleToBaiduUrl</span><span class="params">(String x, String y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> googleToBaiduUrl.replace(<span class="string">"#x#"</span>, x).replace(<span class="string">"#y#"</span>, y);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * URL中文字符编码</span><br><span class="line">	 * <span class="doctag">@param</span> url</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> URLEncoder.encode(s);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(googleToBaidu(<span class="number">31.2306192233586</span>, <span class="number">121.446663737297</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Base64Utils">Base64Utils</h2><p>使用apache的commons包下面的base64工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * base64加密解密工具 使用apache工具包</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> 刘兴</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * base64加密字符串</span><br><span class="line">	 * </span><br><span class="line">	 * <span class="doctag">@param</span> s</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(Object s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		Base64 base64 = <span class="keyword">new</span> Base64();</span><br><span class="line">		<span class="keyword">byte</span>[] enbytes = base64.encode(String.valueOf(s).getBytes());</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> String(enbytes);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * base64解密字符串</span><br><span class="line">	 * </span><br><span class="line">	 * <span class="doctag">@param</span> s</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(Object s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		Base64 base64 = <span class="keyword">new</span> Base64();</span><br><span class="line">		<span class="keyword">byte</span>[] debytes = base64.decode(String.valueOf(s).getBytes());</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> String(debytes);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</span><br><span class="line">		System.out.println(Base64Utils.decode(<span class="string">"MTE2LjI2MTA5OTEyMjE="</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DyString类是一个自定义的字符串处理工具类，可以调用apache的工具类StringUtils.isEmpty或isNotEmpty<br>JsonUtils类是自定义的json字符串处理工具类，内部功能是将json字符串转换成map对象</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="功能代码">功能代码</h2><p>httpclient方式请求百度的转换地址<br><a href="http://api.map.baidu.com/ag/coord/convert?from=2&amp;to=4&amp;x=&amp;y=" target=]]>
    </summary>
    
      <category term="地图" scheme="http://liuxing.info/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[引入公共头部时，控制引入js、css、title]]></title>
    <link href="http://liuxing.info/2012/08/16/%E5%BC%95%E5%85%A5%E5%85%AC%E5%85%B1%E5%A4%B4%E9%83%A8%E6%97%B6%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%BC%95%E5%85%A5js%E3%80%81css%E3%80%81title/"/>
    <id>http://liuxing.info/2012/08/16/引入公共头部时，控制引入js、css、title/</id>
    <published>2012-08-15T16:10:00.000Z</published>
    <updated>2015-06-16T13:20:16.000Z</updated>
    <content type="html"><![CDATA[<p>引入公共头部时，控制引入js、css、title，避免重复造轮子，能少敲点代码就少敲点</p>
<p>1.头部或底部文件中引入jstl的标签库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">taglib</span> <span class="attribute">prefix</span>=<span class="value">"c"</span> <span class="attribute">uri</span>=<span class="value">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">taglib</span> <span class="attribute">prefix</span>=<span class="value">"fn"</span> <span class="attribute">uri</span>=<span class="value">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.这一部分放入公共的头或底部文件中，放置在待引入css和js的位置，两种方式具体应用中有细微差别</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.可以分开引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123; not empty param.css&#125;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"css"</span> <span class="attribute">items</span>=<span class="value">"$&#123;fn:split(param.css, ',')&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123;not empty css&#125;"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">link</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/static/css/$&#123;css&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123; not empty param.js || not empty param.ajs&#125;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"js"</span> <span class="attribute">items</span>=<span class="value">"$&#123;fn:split(param.js, ',')&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123;not empty js&#125;"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/static/js/$&#123;js &#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"js"</span> <span class="attribute">items</span>=<span class="value">"$&#123;fn:split(param.ajs, ',')&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123;not empty js&#125;"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"$&#123;js &#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.或者可以一起引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123;not empty param.css || not empty param.js || not empty param.ajs&#125;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"css"</span> <span class="attribute">items</span>=<span class="value">"$&#123;fn:split(param.css, ',')&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123;not empty css&#125;"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">link</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/static/css/$&#123;css&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"js"</span> <span class="attribute">items</span>=<span class="value">"$&#123;fn:split(param.js, ',')&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123;not empty js&#125;"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/static/js/$&#123;js &#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"js"</span> <span class="attribute">items</span>=<span class="value">"$&#123;fn:split(param.ajs, ',')&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"$&#123;not empty js&#125;"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"$&#123;js &#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.这一部分放置在引入公共头部或底部的页面中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ajs表示引入外部的js，在实现中是直接src=ajs；js表示引入系统内部的js，在实现中是直接src="公共的路径"+ajs --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里还可以声明头部的title等其他的参数,参数是自定义的 在头部或底部文件里直接使用”$&#123;param.参数 &#125;“就可以拿到 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">jsp:include</span> <span class="attribute">page</span>=<span class="value">"../common/header.jsp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">jsp:param</span> <span class="attribute">name</span>=<span class="value">"css"</span> <span class="attribute">value</span>=<span class="value">"test.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">jsp:param</span> <span class="attribute">name</span>=<span class="value">"js"</span> <span class="attribute">value</span>=<span class="value">"test.js,test2.js"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">jsp:param</span> <span class="attribute">name</span>=<span class="value">"ajs"</span> <span class="attribute">value</span>=<span class="value">"http://test.js, http://test2.js"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">jsp:include</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css也可以使用类似js的方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>引入公共头部时，控制引入js、css、title，避免重复造轮子，能少敲点代码就少敲点</p>
<p>1.头部或底部文件中引入jstl的标签库</p>
<figure class="highlight xml"><table><tr><td class="code"><pr]]>
    </summary>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
</feed>