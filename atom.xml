<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[liuxing's blog]]></title>
  <subtitle><![CDATA[青春须早为,岂能长少年！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://liuxing.info//"/>
  <updated>2015-06-30T12:15:16.000Z</updated>
  <id>http://liuxing.info//</id>
  
  <author>
    <name><![CDATA[liuxing]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Spring Cache使用]]></title>
    <link href="http://liuxing.info/2015/06/18/Spring%20Cache%E4%BD%BF%E7%94%A8/"/>
    <id>http://liuxing.info/2015/06/18/Spring Cache使用/</id>
    <published>2015-06-17T16:27:00.000Z</published>
    <updated>2015-06-30T12:15:16.000Z</updated>
    <content type="html"><![CDATA[<p><em>记录下自己项目在用的Spring Cache的使用方式。</em><br><em>Spring的抽象已经做得够好了，适合于大多数场景，非常复杂的就需要自己AOP实现了。</em><br><em>Spring官网的文档挺不错的，但是对Cache这块的介绍不是很详细，结合网上大牛的博文，汇总下文。</em></p>
<h2 id="缓存概念">缓存概念</h2><blockquote><h3 id="缓存简介">缓存简介</h3><p>缓存，我的理解是：让数据更接近于使用者；工作机制是：先从缓存中读取数据，如果没有再从慢速设备上读取实际数据（数据也会存入缓存）；缓存什么：那些经常读取且不经常修改的数据/那些昂贵（CPU/IO）的且对于相同的请求有相同的计算结果的数据。如CPU—L1/L2—内存—磁盘就是一个典型的例子，CPU需要数据时先从L1/L2中读取，如果没有到内存中找，如果还没有会到磁盘上找。还有如用过Maven的朋友都应该知道，我们找依赖的时候，先从本机仓库找，再从本地服务器仓库找，最后到远程仓库服务器找；还有如京东的物流为什么那么快？他们在各个地都有分仓库，如果该仓库有货物那么送货的速度是非常快的。</p>
<h3 id="缓存命中率">缓存命中率</h3><p>即从缓存中读取数据的次数 与 总读取次数的比率，命中率越高越好：<br>命中率 = 从缓存中读取次数 / (总读取次数[从缓存中读取次数 + 从慢速设备上读取的次数])<br>Miss率 = 没有从缓存中读取的次数 / (总读取次数[从缓存中读取次数 + 从慢速设备上读取的次数])</p>
<p>这是一个非常重要的监控指标，如果做缓存一定要健康这个指标来看缓存是否工作良好；</p>
<h3 id="缓存策略">缓存策略</h3><h4 id="Eviction_policy">Eviction policy</h4><p>移除策略，即如果缓存满了，从缓存中移除数据的策略；常见的有LFU、LRU、FIFO：</p>
<ul>
<li>FIFO（First In First Out）：先进先出算法，即先放入缓存的先被移除；</li>
<li>LRU（Least Recently Used）：最久未使用算法，使用时间距离现在最久的那个被移除；</li>
<li>LFU（Least Frequently Used）：最近最少使用算法，一定时间段内使用次数（频率）最少的那个被移除；</li>
</ul>
<h4 id="TTL（Time_To_Live_）">TTL（Time To Live ）</h4><p>存活期，即从缓存中创建时间点开始直到它到期的一个时间段（不管在这个时间段内有没有访问都将过期）</p>
<h4 id="TTI（Time_To_Idle）">TTI（Time To Idle）</h4><p>空闲期，即一个数据多久没被访问将从缓存中移除的时间。</p>
<p>到此，基本了解了缓存的知识，在Java中，我们一般对调用方法进行缓存控制，比如我调用”findUserById(Long id)”，那么我应该在调用这个方法之前先从缓存中查找有没有，如果没有再掉该方法如从数据库加载用户，然后添加到缓存中，下次调用时将会从缓存中获取到数据。</p>
<p>自Spring 3.1起，提供了类似于@Transactional注解事务的注解Cache支持，且提供了Cache抽象；在此之前一般通过AOP实现；使用Spring Cache的好处：</p>
<ul>
<li>提供基本的Cache抽象，方便切换各种底层Cache；</li>
<li>通过注解Cache可以实现类似于事务一样，缓存逻辑透明的应用到我们的业务代码上，且只需要更少的代码就可以完成；</li>
<li>提供事务回滚时也自动回滚缓存；</li>
<li>支持比较复杂的缓存逻辑；</li>
</ul>
<p>对于Spring Cache抽象，主要从以下几个方面学习：</p>
<ul>
<li>Cache API及默认提供的实现</li>
<li>Cache注解</li>
<li>实现复杂的Cache逻辑</li>
</ul>
<footer><strong>缓存简介</strong><cite><a href="http://jinnianshilongnian.iteye.com/blog/2001040" target="_blank" rel="external">开涛的博客</a></cite></footer></blockquote>
<h2 id="Spring_Cache简介">Spring Cache简介</h2><blockquote><p>Spring3.1开始引入了激动人心的基于注释（annotation）的缓存（cache）技术，它本质上不是一个具体的缓存实现方案（例如EHCache 或者 OSCache），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种 annotation，即能够达到缓存方法的返回对象的效果。</p>
<p>Spring的缓存技术还具备相当的灵活性，不仅能够使用 SpEL（Spring Expression Language）来定义缓存的key和各种condition，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存例如EHCache、memcached集成。</p>
<p>其特点总结如下：</p>
<ul>
<li>通过少量的配置 annotation 注释即可使得既有代码支持缓存</li>
<li>支持开箱即用 Out-Of-The-Box，即不用安装和部署额外第三方组件即可使用缓存</li>
<li>支持 Spring Express Language，能使用对象的任何属性或者方法来定义缓存的 key 和 condition</li>
<li>支持 AspectJ，并通过其实现任何方法的缓存支持</li>
<li>支持自定义 key 和自定义缓存管理者，具有相当的灵活性和扩展性</li>
</ul>
<footer><strong>Spring Cache 介绍</strong><cite><a href="http://www.cnblogs.com/rollenholt/p/4202631.html" target="_blank" rel="external">Spring Cache 介绍 - Rollen Holt - 博客园</a></cite></footer></blockquote>
<h2 id="API介绍">API介绍</h2><h3 id="Cache接口">Cache接口</h3><p><code>理解这个接口有助于我们实现自己的缓存管理器</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 缓存的名字</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 得到底层使用的缓存</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">Object <span class="title">getNativeCache</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 根据key得到一个ValueWrapper，然后调用其get方法获取值 </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">ValueWrapper <span class="title">get</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 根据key，和value的类型直接获取value  </span><br><span class="line">	 */</span></span><br><span class="line">	&lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Object key, Class&lt;T&gt; type)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 存数据</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Object key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 如果值不存在，则添加，用来替代如下代码</span><br><span class="line">	 * Object existingValue = cache.get(key);</span><br><span class="line">	 * if (existingValue == null) &#123;</span><br><span class="line">	 *     cache.put(key, value);</span><br><span class="line">	 *     return null;</span><br><span class="line">	 * &#125; else &#123;</span><br><span class="line">	 *     return existingValue;</span><br><span class="line">	 * &#125;</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">ValueWrapper <span class="title">putIfAbsent</span><span class="params">(Object key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 根据key删数据</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">evict</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 清空数据</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 缓存值的Wrapper  </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">interface</span> <span class="title">ValueWrapper</span> </span>&#123;</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 得到value</span><br><span class="line">		 */</span></span><br><span class="line">		<span class="function">Object <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="默认实现">默认实现</h4><p>默认已经实现了几个常用的cache<br>位于spring-context-x.RELEASE.jar和spring-context-support-x.RELEASE.jar的cache目录下</p>
<ul>
<li>ConcurrentMapCache：基于java.util.concurrent.ConcurrentHashMap</li>
<li>GuavaCache：基于Google的Guava工具</li>
<li>EhCacheCache：基于Ehcache</li>
<li>JCacheCache：基于javax.cache.Cache（不常用）</li>
</ul>
<h3 id="CacheManager">CacheManager</h3><p><code>用来管理多个cache</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 根据cache名获取cache</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">Cache <span class="title">getCache</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 得到所有cache的名字</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">Collection&lt;String&gt; <span class="title">getCacheNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="默认实现-1">默认实现</h4><p>对应Cache接口的默认实现</p>
<ul>
<li>ConcurrentMapCacheManager / ConcurrentMapCacheFactoryBean</li>
<li>GuavaCacheManager</li>
<li>EhCacheCacheManager / EhCacheManagerFactoryBean</li>
<li>JCacheCacheManager / JCacheManagerFactoryBean</li>
</ul>
<h3 id="CompositeCacheManager">CompositeCacheManager</h3><p>用于组合CacheManager，可以从多个CacheManager中轮询得到相应的Cache</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"cacheManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.cache.support.CompositeCacheManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"cacheManagers"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"concurrentMapCacheManager"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"guavaCacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 都找不到时，不返回null，而是返回NOP的Cache --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"fallbackToNoOpCache"</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="事务">事务</h3><p>除GuavaCacheManager外，其他Cache都支持Spring事务，如果注解方法出现事务回滚，对应缓存操作也会回滚</p>
<h3 id="缓存策略">缓存策略</h3><p>都是Cache自行维护，Spring只提供对外抽象API</p>
<h2 id="Cache注解">Cache注解</h2><p>每个注解都有多个参数，这里不一一列出，建议进入源码查看注释</p>
<h3 id="启用注解">启用注解</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">cache:annotation-driven</span> <span class="attribute">cache-manager</span>=<span class="value">"cacheManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="@CachePut">@CachePut</h3><p>写数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@CachePut</span>(value = <span class="string">"addPotentialNoticeCache"</span>, key = <span class="string">"targetClass + '.' + #userCode"</span>)</span><br><span class="line"><span class="keyword">public</span> List&lt;PublicAutoAddPotentialJob.AutoAddPotentialNotice&gt; put(<span class="keyword">int</span> userCode, List&lt;PublicAutoAddPotentialJob.AutoAddPotentialNotice&gt; noticeList) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"缓存（&#123;&#125;）的公客自动添加潜在客的通知"</span>, userCode);</span><br><span class="line">    <span class="keyword">return</span> noticeList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="@CacheEvict">@CacheEvict</h3><p>失效数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@CacheEvict</span>(value = <span class="string">"addPotentialNoticeCache"</span>, key = <span class="string">"targetClass + '.' + #userCode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> userCode)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"清除（&#123;&#125;）的公客自动添加潜在客的通知"</span>, userCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="@Cacheable">@Cacheable</h3><p>这个用的比较多<br>用在查询方法上，先从缓存中读取，如果没有再调用方法获取数据，然后把数据添加到缓存中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Cacheable</span>(value = <span class="string">"kyAreaCache"</span>, key=<span class="string">"targetClass + '.' + methodName + '.' + #areaId"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> KyArea <span class="title">findById</span><span class="params">(String areaId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 业务代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行流程">运行流程</h3><ol>
<li>首先执行@CacheEvict（如果beforeInvocation=true且condition 通过），如果allEntries=true，则清空所有</li>
<li>接着收集@Cacheable（如果condition 通过，且key对应的数据不在缓存），放入cachePutRequests（也就是说如果cachePutRequests为空，则数据在缓存中）</li>
<li>如果cachePutRequests为空且没有@CachePut操作，那么将查找@Cacheable的缓存，否则result=缓存数据（也就是说只要当没有cache put请求时才会查找缓存）</li>
<li>如果没有找到缓存，那么调用实际的API，把结果放入result</li>
<li>如果有@CachePut操作(如果condition 通过)，那么放入cachePutRequests</li>
<li>执行cachePutRequests，将数据写入缓存（unless为空或者unless解析结果为false）；</li>
<li>执行@CacheEvict（如果beforeInvocation=false 且 condition 通过），如果allEntries=true，则清空所有</li>
</ol>
<h3 id="SpEL上下文数据">SpEL上下文数据</h3><p>在使用时，#root.methodName 等同于 methodName</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">位置</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">methodName</td>
<td style="text-align:left">root对象</td>
<td style="text-align:left">当前被调用的方法名</td>
<td style="text-align:left">#root.methodName</td>
</tr>
<tr>
<td style="text-align:left">method</td>
<td style="text-align:left">root对象</td>
<td style="text-align:left">当前被调用的方法</td>
<td style="text-align:left">#root.method.name</td>
</tr>
<tr>
<td style="text-align:left">target</td>
<td style="text-align:left">root对象</td>
<td style="text-align:left">当前被调用的目标对象</td>
<td style="text-align:left">#root.target</td>
</tr>
<tr>
<td style="text-align:left">targetClass</td>
<td style="text-align:left">root对象</td>
<td style="text-align:left">当前被调用的目标对象类</td>
<td style="text-align:left">#root.targetClass</td>
</tr>
<tr>
<td style="text-align:left">args</td>
<td style="text-align:left">root对象</td>
<td style="text-align:left">当前被调用的方法的参数列表</td>
<td style="text-align:left">#root.args[0]</td>
</tr>
<tr>
<td style="text-align:left">caches</td>
<td style="text-align:left">root对象</td>
<td style="text-align:left">当前方法调用使用的缓存列表（如@Cacheable(value={“cache1”, “cache2”})），则有两个cache</td>
<td style="text-align:left">#root.caches[0].name</td>
</tr>
<tr>
<td style="text-align:left">argument name</td>
<td style="text-align:left">执行上下文</td>
<td style="text-align:left">当前被调用的方法的参数，如findById(Long id)，我们可以通过#id拿到参数</td>
<td style="text-align:left">#user.id</td>
</tr>
<tr>
<td style="text-align:left">result</td>
<td style="text-align:left">执行上下文</td>
<td style="text-align:left">方法执行后的返回值（仅当方法执行之后的判断有效，如‘unless’，’cache evict’的beforeInvocation=false）</td>
<td style="text-align:left">#result</td>
</tr>
</tbody>
</table>
<h3 id="条件缓存">条件缓存</h3><p>主要是在注解内用condition和unless的表达式分别对参数和返回结果进行筛选后缓存</p>
<h3 id="@Caching">@Caching</h3><p>多个缓存注解组合使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Caching</span>(</span><br><span class="line">        put = &#123;</span><br><span class="line">                <span class="annotation">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>),</span><br><span class="line">                <span class="annotation">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.username"</span>),</span><br><span class="line">                <span class="annotation">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.email"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义缓存注解">自定义缓存注解</h3><p>把一些特殊场景的注解包装到一个独立的注解中，比如@Caching组合使用的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Caching</span>(</span><br><span class="line">        put = &#123;</span><br><span class="line">                <span class="annotation">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>),</span><br><span class="line">                <span class="annotation">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.username"</span>),</span><br><span class="line">                <span class="annotation">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.email"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br><span class="line"><span class="annotation">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> UserSaveCache &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@UserSaveCache</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例">示例</h2><h3 id="基于ConcurrentMapCache">基于ConcurrentMapCache</h3><h4 id="自定义CacheManager">自定义CacheManager</h4><p>我需要使用有容量限制和缓存失效时间策略的Cache，默认的ConcurrentMapCacheManager没法满足<br>通过实现CacheManager接口定制出自己的CacheManager。<br>还是拷贝ConcurrentMapCacheManager，使用Guava的Cache做底层容器，因为Guava的Cache容器可以设置缓存策略</p>
<p><code>新增了exp、maximumSize两个策略变量</code><br><code>修改底层Cache容器的创建</code></p>
<p>下面只列出自定义的代码，其他的都是Spring的ConcurrentMapCacheManager的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.concurrent.ConcurrentMapCache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：自定义的ConcurrentMapCacheManager，新增超时时间和最大存储限制</span><br><span class="line"> * 作者：liuxing(2015-04-13 18:44)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentMapCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 过期时间，秒（自定义）</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> exp = <span class="number">1800</span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 最大存储数量 （自定义）</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maximumSize = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExp</span><span class="params">(<span class="keyword">long</span> exp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaximumSize</span><span class="params">(<span class="keyword">long</span> maximumSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maximumSize = maximumSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个缓存容器，这个方法改写为使用Guava的Cache</span><br><span class="line">     * <span class="doctag">@param</span> name</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cache <span class="title">createConcurrentMapCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcurrentMapCache(name, CacheBuilder.newBuilder().expireAfterWrite(<span class="keyword">this</span>.exp, TimeUnit.SECONDS)</span><br><span class="line">                                                                     .maximumSize(<span class="keyword">this</span>.maximumSize)</span><br><span class="line">                                                                     .build()</span><br><span class="line">                                                                     .asMap(), isAllowNullValues());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="初始化">初始化</h4><p>xml风格</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，指定一个默认的Manager，否则需要在注解使用时指定Manager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">cache:annotation-driven</span> <span class="attribute">cache-manager</span>=<span class="value">"memoryCacheManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 本地内存缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"memoryCacheManager"</span> <span class="attribute">class</span>=<span class="value">"com.dooioo.ky.cache.ConcurrentMapCacheManager"</span> <span class="attribute">p:maximumSize</span>=<span class="value">"2000"</span> <span class="attribute">p:exp</span>=<span class="value">"1800"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"cacheNames"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>kyMemoryCache<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用">使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Cacheable</span>(value = <span class="string">"kyMemoryCache"</span>, key=<span class="string">"targetClass + '.' + methodName"</span>)</span><br><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; queryMobiles()&#123;</span><br><span class="line">    <span class="comment">// 业务代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用Memcached">使用Memcached</h3><p>一般常用的缓存当属memcached了，这个就需要自己实现CacheManager和Cache<br>注意我实现的Cache里面有做一些定制化操作，比如对key的处理</p>
<h4 id="创建MemcachedCache">创建MemcachedCache</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dooioo.common.jstl.DyFunctions;</span><br><span class="line"><span class="keyword">import</span> com.dooioo.commons.Strings;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Joiner;</span><br><span class="line"><span class="keyword">import</span> net.rubyeye.xmemcached.MemcachedClient;</span><br><span class="line"><span class="keyword">import</span> net.rubyeye.xmemcached.exception.MemcachedException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.support.SimpleValueWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：自定义spring的cache的实现，参考cache包实现</span><br><span class="line"> * 作者：liuxing(2015-04-12 13:57)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemcachedCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MemcachedCache.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 缓存的别名</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * memcached客户端</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> MemcachedClient client;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 缓存过期时间，默认是1小时</span><br><span class="line">     * 自定义的属性</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> exp = <span class="number">3600</span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否对key进行base64加密</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> base64Key = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 前缀名</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getNativeCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueWrapper <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = <span class="keyword">this</span>.client.get(handleKey(objectToString(key)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (object != <span class="keyword">null</span> ? <span class="keyword">new</span> SimpleValueWrapper(object) : <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Object key, Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object object = <span class="keyword">this</span>.client.get(handleKey(objectToString(key)));</span><br><span class="line">            <span class="keyword">return</span> (T) object;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            this.evict(key);</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.client.set(handleKey(objectToString(key)), exp, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueWrapper <span class="title">putIfAbsent</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evict</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.client.delete(handleKey(objectToString(key)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.client.flushAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MemcachedClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClient</span><span class="params">(MemcachedClient client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExp</span><span class="params">(<span class="keyword">int</span> exp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBase64Key</span><span class="params">(<span class="keyword">boolean</span> base64Key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base64Key = base64Key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 处理key</span><br><span class="line">     * <span class="doctag">@param</span> key</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">handleKey</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (base64Key) &#123;</span><br><span class="line">            <span class="keyword">return</span> Joiner.on(EMPTY_SEPARATOR).skipNulls().join(<span class="keyword">this</span>.prefix, DyFunctions.base64Encode(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Joiner.on(EMPTY_SEPARATOR).skipNulls().join(<span class="keyword">this</span>.prefix, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 转换key，去掉空格</span><br><span class="line">     * <span class="doctag">@param</span> object</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">objectToString</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> Strings.replace((String) object, <span class="string">" "</span>, <span class="string">"_"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> object.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMPTY_SEPARATOR = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建MemcachedCacheManager">创建MemcachedCacheManager</h4><p>继承AbstractCacheManager</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.support.AbstractCacheManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：memcachedCacheManager</span><br><span class="line"> * 作者：liuxing(2015-04-12 15:13)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemcachedCacheManager</span> <span class="keyword">extends</span> <span class="title">AbstractCacheManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;Cache&gt; caches;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Collection&lt;? extends Cache&gt; loadCaches() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.caches;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCaches</span><span class="params">(Collection&lt;Cache&gt; caches)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.caches = caches;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getCache(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="初始化-1">初始化</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，指定一个默认的Manager，否则需要在注解使用时指定Manager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">cache:annotation-driven</span> <span class="attribute">cache-manager</span>=<span class="value">"cacheManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- memcached缓存管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"cacheManager"</span> <span class="attribute">class</span>=<span class="value">"com.dooioo.ky.cache.MemcachedCacheManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"caches"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"com.dooioo.ky.cache.MemcachedCache"</span> <span class="attribute">p:client-ref</span>=<span class="value">"ky.memcachedClient"</span> <span class="attribute">p:name</span>=<span class="value">"kyAreaCache"</span> <span class="attribute">p:exp</span>=<span class="value">"86400"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"com.dooioo.ky.cache.MemcachedCache"</span> <span class="attribute">p:client-ref</span>=<span class="value">"ky.memcachedClient"</span> <span class="attribute">p:name</span>=<span class="value">"kyOrganizationCache"</span> <span class="attribute">p:exp</span>=<span class="value">"3600"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用-1">使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Cacheable</span>(value = <span class="string">"kyAreaCache"</span>, key=<span class="string">"targetClass + '.' + methodName + '.' + #areaId"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> KyArea <span class="title">findById</span><span class="params">(String areaId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 业务代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更多">更多</h2><p>更多复杂的使用场景和注解语法请自行谷歌！</p>
<p><strong>参考</strong><br><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/html/cache.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/html/cache.html</a></p>
<p><a href="http://www.cnblogs.com/rollenholt/p/4202631.html" target="_blank" rel="external">http://www.cnblogs.com/rollenholt/p/4202631.html</a></p>
<p><a href="http://jinnianshilongnian.iteye.com/blog/2001040" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/2001040</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>记录下自己项目在用的Spring Cache的使用方式。</em><br><em>Spring的抽象已经做得够好了，适合于大多数场景，非常复杂的就需要自己AOP实现了。</em><br><em>Spring官网的文档挺不错的，但是对Cache这块的介绍不是很详细，结]]>
    </summary>
    
      <category term="Cache" scheme="http://liuxing.info/tags/Cache/"/>
    
      <category term="Spring" scheme="http://liuxing.info/tags/Spring/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux统计内存块]]></title>
    <link href="http://liuxing.info/2015/06/17/linux%E7%BB%9F%E8%AE%A1%E5%86%85%E5%AD%98%E5%9D%97/"/>
    <id>http://liuxing.info/2015/06/17/linux统计内存块/</id>
    <published>2015-06-16T17:02:00.000Z</published>
    <updated>2015-06-16T17:05:07.000Z</updated>
    <content type="html"><![CDATA[<p><em>纯粹备忘</em></p>
<h2 id="统计内存块">统计内存块</h2><p>pmap -x $pid | awk ‘{ if($3 &gt; 64000 &amp;&amp; $3 &lt; 65537) count++ } END { print count }’</p>
<h2 id="导出内存块明细">导出内存块明细</h2><p>pmap -x $pid &gt; pmap.log</p>
<h2 id="导出核心进程内存">导出核心进程内存</h2><p>sudo gdb -q —pid=4990</p>
<p>—pid后面跟着的是jvm的进程id<br>(gdb) generate-core-file </p>
<p>这里调用命令生成gcore的dump文件<br>(gdb) detach </p>
<p>detach是用来断开与jvm的连接的<br>(gdb) quit</p>
<p>指定内存块：<br>内存地址从pmap结果中查询<br> dump memory memory.bin 0x0007f5f38000000 0x0007f5f394af000</p>
<p>导出核心进程内存（正式库数据太大不建议）<br>gdb —pid $pid<br>gcore   [文件名]    #   产生core dump文件</p>
<p><a href="http://blog.chinaunix.net/uid-24020646-id-2419921.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-24020646-id-2419921.html</a></p>
<h2 id="核心进程内存转换为heap_dump">核心进程内存转换为heap dump</h2><p>$JAVA_HOME/bin/jmap -dump:format=b,file=heap.hprof $JAVA_HOME/bin/java core.63278<br>/usr/java/jdk1.8.0_40/bin/jmap -dump:format=b,file=heap.hprof /usr/java/jdk1.8.0_40/bin/java memory.bin<br>/usr/local/java/jdk1.8.0_20/bin/jmap -dump:format=b,file=heap.hprof /usr/local/java/jdk1.8.0_20/bin/java memory.bin<br><a href="http://itindex.net/detail/50907-jmap-gcore-dump" target="_blank" rel="external">http://itindex.net/detail/50907-jmap-gcore-dump</a></p>
<p><a href="http://www.ibm.com/developerworks/cn/java/j-memoryanalyzer/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/j-memoryanalyzer/</a></p>
<h2 id="导入本地使用MAT工具分析">导入本地使用MAT工具分析</h2><h2 id="使用libtcmalloc优化linux内存管理">使用libtcmalloc优化linux内存管理</h2><p>gperftools+libunwind</p>
<h2 id="查找文件">查找文件</h2><p>find / -name “libunwind*” </p>
<p>jhat -J-Xmx1024M heap.hprof </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>纯粹备忘</em></p>
<h2 id="统计内存块">统计内存块</h2><p>pmap -x $pid | awk ‘{ if($3 &gt; 64000 &amp;&amp; $3 &lt; 65537) count++ } END { print coun]]>
    </summary>
    
      <category term="Java" scheme="http://liuxing.info/tags/Java/"/>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tomcat的APR优化]]></title>
    <link href="http://liuxing.info/2015/06/17/Tomcat%E7%9A%84APR%E4%BC%98%E5%8C%96/"/>
    <id>http://liuxing.info/2015/06/17/Tomcat的APR优化/</id>
    <published>2015-06-16T16:53:00.000Z</published>
    <updated>2015-06-16T17:14:45.000Z</updated>
    <content type="html"><![CDATA[<p><em>什么是APR？</em></p>
<blockquote><p>Tomcat可以使用APR来提供超强的可伸缩性和性能，更好地集成本地服务器技术。</p>
<p>APR(Apache Portable Runtime)是一个高可移植库，它是Apache HTTP Server 2.x的核心。</p>
<p>APR有很多用途，包括访问高级IO功能(例如sendfile,epoll和OpenSSL)，OS级别功能(随机数生成，系统状态等等)，本地进程管理(共享内存，NT管道和UNIX sockets)。这些功能可以使Tomcat作为一个通常的前台WEB服务器，能更好地和其它本地web技术集成，总体上让Java更有效率作为一个高性能web服务器平台而不是简单作为后台容器。</p>
<p>在产品环境中，特别是直接使用Tomcat做WEB服务器的时候，应该使用Tomcat Native来提高其性能。</p>
<footer><strong>Apache Portable Runtime</strong><cite><a href="http://apr.apache.org/" target="_blank" rel="external">Welcome! - The Apache Portable Runtime Project</a></cite></footer></blockquote>
<h2 id="安装apr">安装apr</h2><p>yum install -y apr-devel openssl-devel gcc</p>
<p>查看安装目录<br>rpm -ql apr-devel<br>rpm -ql openssl-devel</p>
<p>apr目录：/usr/bin/apr-1-config</p>
<h2 id="安装native">安装native</h2><p>拷贝：tomcat/bin目录下的tomcat-native.tar.gz到某个位置<br>解压：tar zxvf tomcat-native.tar.gz</p>
<pre><code>cd  tomcat-<span class="reserved">native</span>-<span class="number">1.1</span>.32-src<span class="regexp">/jni/native/</span>
./configure --<span class="reserved">with</span>-apr=/usr/bin/apr-<span class="number">1</span>-config --<span class="reserved">with</span>-java-home=$JAVA_HOME 
.<span class="regexp">/configure --with-apr=/usr/local/apache2/</span> --<span class="reserved">with</span>-java-home=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home --<span class="reserved">with</span>-ssl=<span class="literal">yes</span>
</code></pre><p>可选：</p>
<pre><code>--<span class="reserved">with</span>-ssl=<span class="literal">yes</span>
make &amp; make install
</code></pre><h2 id="配置tomcat">配置tomcat</h2><pre><code>vim catalina.sh
export <span class="constant">LD_LIBRARY_PATH=</span><span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/usr/local/apr/lib</span>
</code></pre><p>将tomcat/config/service.xml 的protocol 改为</p>
<pre><code>org<span class="class">.apache</span><span class="class">.coyote</span><span class="class">.http11</span><span class="class">.Http11AprProtocol</span>
</code></pre><h2 id="重启查看日志">重启查看日志</h2><h2 id="参考">参考</h2><p><a href="http://www.cnblogs.com/kgdxpr/archive/2013/08/07/3243657.html" target="_blank" rel="external">http://www.cnblogs.com/kgdxpr/archive/2013/08/07/3243657.html</a></p>
<p><a href="http://blog.csdn.net/qingchn/article/details/7895851" target="_blank" rel="external">http://blog.csdn.net/qingchn/article/details/7895851</a></p>
<p><a href="http://tomcat.apache.org/native-doc/" target="_blank" rel="external">http://tomcat.apache.org/native-doc/</a></p>
<p><a href="http://neptune.iteye.com/blog/125101" target="_blank" rel="external">http://neptune.iteye.com/blog/125101</a></p>
<p><a href="http://www.cnblogs.com/chuncn/archive/2010/10/17/1853915.html" target="_blank" rel="external">http://www.cnblogs.com/chuncn/archive/2010/10/17/1853915.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>什么是APR？</em></p>
<blockquote><p>Tomcat可以使用APR来提供超强的可伸缩性和性能，更好地集成本地服务器技术。</p>
<p>APR(Apache Portable Runtime)是一个高可移植库，它是Apache HTTP Se]]>
    </summary>
    
      <category term="APR" scheme="http://liuxing.info/tags/APR/"/>
    
      <category term="tomcat" scheme="http://liuxing.info/tags/tomcat/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用google-perftools优化tomcat]]></title>
    <link href="http://liuxing.info/2015/06/17/%E4%BD%BF%E7%94%A8google-perftools%E4%BC%98%E5%8C%96tomcat/"/>
    <id>http://liuxing.info/2015/06/17/使用google-perftools优化tomcat/</id>
    <published>2015-06-16T16:41:00.000Z</published>
    <updated>2015-06-16T16:53:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>这个工具可让开发创建更强大的应用程序，特别是那些用C++模版开发的多线程应用程序，包括<a href="http://www.oschina.net/p/tcmalloc" target="_blank" rel="external">TCMalloc</a>, heap-checker, heap-profiler 和cpu-profiler。</p>
<footer><strong>开源中国社区</strong><cite><a href="http://www.oschina.net/p/perftools" target="_blank" rel="external">Google PerfTools首页、文档和下载</a></cite></footer></blockquote>
<h2 id="前置依赖">前置依赖</h2><p>避免后续安装错误</p>
<pre><code>yum install -y gcc<span class="keyword">*</span>
yum install zlib<span class="keyword">*</span> openssl<span class="keyword">*</span> -y   
</code></pre><h2 id="安装">安装</h2><p>切换到工作目录</p>
<pre><code><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src 或 ~/src
</code></pre><p>下载：</p>
<pre><code>wget <span class="symbol">http:</span>/<span class="regexp">/download.savannah.gnu.org/releases</span><span class="regexp">/libunwind/libunwind</span>-<span class="number">0</span>.<span class="number">99</span>-alpha.tar.gz
wget <span class="symbol">http:</span>/<span class="regexp">/googledrive.com/host</span><span class="regexp">/0B6NtGsLhIcf7MWxMMF9JdTN3UVk/gperftools</span>-<span class="number">2.4</span>.tar.gz
</code></pre><p>1.针对 64 位操作系统必须安装 libunwind 库</p>
<pre><code>tar zxvf libunwind-<span class="number">1.1</span>.tar.gz
<span class="built_in">cd</span> libunwind-<span class="number">1.1</span>/
CFLAGS=<span class="operator">-f</span>PIC ./configure --enable-shared --enable-frame-pointers
make CFLAGS=<span class="operator">-f</span>PIC
make CFLAGS=<span class="operator">-f</span>PIC install
<span class="built_in">cd</span> ../
</code></pre><p>查找：</p>
<pre><code><span class="keyword">find</span> <span class="regexp">/usr/</span> -name “libunwind*”
</code></pre><p>卸载：</p>
<pre><code>make CFLAGS=<span class="operator">-f</span>PIC uninstall
</code></pre><p>2.安装 google-perftools 优化</p>
<pre><code>tar zxvf gperftools-<span class="number">2.0</span><span class="class">.tar</span><span class="class">.gz</span>
cd gperftools-<span class="number">2.0</span>/
./configure --enable-shared --enable-frame-pointers
make &amp;&amp; make install
echo <span class="string">"/usr/local/lib"</span> &gt; /etc/ld<span class="class">.so</span><span class="class">.conf</span><span class="class">.d</span>/usr_local_lib<span class="class">.conf</span>
/sbin/ldconfig
</code></pre><p><code>有依赖没有安装?</code></p>
<pre><code>./configure --<span class="literal">enable</span>-<span class="literal">shared</span> --<span class="literal">enable</span>-frame-pointers  
</code></pre><p><code>make check 依然报错？</code></p>
<p><a href="http://xkorey.iteye.com/blog/1648567" target="_blank" rel="external">http://xkorey.iteye.com/blog/1648567</a></p>
<p><code>./libtool: line 1125: g++: command not found</code></p>
<pre><code>yum <span class="keyword">install</span> -y gcc* 
</code></pre><p>tomcat启动程序配置</p>
<pre><code><span class="built_in">export</span> LD_PRELOAD=/usr/<span class="built_in">local</span>/lib/libtcmalloc.so
</code></pre><p>查看是否生效</p>
<pre><code>/usr/sbin/lsof -n <span class="string">| grep tcmalloc</span>
</code></pre><h2 id="参考">参考</h2><h3 id="示例">示例</h3><p><a href="https://www.centos.bz/2012/01/google-perftools-speed-up-mysql-tcmalloc/" target="_blank" rel="external">https://www.centos.bz/2012/01/google-perftools-speed-up-mysql-tcmalloc/</a><br><a href="http://blog.sina.com.cn/s/blog_8d05143b01012b87.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_8d05143b01012b87.html</a><br><a href="http://xkorey.iteye.com/blog/1648567" target="_blank" rel="external">http://xkorey.iteye.com/blog/1648567</a><br><a href="http://shopwwi.com/thread-673-1-1.html" target="_blank" rel="external">http://shopwwi.com/thread-673-1-1.html</a><br><a href="http://blog.csdn.net/wind19/article/details/10381291" target="_blank" rel="external">http://blog.csdn.net/wind19/article/details/10381291</a></p>
<p><a href="http://blog.chinaunix.net/uid-20687780-id-3029851.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-20687780-id-3029851.html</a><br><a href="http://blog.hackroad.com/operations-engineer/linux_server/1285.html" target="_blank" rel="external">http://blog.hackroad.com/operations-engineer/linux_server/1285.html</a></p>
<h3 id="linux安装软件">linux安装软件</h3><p><a href="http://www.cnblogs.com/chuncn/archive/2010/10/17/1853915.html" target="_blank" rel="external">http://www.cnblogs.com/chuncn/archive/2010/10/17/1853915.html</a></p>
<p><a href="http://www.educity.cn/wenda/353955.html" target="_blank" rel="external">http://www.educity.cn/wenda/353955.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>这个工具可让开发创建更强大的应用程序，特别是那些用C++模版开发的多线程应用程序，包括<a href="http://www.oschina.net/p/tcmalloc" target="_blank" rel="external">TCMallo]]>
    </summary>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="perftools" scheme="http://liuxing.info/tags/perftools/"/>
    
      <category term="tomcat" scheme="http://liuxing.info/tags/tomcat/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MemAdmin管理Memcached]]></title>
    <link href="http://liuxing.info/2015/06/17/MemAdmin%E7%AE%A1%E7%90%86Memcached/"/>
    <id>http://liuxing.info/2015/06/17/MemAdmin管理Memcached/</id>
    <published>2015-06-16T16:24:00.000Z</published>
    <updated>2015-06-16T16:42:34.000Z</updated>
    <content type="html"><![CDATA[<p><em>MemAdmin是一款可视化的Memcached管理与监控工具，基于 PHP5 &amp; JQuery 开发，体积小，操作简单。</em></p>
<blockquote><p>主要功能：</p>
<ul>
<li>服务器参数监控：STATS、SETTINGS、ITEMS、SLABS、SIZES实时刷新</li>
<li>服务器性能监控：GET、DELETE、INCR、DECR、CAS等常用操作命中率实时监控</li>
<li>支持数据遍历，方便对存储内容进行监视</li>
<li>支持条件查询，筛选出满足条件的KEY或VALUE</li>
<li>数组、JSON等序列化字符反序列显示</li>
<li>兼容memcache协议的其他服务，如Tokyo Tyrant (遍历功能除外)</li>
<li>支持服务器连接池，多服务器管理切换方便简洁</li>
</ul>
<footer><strong>开源中国社区</strong><cite><a href="http://www.oschina.net/p/memadmin" target="_blank" rel="external">MemAdmin首页、文档和下载</a></cite></footer></blockquote>
<h2 id="查看依赖">查看依赖</h2><h3 id="查看Apache版本">查看Apache版本</h3><pre><code><span class="title">apachectl</span> -v
</code></pre><h3 id="查看PHP环境">查看PHP环境</h3><pre><code><span class="title">php</span> -v
</code></pre><p><a href="http://nan1hao.blog.51cto.com/753570/602610/" target="_blank" rel="external">http://nan1hao.blog.51cto.com/753570/602610/</a></p>
<h2 id="安装Apache和PHP（如果没有的话）">安装Apache和PHP（如果没有的话）</h2><p><a href="http://blog.csdn.net/czp11210/article/details/8750506" target="_blank" rel="external">http://blog.csdn.net/czp11210/article/details/8750506</a></p>
<h2 id="安装PHP的memcached扩展">安装PHP的memcached扩展</h2><pre><code><span class="tag">RPM</span> –<span class="tag">ivh</span> <span class="tag">php-pear-1</span><span class="class">.9</span><span class="class">.4-4</span><span class="class">.el6</span><span class="class">.noarch</span><span class="class">.rpm</span> 

<span class="tag">RPM</span> –<span class="tag">ivh</span> <span class="tag">php-pecl-memcache-3</span><span class="class">.0</span><span class="class">.5-4</span><span class="class">.el6</span><span class="class">.x86_64</span><span class="class">.rpm</span>
</code></pre><p>或 <code>yum install</code> 安装</p>
<h2 id="修改配置">修改配置</h2><p>追加内容</p>
<pre><code>echo <span class="string">"abcd"</span> &gt;&gt; <span class="tag">a</span><span class="class">.txt</span> #命令示例
</code></pre><p>重启Apache </p>
<pre><code><span class="keyword">service</span> httpd <span class="literal">restart</span>
</code></pre><p>找不到服务？<a href="http://blog.csdn.net/zwfcan/article/details/8231864" target="_blank" rel="external">http://blog.csdn.net/zwfcan/article/details/8231864</a></p>
<p>搜索Apache目录</p>
<pre><code><span class="keyword">find</span> / -name httpd.<span class="keyword">conf</span>
</code></pre><h2 id="安装memadmin">安装memadmin</h2><pre><code>tar –zxvf memadmin-<span class="number">1.0</span>.<span class="number">12</span><span class="class">.tar</span><span class="class">.gz</span>
mv memadmin  /var/www/<span class="tag">html</span>

vi /etc/httpd/conf/httpd.conf
</code></pre><p>1.DocumentRoot “/var/www/html”<br>2.DirectoryIndex index.html index.html.var index.php<br>3.&lt;Directory “/var/www/html”&gt; …</p>
<p><em>很久没用了，还有些使用截图需要补上，待续…</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>MemAdmin是一款可视化的Memcached管理与监控工具，基于 PHP5 &amp; JQuery 开发，体积小，操作简单。</em></p>
<blockquote><p>主要功能：</p>
<ul>
<li>服务器参数监控：STATS、SETTINGS、I]]>
    </summary>
    
      <category term="MemAdmin" scheme="http://liuxing.info/tags/MemAdmin/"/>
    
      <category term="Memcached" scheme="http://liuxing.info/tags/Memcached/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux安装jdk]]></title>
    <link href="http://liuxing.info/2015/06/17/linux%E5%AE%89%E8%A3%85jdk/"/>
    <id>http://liuxing.info/2015/06/17/linux安装jdk/</id>
    <published>2015-06-16T16:17:00.000Z</published>
    <updated>2015-06-16T16:23:10.000Z</updated>
    <content type="html"><![CDATA[<p><em>记录一下</em></p>
<h2 id="安装">安装</h2><pre><code><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/java/ 
</code></pre><p>或</p>
<pre><code>cd /usr/java/

tar -zxvf 文件名<span class="class">.tar</span><span class="class">.gz</span>
</code></pre><p>可以修改文件夹读写、所有者、所属组<br><a href="http://www.tuicool.com/articles/b6bimiz" target="_blank" rel="external">http://www.tuicool.com/articles/b6bimiz</a></p>
<h2 id="环境变量配置">环境变量配置</h2><p>全局方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.<span class="number">8.0</span>_40</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JRE_HOME</span>/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile <span class="comment">#使更改的配置立即生效</span></span><br></pre></td></tr></table></figure>
<p>用户环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.<span class="number">8.0</span>_40</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile <span class="comment">#使更改的配置生效</span></span><br><span class="line"></span><br><span class="line">java -version <span class="comment">#查看版本</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><em>记录一下</em></p>
<h2 id="安装">安装</h2><pre><code><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/java/ 
</code><]]>
    </summary>
    
      <category term="jdk" scheme="http://liuxing.info/tags/jdk/"/>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[wget下载jdk]]></title>
    <link href="http://liuxing.info/2015/06/17/wget%E4%B8%8B%E8%BD%BDjdk/"/>
    <id>http://liuxing.info/2015/06/17/wget下载jdk/</id>
    <published>2015-06-16T16:02:00.000Z</published>
    <updated>2015-06-16T16:15:15.000Z</updated>
    <content type="html"><![CDATA[<p><em>通常需要下载jdk时，直接用wget命令是不行的。那么，如何解决呢？</em><br><em>只需要在wget的时候加上一个特殊的cookie就可以搞定</em></p>
<p><strong>JDK 7</strong></p>
<pre><code>wget --<span class="keyword">no</span>-cookies --<span class="keyword">no</span>-check-certificate --header <span class="string">"Cookie:gpw_e24=http<span class="variable">%3a</span><span class="variable">%2f</span><span class="variable">%2fwww</span>.oracle.com<span class="variable">%2ftechnetwork</span><span class="variable">%2fjava</span><span class="variable">%2fjavase</span><span class="variable">%2fdownloads</span><span class="variable">%2fjdk7</span>-downloads-1880260.html;oraclelicense=accept-securebackup-cookie"</span> http:<span class="regexp">//download</span>.oracle.com/otn-pub/java/jdk/<span class="number">7</span>u75-b13/jdk-<span class="number">7</span>u75-linux-x64.tar.gz
</code></pre><p><strong>JDK 8</strong></p>
<pre><code>wget --<span class="keyword">no</span>-cookies --<span class="keyword">no</span>-check-certificate --header <span class="string">"Cookie:gpw_e24=http<span class="variable">%3a</span><span class="variable">%2f</span><span class="variable">%2fwww</span>.oracle.com<span class="variable">%2ftechnetwork</span><span class="variable">%2fjava</span><span class="variable">%2fjavase</span><span class="variable">%2fdownloads</span><span class="variable">%2fjdk8</span>-downloads-2133151.html;oraclelicense=accept-securebackup-cookie"</span> http:<span class="regexp">//download</span>.oracle.com/otn-pub/java/jdk/<span class="number">8</span>u4<span class="number">0</span>-b26/jdk-<span class="number">8</span>u4<span class="number">0</span>-linux-x64.tar.gz
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><em>通常需要下载jdk时，直接用wget命令是不行的。那么，如何解决呢？</em><br><em>只需要在wget的时候加上一个特殊的cookie就可以搞定</em></p>
<p><strong>JDK 7</strong></p>
<pre><code>wget -]]>
    </summary>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="wget" scheme="http://liuxing.info/tags/wget/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux命令备忘]]></title>
    <link href="http://liuxing.info/2015/06/16/linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>http://liuxing.info/2015/06/16/linux命令备忘/</id>
    <published>2015-06-16T15:58:00.000Z</published>
    <updated>2015-06-16T17:09:16.000Z</updated>
    <content type="html"><![CDATA[<p><em>记录一下自己常用的linux命令</em></p>
<p>独立用户需要配置path,切换到根目录查看path</p>
<pre><code><span class="tag">vi</span> <span class="class">.bash_profile</span>
</code></pre><p>重新给文件夹赋权限</p>
<pre><code><span class="tag">chown</span> <span class="tag">-R</span> <span class="tag">yishou</span> <span class="tag">apache-tomcat-7</span><span class="class">.0</span><span class="class">.47</span>
</code></pre><p>修改密码</p>
<pre><code><span class="title">passwd</span> yishou
</code></pre><p>新增用户，会自动创建同名文件夹</p>
<pre><code><span class="title">useradd</span> loupan
</code></pre><p>删除用户</p>
<pre><code><span class="title">userdel</span> keybox
</code></pre><p>创建文件夹</p>
<pre><code><span class="built_in">mkdir</span> yishou
</code></pre><p>防止环境配置修改之后不立即生效，退出重新登录也可以</p>
<pre><code><span class="built_in">source</span> .bash_profile
</code></pre><p>根据名字查找进程</p>
<pre><code><span class="keyword">ps</span> -aux | <span class="keyword">grep</span> estat
</code></pre><p>关闭防火墙<br>    /etc/init.d/iptables stop</p>
<p>关闭开机启动</p>
<pre><code><span class="title">chkconfig</span> --level <span class="number">2345</span> iptables <span class="built_in">off</span>
</code></pre><p>赋权限</p>
<pre><code><span class="title">chmod</span> <span class="number">777</span> origimagesdisk
</code></pre><p>MAC修改hosts</p>
<pre><code>sudo vi <span class="regexp">/etc/</span>hosts
</code></pre><p>查看文件夹使用情况</p>
<pre><code>du --<span class="built_in">max</span>-<span class="built_in">depth</span>=<span class="number">1</span> -h
</code></pre><p>linux新建tomcat无法启动<br><code>Cannot find bin/catalina.sh</code><br><em>The file is absent or does not have execute permission</em><br><em>This file is needed to run this program</em></p>
<p>原因： 没有权限<br>解决 ： chmod 777 *.sh </p>
<p>添加开机启动</p>
<pre><code>vi /etc/rc.<span class="keyword">local</span>
</code></pre><p>jvisualvm</p>
<p>修改mac最大连接数，默认128</p>
<pre><code>sudo sysctl -w kern<span class="class">.ipc</span><span class="class">.somaxconn</span>=
</code></pre><p>linux ssh互信</p>
<pre><code>ssh-keygen -t rsa
cd ~/<span class="class">.ssh</span> 
scp -r id_rsa<span class="class">.pub</span> keyuan@<span class="number">192.168</span>.<span class="number">3.51</span>:/home/keyuan/.ssh/authorized_keys
</code></pre><p>配置java环境变量</p>
<pre><code>export JAVA_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_40
export JRE_HOME=<span class="variable">$JAVA_HOME</span>
export CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/<span class="tag">dt</span><span class="class">.jar</span>:<span class="variable">$JAVA_HOME</span>/lib/tools<span class="class">.jar</span>
export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><em>记录一下自己常用的linux命令</em></p>
<p>独立用户需要配置path,切换到根目录查看path</p>
<pre><code><span class="tag">vi</span> <span class="class">.bash_profile</]]>
    </summary>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitHub博客搭建]]></title>
    <link href="http://liuxing.info/2015/06/14/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://liuxing.info/2015/06/14/GitHub博客搭建/</id>
    <published>2015-06-13T18:52:00.000Z</published>
    <updated>2015-06-16T13:05:45.000Z</updated>
    <content type="html"><![CDATA[<p><em>GitHub带你装逼带你飞！你值得拥有！</em></p>
<hr>
<h2 id="介绍">介绍</h2><p><em><a href="https://github.com/" target="_blank" rel="external">GitHub</a>很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。</em><br><em>GitHub作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如<a href="https://github.com/jquery/jquery" target="_blank" rel="external">jQuery</a>、<a href="https://github.com/twitter/bootstrap" target="_blank" rel="external">Twitter</a>等。</em><br><em>为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，GitHub替你想到了这一点，他提供了<a href="http://pages.github.com" target="_blank" rel="external">GitHub Pages</a>的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</em></p>
<p>GitHub Pages有以下几个优点</p>
<ul>
<li><em>轻量级的博客系统，没有麻烦的配置</em></li>
<li><em>使用标记语言，比如 <a href="http://markdown.tw" target="_blank" rel="external">Markdown</a></em></li>
<li><em>无需自己搭建服务器</em></li>
<li><em>根据GitHub的限制，对应的每个站有300MB空间</em></li>
<li><em>可以绑定自己的域名</em></li>
</ul>
<p>当然他也有缺点</p>
<ul>
<li><em>使用<a href="https://github.com/jekyll/jekyll" target="_blank" rel="external">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等。</em></li>
<li><em>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。</em></li>
<li><em>基于Git，很多东西需要动手，不像Wordpress有强大的后台。</em></li>
</ul>
<p>大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。</p>
<h2 id="GitHub配置">GitHub配置</h2><h3 id="注册账号">注册账号</h3><p>传送口：<a href="https://github.com/join" target="_blank" rel="external">https://github.com/join</a> ，自行搞定，否则放弃吧…</p>
<p><strong>PS</strong>：<em><code>不要取奇怪的用户名，比如大小写混合，建议小写字母+数字组合，否则pages会碰到问题！</code></em></p>
<h3 id="配置Pages">配置Pages</h3><p><strong>新增仓库</strong>：<a href="https://github.com/new" target="_blank" rel="external">https://github.com/new</a></p>
<ul>
<li>Repository name：github账号.github.io</li>
<li>Description：随便输入点描述</li>
<li>public</li>
<li>Initialize this repository with a README</li>
<li>.gitignore 选择初始的文件忽略，我选的java</li>
<li>Licenses：我选的NPL（GNU General Public License v2.0）</li>
</ul>
<p><strong>配置</strong></p>
<ul>
<li>选择右侧操作区的<code>settings</code></li>
<li>选择<code>Launch automatic page generator</code></li>
<li>输入一些基本说明，非必要</li>
<li>选择<code>Load README.md</code></li>
<li>继续<code>Continue to layouts</code></li>
<li>选择模板（随便选个）</li>
<li>发布<code>Publish page</code></li>
<li>此时进入<code>settings</code>应该会有<code>Your site is published at http://username.github.io</code>的条提示，访问一下，神奇吧！</li>
<li>如果404，请检查你的仓库名或账号名，删除仓库重来，删除也是在<code>settings</code>最底部</li>
</ul>
<h2 id="绑定独立域名">绑定独立域名</h2><h3 id="购买域名">购买域名</h3><p>不绑定独立域名则可以直接跳到 <strong>使用hexo</strong></p>
<p>传送门：<a href="https://www.godaddy.com" target="_blank" rel="external">https://www.godaddy.com</a> 支持支付宝<br>域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力。<br>记得先找优惠券：<a href="http://www.dute.me" target="_blank" rel="external">http://www.dute.me</a></p>
<p>推荐几个翻译插件<br><a href="https://chrome.google.com/webstore/detail/%E5%A4%9A%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg" target="_blank" rel="external">多词典划译</a><br><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb" target="_blank" rel="external">Google翻译</a></p>
<p>没有VPN？<br>注册红杏：<a href="http://honx.in/_U9m44oIaA3c2nFTX" target="_blank" rel="external">http://honx.in/_U9m44oIaA3c2nFTX</a><br>公益红杏：<a href="http://help.honx.in/posts/view/32854" target="_blank" rel="external">http://help.honx.in/posts/view/32854</a> </p>
<h3 id="DNS解析">DNS解析</h3><p>传送门：<a href="https://www.dnspod.cn/" target="_blank" rel="external">https://www.dnspod.cn/</a></p>
<ul>
<li>首先添加域名记录，可参考DNSPod的帮助文档：<a href="https://www.dnspod.cn/Support" target="_blank" rel="external">https://www.dnspod.cn/Support</a><br>  添加域名记录后，进入会有个加载配置啥的，不要保存，使用默认的两个解析就行</li>
<li>在DNSPod自己的域名下添加一条<a href="http://baike.baidu.com/view/65575.htm" target="_blank" rel="external">A记录</a>，地址就是Github Pages的服务IP地址：103.245.222.133（最好自行ping获取最新的ip）</li>
<li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href="https://www.dnspod.cn/support/index/fid/119" target="_blank" rel="external">Godaddy注册的域名如何使用DNSPod</a></li>
<li>等待域名解析生效</li>
</ul>
<h3 id="绑定">绑定</h3><p>在刚创建的GitHub仓库根目录下添加<code>CNAME</code>文件，写入你申请的域名，等待生效。</p>
<h2 id="使用hexo">使用hexo</h2><p>基于github pages的不足，我们使用hexo博客框架</p>
<p>因为hexo的文档写的太好了，就没我啥事了！</p>
<p>传送门：<a href="http://hexo.io/zh-cn/" target="_blank" rel="external">http://hexo.io/zh-cn/</a></p>
<p>有任何问题，欢迎评论交流！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>GitHub带你装逼带你飞！你值得拥有！</em></p>
<hr>
<h2 id="介绍">介绍</h2><p><em><a href="https://github.com/" target="_blank" rel="external">GitHub</a>很]]>
    </summary>
    
      <category term="Blog" scheme="http://liuxing.info/tags/Blog/"/>
    
      <category term="DNSPod" scheme="http://liuxing.info/tags/DNSPod/"/>
    
      <category term="GitHub Pages" scheme="http://liuxing.info/tags/GitHub-Pages/"/>
    
      <category term="Godaddy" scheme="http://liuxing.info/tags/Godaddy/"/>
    
      <category term="Hexo" scheme="http://liuxing.info/tags/Hexo/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RestTemplate实践]]></title>
    <link href="http://liuxing.info/2015/05/21/RestTemplate%E5%AE%9E%E8%B7%B5/"/>
    <id>http://liuxing.info/2015/05/21/RestTemplate实践/</id>
    <published>2015-05-21T02:56:27.000Z</published>
    <updated>2015-06-30T12:14:02.000Z</updated>
    <content type="html"><![CDATA[<p><em>什么是RestTemplate？</em></p>
<blockquote>
<p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率。<br>调用RestTemplate的默认构造函数，RestTemplate对象在底层通过使用java.net包下的实现创建HTTP 请求，可以通过使用ClientHttpRequestFactory指定不同的HTTP请求方式。<br>ClientHttpRequestFactory接口主要提供了两种实现方式</p>
<ul>
<li>一种是SimpleClientHttpRequestFactory，使用J2SE提供的方式（既java.net包提供的方式）创建底层的Http请求连接。</li>
<li>一种方式是使用HttpComponentsClientHttpRequestFactory方式，底层使用HttpClient访问远程的Http服务，使用HttpClient可以配置连接池和证书等信息。</li>
</ul>
</blockquote>
<hr>
<h2 id="xml配置的方式">xml配置的方式</h2><p>请查看RestTemplate源码了解细节，知其然知其所以然！</p>
<p>RestTemplate默认是使用SimpleClientHttpRequestFactory，内部是调用jdk的HttpConnection，默认超时为-1</p>
<p>@Autowired<br>RestTemplate simpleRestTemplate<br>@Autowired<br>RestTemplate restTemplate</p>
<h3 id="基于jdk的spring的RestTemplate">基于jdk的spring的RestTemplate</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span><br><span class="line">       <span class="attribute">default-autowire</span>=<span class="value">"byName"</span> <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一、使用jdk的实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.requestFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.client.SimpleClientHttpRequestFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"readTimeout"</span> <span class="attribute">value</span>=<span class="value">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connectTimeout"</span> <span class="attribute">value</span>=<span class="value">"5000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"simpleRestTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.client.RestTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">ref</span>=<span class="value">"ky.requestFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.FormHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用Httpclient连接池的方式">使用Httpclient连接池的方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span><br><span class="line">       <span class="attribute">default-autowire</span>=<span class="value">"byName"</span> <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式二、使用httpclient的实现，带连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.pollingConnectionManager"</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.impl.conn.PoolingHttpClientConnectionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--整个连接池的并发--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxTotal"</span> <span class="attribute">value</span>=<span class="value">"1000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--每个主机的并发--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultMaxPerRoute"</span> <span class="attribute">value</span>=<span class="value">"1000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.httpClientBuilder"</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.impl.client.HttpClientBuilder"</span> <span class="attribute">factory-method</span>=<span class="value">"create"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connectionManager"</span> <span class="attribute">ref</span>=<span class="value">"ky.pollingConnectionManager"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启重试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"retryHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.impl.client.DefaultHttpRequestRetryHandler"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultHeaders"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.message.BasicHeader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"User-Agent"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.message.BasicHeader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"Accept-Encoding"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"gzip,deflate"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.http.message.BasicHeader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"Accept-Language"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"zh-CN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.httpClient"</span> <span class="attribute">factory-bean</span>=<span class="value">"ky.httpClientBuilder"</span> <span class="attribute">factory-method</span>=<span class="value">"build"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ky.clientHttpRequestFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.client.HttpComponentsClientHttpRequestFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">ref</span>=<span class="value">"ky.httpClient"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接超时时间，毫秒--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connectTimeout"</span> <span class="attribute">value</span>=<span class="value">"5000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--读写超时时间，毫秒--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"readTimeout"</span> <span class="attribute">value</span>=<span class="value">"10000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"restTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.client.RestTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">ref</span>=<span class="value">"ky.clientHttpRequestFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"errorHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.client.DefaultResponseErrorHandler"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.FormHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="bean初始化+静态工具">bean初始化+静态工具</h2><p><strong>线程安全的单例（懒汉模式）</strong></p>
<h3 id="基于jdk的spring的RestTemplate-1">基于jdk的spring的RestTemplate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.FormHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@title</span>：基于jdk的spring的RestTemplate</span><br><span class="line"> * <span class="doctag">@author</span>：liuxing</span><br><span class="line"> * <span class="doctag">@date</span>：2015-05-18 09:35</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="annotation">@Lazy</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRestClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SimpleRestClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SimpleClientHttpRequestFactory requestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        requestFactory.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加转换器</span></span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> FormHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line"></span><br><span class="line">        restTemplate = <span class="keyword">new</span> RestTemplate(messageConverters);</span><br><span class="line">        restTemplate.setRequestFactory(requestFactory);</span><br><span class="line">        restTemplate.setErrorHandler(<span class="keyword">new</span> DefaultResponseErrorHandler());</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"SimpleRestClient初始化完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleRestClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用Httpclient连接池的方式-1">使用Httpclient连接池的方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.Header;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpRequestRetryHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicHeader;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.FormHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@title</span>：使用spring的restTemplate替代httpclient工具</span><br><span class="line"> * <span class="doctag">@author</span>：liuxing</span><br><span class="line"> * <span class="doctag">@date</span>：2015-05-18 08:48</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="annotation">@Lazy</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SimpleRestClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 长连接保持30秒</span></span><br><span class="line">        PoolingHttpClientConnectionManager pollingConnectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 总连接数</span></span><br><span class="line">        pollingConnectionManager.setMaxTotal(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 同路由的并发数</span></span><br><span class="line">        pollingConnectionManager.setDefaultMaxPerRoute(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClients.custom();</span><br><span class="line">        httpClientBuilder.setConnectionManager(pollingConnectionManager);</span><br><span class="line">        <span class="comment">// 重试次数，默认是3次，没有开启</span></span><br><span class="line">        httpClientBuilder.setRetryHandler(<span class="keyword">new</span> DefaultHttpRequestRetryHandler(<span class="number">2</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// 保持长连接配置，需要在头添加Keep-Alive</span></span><br><span class="line">        httpClientBuilder.setKeepAliveStrategy(<span class="keyword">new</span> DefaultConnectionKeepAliveStrategy());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        RequestConfig.Builder builder = RequestConfig.custom();</span></span><br><span class="line"><span class="comment">//        builder.setConnectionRequestTimeout(200);</span></span><br><span class="line"><span class="comment">//        builder.setConnectTimeout(5000);</span></span><br><span class="line"><span class="comment">//        builder.setSocketTimeout(5000);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        RequestConfig requestConfig = builder.build();</span></span><br><span class="line"><span class="comment">//        httpClientBuilder.setDefaultRequestConfig(requestConfig);</span></span><br><span class="line"></span><br><span class="line">        List&lt;Header&gt; headers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36"</span>));</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip,deflate"</span>));</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"Accept-Language"</span>, <span class="string">"zh-CN"</span>));</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>));</span><br><span class="line"></span><br><span class="line">        httpClientBuilder.setDefaultHeaders(headers);</span><br><span class="line"></span><br><span class="line">        HttpClient httpClient = httpClientBuilder.build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// httpClient连接配置，底层是配置RequestConfig</span></span><br><span class="line">        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory(httpClient);</span><br><span class="line">        <span class="comment">// 连接超时</span></span><br><span class="line">        clientHttpRequestFactory.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 数据读取超时时间，即SocketTimeout</span></span><br><span class="line">        clientHttpRequestFactory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 连接不够用的等待时间，不宜过长，必须设置，比如连接不够用时，时间过长将是灾难性的</span></span><br><span class="line">        clientHttpRequestFactory.setConnectionRequestTimeout(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 缓冲请求数据，默认值是true。通过POST或者PUT大量发送数据时，建议将此属性更改为false，以免耗尽内存。</span></span><br><span class="line">        <span class="comment">// clientHttpRequestFactory.setBufferRequestBody(false);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加内容转换器</span></span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> FormHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line"></span><br><span class="line">        restTemplate = <span class="keyword">new</span> RestTemplate(messageConverters);</span><br><span class="line">        restTemplate.setRequestFactory(clientHttpRequestFactory);</span><br><span class="line">        restTemplate.setErrorHandler(<span class="keyword">new</span> DefaultResponseErrorHandler());</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"RestClient初始化完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RestClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HttpClientUtils">HttpClientUtils</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dooioo.commons.Strings;</span><br><span class="line"><span class="keyword">import</span> com.dooioo.framework.SpringContextHolder;</span><br><span class="line"><span class="keyword">import</span> com.dooioo.ky.cache.HttpClientResultCache;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.MapUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * 类功能说明：httpclient工具类,基于httpclient 4.x</span><br><span class="line"> * Title: HttpClientUtils.java</span><br><span class="line"> * <span class="doctag">@author</span> 刘兴</span><br><span class="line"> * <span class="doctag">@date</span> 2014-3-7 下午7:48:58</span><br><span class="line"> * <span class="doctag">@version</span> V1.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HttpClientUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post请求</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@param</span> formParams</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url, Map&lt;String, String&gt; formParams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isEmpty(formParams)) &#123;</span><br><span class="line">            <span class="keyword">return</span> doPost(url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MultiValueMap&lt;String, String&gt; requestEntity = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">            formParams.keySet().stream().forEach(key -&gt; requestEntity.add(key, MapUtils.getString(formParams, key, <span class="string">""</span>)));</span><br><span class="line">            <span class="keyword">return</span> RestClient.getClient().postForObject(url, requestEntity, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"POST请求出错：&#123;&#125;"</span>, url, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Strings.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post请求</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RestClient.getClient().postForObject(url, HttpEntity.EMPTY, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"POST请求出错：&#123;&#125;"</span>, url, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Strings.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * get请求</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RestClient.getClient().getForObject(url, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"GET请求出错：&#123;&#125;"</span>, url, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Strings.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ErrorHolder">ErrorHolder</h3><p>自定义的一个异常结果包装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.HttpClientErrorException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.HttpServerErrorException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@title</span>：ErrorHolder</span><br><span class="line"> * <span class="doctag">@author</span>：liuxing</span><br><span class="line"> * <span class="doctag">@date</span>：2015-06-16 11:01</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpStatus statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String statusText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String responseBody;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpHeaders responseHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorHolder</span><span class="params">(HttpStatus statusCode, String statusText, String responseBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusCode = statusCode;</span><br><span class="line">        <span class="keyword">this</span>.statusText = statusText;</span><br><span class="line">        <span class="keyword">this</span>.responseBody = responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorHolder</span><span class="params">(String statusText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusText = statusText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatusCode</span><span class="params">(HttpStatus statusCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusCode = statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatusText</span><span class="params">(String statusText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusText = statusText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResponseBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseBody</span><span class="params">(String responseBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.responseBody = responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getResponseHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> responseHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseHeaders</span><span class="params">(HttpHeaders responseHeaders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.responseHeaders = responseHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ErrorHolder <span class="title">build</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> HttpServerErrorException) &#123;</span><br><span class="line">            HttpServerErrorException e = (HttpServerErrorException) exception;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorHolder(e.getStatusCode(), e.getStatusText(), e.getResponseBodyAsString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> HttpClientErrorException) &#123;</span><br><span class="line">            HttpClientErrorException e = (HttpClientErrorException) exception;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorHolder(e.getStatusCode(), e.getStatusText(), e.getResponseBodyAsString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorHolder(exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用样例">使用样例</h2><p>api里面可以做自动的参数匹配：<br>如：<a href="http://you" target="_blank" rel="external">http://you</a> domainn name/test?empNo={empNo}，则下面方法的最后一个参数为数据匹配参数，会自动根据key进行查找，然后替换</p>
<p>API没有声明异常，注意进行异常处理</p>
<p>更多使用语法请查看API文档</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;List&lt;KyArea&gt;&gt; result = RestClient.getClient().exchange(DIVIDE_PLATE_API, HttpMethod.GET, HttpEntity.EMPTY, <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;KyArea&gt;&gt;() &#123;&#125;, map(<span class="string">"empNo"</span>, empNo));</span><br><span class="line">List&lt;KyArea&gt; list = result.getBody();</span><br><span class="line"></span><br><span class="line">ResponseEntity&lt;KyArea&gt; result = RestClient.getClient().exchange(DIVIDE_PLATE_API, HttpMethod.GET, HttpEntity.EMPTY, KyArea.class, map(<span class="string">"empNo"</span>, empNo));</span><br><span class="line">KyArea kyArea = result.getBody();</span><br></pre></td></tr></table></figure>
<h2 id="更多">更多</h2><p><strong>RestTemplate API说明和使用参考</strong></p>
<p><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p>
<p><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/SimpleClientHttpRequestFactory.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/SimpleClientHttpRequestFactory.html</a></p>
<p><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.html</a></p>
<p><strong>HttpClient官方示例和参数配置说明</strong></p>
<p><a href="http://hc.apache.org/httpcomponents-client-4.4.x/examples.html" target="_blank" rel="external">http://hc.apache.org/httpcomponents-client-4.4.x/examples.html</a></p>
<p><a href="http://hc.apache.org/httpcomponents-client-4.4.x/tutorial/html/index.html" target="_blank" rel="external">http://hc.apache.org/httpcomponents-client-4.4.x/tutorial/html/index.html</a></p>
<p><strong>依赖</strong><br><em>spring 3.x以上</em><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意点</strong></p>
<p>1.关于httpclient配置的<code>defaultMaxPerRoute</code>和<code>maxTotal</code><br><code>defaultMaxPerRoute</code>：最大路由并发数，以主机为单位<br><code>maxTotal</code>：整个连接池的并发数</p>
<p>例如：<br><code>defaultMaxPerRoute</code>为10，<code>maxTotal</code>为100<br>假设只会访问<a href="http://www.baidu.com和http://www.google.com" target="_blank" rel="external">http://www.baidu.com和http://www.google.com</a><br>那么能同时并发到客源的只能是10，房源也是10，整个连接永远不会到100</p>
<p>2.部分方法注意查看源码，默认构造里面会新增常用的数据转换器，spring对jackson比较情有独钟，在解析xml和json时，优先使用jackson</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; using default settings.</span><br><span class="line"> * Default &#123;<span class="doctag">@link</span> HttpMessageConverter&#125;s are initialized.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (romePresent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AtomFeedHttpMessageConverter());</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> RssChannelHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line">            messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jaxb2Present) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> GsonHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; based on the given &#123;<span class="doctag">@link</span> ClientHttpRequestFactory&#125;.</span><br><span class="line"> * <span class="doctag">@param</span> requestFactory HTTP request factory to use</span><br><span class="line"> * <span class="doctag">@see</span> org.springframework.http.client.SimpleClientHttpRequestFactory</span><br><span class="line"> * <span class="doctag">@see</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">(ClientHttpRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    setRequestFactory(requestFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看添加转换器的方法外部添加转换器时，this.messageConverters.clear();会先清除已有的，需要注意</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Create a new instance of the &#123;<span class="doctag">@link</span> RestTemplate&#125; using the given list of</span><br><span class="line"> * &#123;<span class="doctag">@link</span> HttpMessageConverter&#125; to use</span><br><span class="line"> * <span class="doctag">@param</span> messageConverters the list of &#123;<span class="doctag">@link</span> HttpMessageConverter&#125; to use</span><br><span class="line"> * <span class="doctag">@since</span> 3.2.7</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">    Assert.notEmpty(messageConverters, <span class="string">"'messageConverters' must not be empty"</span>);</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.addAll(messageConverters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Set the message body converters to use.</span><br><span class="line"> * &lt;p&gt;These converters are used to convert from and to HTTP requests and responses.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">    Assert.notEmpty(messageConverters, <span class="string">"'messageConverters' must not be empty"</span>);</span><br><span class="line">    <span class="comment">// Take getMessageConverters() List as-is when passed in here</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters != messageConverters) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.clear();</span><br><span class="line">            <span class="keyword">this</span>.messageConverters.addAll(messageConverters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><em>什么是RestTemplate？</em></p>
<blockquote>
<p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率。<br>调用]]>
    </summary>
    
      <category term="RestTemplate" scheme="http://liuxing.info/tags/RestTemplate/"/>
    
      <category term="Spring" scheme="http://liuxing.info/tags/Spring/"/>
    
      <category term="httpClient" scheme="http://liuxing.info/tags/httpClient/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用spring4的websocket支持]]></title>
    <link href="http://liuxing.info/2015/04/21/%E4%BD%BF%E7%94%A8spring4%E7%9A%84websocket%E6%94%AF%E6%8C%81/"/>
    <id>http://liuxing.info/2015/04/21/使用spring4的websocket支持/</id>
    <published>2015-04-20T16:48:00.000Z</published>
    <updated>2015-06-16T13:47:13.000Z</updated>
    <content type="html"><![CDATA[<p>J2EE7版（JSR-356）<br><a href="http://liuxing.info/2015/02/09/websocket-demo">http://liuxing.info/2015/02/09/websocket-demo</a></p>
<p>相关依赖请参考上文，spring需要4.x</p>
<h2 id="websocket处理器">websocket处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.MapUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.BinaryWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：WebSocket处理器</span><br><span class="line"> * 可以继承 &#123;<span class="doctag">@link</span> TextWebSocketHandler&#125;/&#123;<span class="doctag">@link</span> BinaryWebSocketHandler&#125;，</span><br><span class="line"> * 或者简单的实现&#123;<span class="doctag">@link</span> WebSocketHandler&#125;接口</span><br><span class="line"> * 作者：liuxing(2015-01-25 03:42)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TelWebSocketHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立连接</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line">        TelSocketSessionUtils.add(inquiryId, empNo, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 收到客户端消息</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@param</span> message</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line">        TelSocketSessionUtils.sendMessage(inquiryId, empNo, <span class="string">"【来自服务器的复读机】："</span> + message.getPayload().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 出现异常</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@param</span> exception</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.error(<span class="string">"websocket connection exception: "</span> + TelSocketSessionUtils.getKey(inquiryId, empNo));</span><br><span class="line">        LOGGER.error(exception.getMessage(), exception);</span><br><span class="line"></span><br><span class="line">        TelSocketSessionUtils.remove(inquiryId, empNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 连接关闭</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     * <span class="doctag">@param</span> closeStatus</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus closeStatus)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inquiryId = MapUtils.getString(session.getAttributes(), <span class="string">"inquiryId"</span>);</span><br><span class="line">        <span class="keyword">int</span> empNo = MapUtils.getInteger(session.getAttributes(), <span class="string">"empNo"</span>);</span><br><span class="line">        TelSocketSessionUtils.remove(inquiryId, empNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否分段发送消息</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsPartialMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="websocket连接的拦截器">websocket连接的拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：websocket连接的拦截器</span><br><span class="line"> * 有两种方式</span><br><span class="line"> *          一种是实现接口HandshakeInterceptor，实现beforeHandshake和afterHandshake函数</span><br><span class="line"> *          一种是继承HttpSessionHandshakeInterceptor，重载beforeHandshake和afterHandshake函数</span><br><span class="line"> * 我这里是参照spring官方文档中的继承HttpSessionHandshakeInterceptor的方式</span><br><span class="line"> * 作者：liuxing(2015-01-25 03:46)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelWebSocketHandshakeInterceptor</span> <span class="keyword">extends</span> <span class="title">HttpSessionHandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TelWebSocketHandshakeInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 从请求中获取唯一标记参数，填充到数据传递容器attributes</span><br><span class="line">     * <span class="doctag">@param</span> serverHttpRequest</span><br><span class="line">     * <span class="doctag">@param</span> serverHttpResponse</span><br><span class="line">     * <span class="doctag">@param</span> wsHandler</span><br><span class="line">     * <span class="doctag">@param</span> attributes</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getSession(serverHttpRequest) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) serverHttpRequest;</span><br><span class="line">            HttpServletRequest request = servletRequest.getServletRequest();</span><br><span class="line">            attributes.put(<span class="string">"inquiryId"</span>, request.getParameter(<span class="string">"inquiryId"</span>));</span><br><span class="line">            attributes.put(<span class="string">"empNo"</span>, request.getParameter(<span class="string">"empNo"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.beforeHandshake(serverHttpRequest, serverHttpResponse, wsHandler, attributes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.afterHandshake(request, response, wsHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpSession <span class="title">getSession</span><span class="params">(ServerHttpRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            ServletServerHttpRequest serverRequest = (ServletServerHttpRequest) request;</span><br><span class="line">            <span class="keyword">return</span> serverRequest.getServletRequest().getSession(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="session工具类">session工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：TelSocketSessionUtils</span><br><span class="line"> * 作者：liuxing(2014-12-26 02:32)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelSocketSessionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TelSocketSessionUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, WebSocketSession&gt; clients = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 保存一个连接</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo, WebSocketSession session)</span></span>&#123;</span><br><span class="line">        clients.put(getKey(inquiryId, empNo), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取一个连接</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebSocketSession <span class="title">get</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.get(getKey(inquiryId, empNo));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 移除一个连接</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        clients.remove(getKey(inquiryId, empNo));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 组装sessionId</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inquiryId + <span class="string">"_"</span> + empNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断是否有效连接</span><br><span class="line">     * 判断是否存在</span><br><span class="line">     * 判断连接是否开启</span><br><span class="line">     * 无效的进行清除</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasConnection</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo)</span> </span>&#123;</span><br><span class="line">        String key = getKey(inquiryId, empNo);</span><br><span class="line">        <span class="keyword">if</span> (clients.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取连接数的数量</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 发送消息到客户端</span><br><span class="line">     * <span class="doctag">@param</span> inquiryId</span><br><span class="line">     * <span class="doctag">@param</span> empNo</span><br><span class="line">     * <span class="doctag">@param</span> message</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String inquiryId, <span class="keyword">int</span> empNo, String message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasConnection(inquiryId, empNo)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(getKey(inquiryId, empNo) + <span class="string">" connection does not exist"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WebSocketSession session = get(inquiryId, empNo);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.sendMessage(<span class="keyword">new</span> TextMessage(message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"websocket sendMessage exception: "</span> + getKey(inquiryId, empNo));</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">            clients.remove(getKey(inquiryId, empNo));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="初始化配置">初始化配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--websocket配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"telWebSocketHandler"</span> <span class="attribute">class</span>=<span class="value">"包.websocket.handler.TelWebSocketHandler"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">websocket:handlers</span> <span class="attribute">allowed-origins</span>=<span class="value">"*"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">websocket:mapping</span> <span class="attribute">path</span>=<span class="value">"webSocketStatus"</span> <span class="attribute">handler</span>=<span class="value">"telWebSocketHandler"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"包.websocket.interceptor.TelWebSocketHandshakeInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">websocket:handlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxTextMessageBufferSize"</span> <span class="attribute">value</span>=<span class="value">"8192"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxBinaryMessageBufferSize"</span> <span class="attribute">value</span>=<span class="value">"8192"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxSessionIdleTimeout"</span> <span class="attribute">value</span>=<span class="value">"900000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"asyncSendTimeout"</span> <span class="attribute">value</span>=<span class="value">"5000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring官方文档已经写得很齐全了，更多场景和说明请参阅下文大笑<br><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket" target="_blank" rel="external">http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>J2EE7版（JSR-356）<br><a href="http://liuxing.info/2015/02/09/websocket-demo">http://liuxing.info/2015/02/09/websocket-demo</a></p>
<p>相关依赖请]]>
    </summary>
    
      <category term="Spring" scheme="http://liuxing.info/tags/Spring/"/>
    
      <category term="websocket" scheme="http://liuxing.info/tags/websocket/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring4不兼容ibatis的解决方法 ]]></title>
    <link href="http://liuxing.info/2015/04/21/spring4%E4%B8%8D%E5%85%BC%E5%AE%B9ibatis%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/"/>
    <id>http://liuxing.info/2015/04/21/spring4不兼容ibatis的解决方法 /</id>
    <published>2015-04-20T16:46:00.000Z</published>
    <updated>2015-06-16T13:47:13.000Z</updated>
    <content type="html"><![CDATA[<p>因为spring升级到4.x后，orm包里面移除了对ibatis的支持，<br>如果orm使用4.x版本的话项目会启动失败。<br>查看orm-3.x版本的SqlMapClientFactoryBean类，里面说的很清楚，只支持到3.x。<br>如果可以升级到mybatis的话尽量升级，否则可以使用如下方法。<br>orm包单独使用3.x的版本，项目中正式在用，还没出现问题（或许还没爆出来哭）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.2.13.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>因为spring升级到4.x后，orm包里面移除了对ibatis的支持，<br>如果orm使用4.x版本的话项目会启动失败。<br>查看orm-3.x版本的SqlMapClientFactoryBean类，里面说的很清楚，只支持到3.x。<br>如果可以升级到mybatis]]>
    </summary>
    
      <category term="Spring" scheme="http://liuxing.info/tags/Spring/"/>
    
      <category term="ibatis" scheme="http://liuxing.info/tags/ibatis/"/>
    
      <category term="框架" scheme="http://liuxing.info/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算地图坐标是否在多边形内]]></title>
    <link href="http://liuxing.info/2015/04/21/%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E6%98%AF%E5%90%A6%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85/"/>
    <id>http://liuxing.info/2015/04/21/计算地图坐标是否在多边形内/</id>
    <published>2015-04-20T16:44:00.000Z</published>
    <updated>2015-06-16T13:47:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="使用百度地图计算">使用百度地图计算</h2><p><a href="http://api.map.baidu.com/library/GeoUtils/1.2/examples/simple.html" target="_blank" rel="external">http://api.map.baidu.com/library/GeoUtils/1.2/examples/simple.html</a><br><a href="http://api.map.baidu.com/library/GeoUtils/1.2/docs/symbols/BMapLib.GeoUtils.html" target="_blank" rel="external">http://api.map.baidu.com/library/GeoUtils/1.2/docs/symbols/BMapLib.GeoUtils.html</a></p>
<h2 id="使用java计算">使用java计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.geom.GeneralPath;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.Point2D;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：坐标几何运算</span><br><span class="line"> * 作者：liuxing(2015-04-20 22:19)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeoUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 检查一个坐标是否在多边形内</span><br><span class="line">     * <span class="doctag">@param</span> x 纬度 31.000...</span><br><span class="line">     * <span class="doctag">@param</span> y 经度 121.000...</span><br><span class="line">     * <span class="doctag">@param</span> polygonPoints 多边形边界的经纬度数组</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPointInPolygon</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, List&lt;Map&lt;String, Double&gt;&gt; polygonPoints)</span> </span>&#123;</span><br><span class="line">        Point2D.Double geoPoint = buildPoint(x, y);</span><br><span class="line">        List&lt;Point2D.Double&gt; geoPolygon = buildPolygon(polygonPoints);</span><br><span class="line">        <span class="keyword">return</span> GeoUtils.isPointInPolygon(geoPoint, geoPolygon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 检查一个坐标是否在多边形内</span><br><span class="line">     * <span class="doctag">@param</span> point 检查的点坐标</span><br><span class="line">     * <span class="doctag">@param</span> polygon 参照的多边形</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPointInPolygon</span><span class="params">(Point2D.Double point, List&lt;Point2D.Double&gt; polygon)</span> </span>&#123;</span><br><span class="line">        GeneralPath p = <span class="keyword">new</span> GeneralPath();</span><br><span class="line"></span><br><span class="line">        Point2D.Double first = polygon.get(<span class="number">0</span>);</span><br><span class="line">        p.moveTo(first.x, first.y);</span><br><span class="line">        polygon.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        polygon.forEach(d -&gt; p.lineTo(d.x, d.y));</span><br><span class="line"></span><br><span class="line">        p.lineTo(first.x, first.y);</span><br><span class="line"></span><br><span class="line">        p.closePath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p.contains(point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构建一个坐标点</span><br><span class="line">     * <span class="doctag">@param</span> x 纬度 31.000...</span><br><span class="line">     * <span class="doctag">@param</span> y 经度 121.000...</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point2D.<span class="function">Double <span class="title">buildPoint</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point2D.Double(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构建一个多边形</span><br><span class="line">     * <span class="doctag">@param</span> polygonPoints</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Point2D.Double&gt; buildPolygon(List&lt;Map&lt;String, Double&gt;&gt; polygonPoints) &#123;</span><br><span class="line">        List&lt;Point2D.Double&gt; geoPolygon = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        polygonPoints.forEach(map -&gt; geoPolygon.add(buildPoint(map.get(<span class="string">"x"</span>), map.get(<span class="string">"y"</span>))));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> geoPolygon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多运算场景请参考：<br><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Polygon.html" target="_blank" rel="external">http://docs.oracle.com/javase/8/docs/api/java/awt/Polygon.html</a></p>
<h2 id="使用数据库计算">使用数据库计算</h2><p>SqlServer2008以上，暂未尝试</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="使用百度地图计算">使用百度地图计算</h2><p><a href="http://api.map.baidu.com/library/GeoUtils/1.2/examples/simple.html" target="_blank" rel="external]]>
    </summary>
    
      <category term="地图" scheme="http://liuxing.info/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java和数据库计算两个坐标的距离]]></title>
    <link href="http://liuxing.info/2015/04/21/java%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E5%9D%90%E6%A0%87%E7%9A%84%E8%B7%9D%E7%A6%BB/"/>
    <id>http://liuxing.info/2015/04/21/java和数据库计算两个坐标的距离/</id>
    <published>2015-04-20T16:41:00.000Z</published>
    <updated>2015-06-16T13:47:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="使用Java进行计算">使用Java进行计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 类功能说明：地图坐标距离计算工具类</span><br><span class="line"> * Title: DistanceUtil.java</span><br><span class="line"> * <span class="doctag">@author</span> liuxing</span><br><span class="line"> * <span class="doctag">@date</span> 2013-9-8 下午10:36:03</span><br><span class="line"> * <span class="doctag">@version</span> V1.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistanceUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_PI = Math.PI; <span class="comment">// PI</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_2PI = Math.PI * <span class="number">2</span>; <span class="comment">// 2*PI</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_PI180 = Math.PI / <span class="number">180</span>; <span class="comment">// PI/180.0</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> DEF_R = <span class="number">6370693.5</span>; <span class="comment">// 地球半径</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * 功能说明：计算两个地图坐标点之间的距离（近距离计算）</span><br><span class="line">	 * liuxing 2013-9-8 下午10:42:17</span><br><span class="line">	 * <span class="doctag">@param</span> lng1 起点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat1 起点纬度</span><br><span class="line">	 * <span class="doctag">@param</span> lng2 终点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat2 终点纬度</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getShortDistance</span><span class="params">(<span class="keyword">double</span> lng1, <span class="keyword">double</span> lat1, <span class="keyword">double</span> lng2, <span class="keyword">double</span> lat2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> ew1, ns1, ew2, ns2;</span><br><span class="line">		<span class="keyword">double</span> dx, dy, dew;</span><br><span class="line">		<span class="keyword">double</span> distance;</span><br><span class="line">		<span class="comment">// 角度转换为弧度</span></span><br><span class="line">		ew1 = Math.toRadians(lng1);</span><br><span class="line">		ns1 = Math.toRadians(lat1);</span><br><span class="line">		ew2 = Math.toRadians(lng2);</span><br><span class="line">		ns2 = Math.toRadians(lat2);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 经度差</span></span><br><span class="line">		dew = ew1 - ew2;</span><br><span class="line">		<span class="comment">// 若跨东经和西经180 度，进行调整</span></span><br><span class="line">		<span class="keyword">if</span> (dew &gt; DEF_PI)&#123;</span><br><span class="line">			dew = DEF_2PI - dew;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dew &lt; -DEF_PI)&#123;</span><br><span class="line">			dew = DEF_2PI + dew;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		dx = DEF_R * Math.cos(ns1) * dew; 	<span class="comment">// 东西方向长度(在纬度圈上的投影长度)</span></span><br><span class="line">		dy = DEF_R * (ns1 - ns2); 			<span class="comment">// 南北方向长度(在经度圈上的投影长度)</span></span><br><span class="line">		<span class="comment">// 勾股定理求斜边长</span></span><br><span class="line">		distance = Math.sqrt(dx * dx + dy * dy);</span><br><span class="line">		<span class="keyword">return</span> distance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * 功能说明：计算两个地图坐标点之间的距离（远距离计算）</span><br><span class="line">	 * liuxing 2013-9-8 下午10:43:21</span><br><span class="line">	 * <span class="doctag">@param</span> lng1 起点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat1 起点纬度</span><br><span class="line">	 * <span class="doctag">@param</span> lng2 终点经度</span><br><span class="line">	 * <span class="doctag">@param</span> lat2 终点纬度</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getLongDistance</span><span class="params">(<span class="keyword">double</span> lng1, <span class="keyword">double</span> lat1, <span class="keyword">double</span> lng2, <span class="keyword">double</span> lat2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> ew1, ns1, ew2, ns2;</span><br><span class="line">		<span class="keyword">double</span> distance;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 角度转换为弧度</span></span><br><span class="line">		ew1 = lng1 * DEF_PI180;</span><br><span class="line">		ns1 = lat1 * DEF_PI180;</span><br><span class="line">		ew2 = lng2 * DEF_PI180;</span><br><span class="line">		ns2 = lat2 * DEF_PI180;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 求大圆劣弧与球心所夹的角(弧度)</span></span><br><span class="line">		distance = Math.sin(ns1) * Math.sin(ns2) + Math.cos(ns1) * Math.cos(ns2) * Math.cos(ew1 - ew2);</span><br><span class="line">		<span class="comment">// 调整到[-1..1]范围内，避免溢出</span></span><br><span class="line">		<span class="keyword">if</span> (distance &gt; <span class="number">1.0</span>)&#123;</span><br><span class="line">			distance = <span class="number">1.0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt; -<span class="number">1.0</span>)&#123;</span><br><span class="line">			distance = -<span class="number">1.0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 求大圆劣弧长度</span></span><br><span class="line">		distance = DEF_R * Math.acos(distance);</span><br><span class="line">		<span class="keyword">return</span> distance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> mLat1 = <span class="number">31.24081800000000</span>; 	<span class="comment">// point1纬度</span></span><br><span class="line">		<span class="keyword">double</span> mLng1 = <span class="number">121.46541700000000</span>; 	<span class="comment">// point1经度</span></span><br><span class="line">		<span class="keyword">double</span> mLat2 = <span class="number">31.239946</span>;	<span class="comment">// point2纬度</span></span><br><span class="line">		<span class="keyword">double</span> mLng2 = <span class="number">121.466417</span>;	<span class="comment">// point2经度</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">double</span> distanceByShort = getShortDistance(mLng1, mLat1, mLng2, mLat2);</span><br><span class="line">		System.out.println(distanceByShort);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">double</span> distanceByLong = getLongDistance(mLng1, mLat1, mLng2, mLat2);</span><br><span class="line">		System.out.println(distanceByLong);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用SqlServer函数计算">使用SqlServer函数计算</h2><p>其他数据库版本请找到相应的函数替换后移植</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">-- =============================================</span><br><span class="line">-- Author:      liuxing</span><br><span class="line">-- Create date: 2013-09-10</span><br><span class="line">-- Description:	计算2个坐标点的距离（短距离计算）</span><br><span class="line">-- =============================================</span><br><span class="line">CREATE function dbo.fn_getShortDistance(</span><br><span class="line">	 @lng1 decimal(19,11)</span><br><span class="line">	,@lat1 decimal(19,11)</span><br><span class="line">	,@lng2 decimal(19,11)</span><br><span class="line">	,@lat2 decimal(19,11)</span><br><span class="line">)</span><br><span class="line">returns decimal(19,11)</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line">	--declare @lng1 decimal(19,11)</span><br><span class="line">	--declare @lat1 decimal(19,11)</span><br><span class="line">	--declare @lng2 decimal(19,11)</span><br><span class="line">	--declare @lat2 decimal(19,11)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	--set @lat1 = 31.238662--; 	// point1纬度</span><br><span class="line">	--set @lng1 = 121.466633--; // point1经度</span><br><span class="line">	--set @lat2 = 31.239727--;	// point2纬度</span><br><span class="line">	--set @lng2 = 121.462745--;	// point2经度</span><br><span class="line">	declare @ew1 decimal(19,11)</span><br><span class="line">		, @ns1 decimal(19,11)</span><br><span class="line">		, @ew2 decimal(19,11)</span><br><span class="line">		, @ns2 decimal(19,11)</span><br><span class="line">		, @dx decimal(19,11)</span><br><span class="line">		, @dy decimal(19,11)</span><br><span class="line">		, @dew decimal(19,11)</span><br><span class="line">		, @distance decimal(19,11)</span><br><span class="line">	-- 角度转换为弧度</span><br><span class="line">	set @ew1 = Radians(@lng1)-- * 0.01745329252;</span><br><span class="line">	set @ns1 = Radians(@lat1)-- * 0.01745329252;</span><br><span class="line">	set @ew2 = Radians(@lng2)-- * 0.01745329252;</span><br><span class="line">	set @ns2 = Radians(@lat2)-- * 0.01745329252;</span><br><span class="line">	-- 经度差</span><br><span class="line">	set @dew = @ew1 - @ew2;</span><br><span class="line">	-- 若跨东经和西经180 度，进行调整</span><br><span class="line">	if (@dew &gt; Pi())</span><br><span class="line">	begin</span><br><span class="line">		set @dew = 2 * Pi() - @dew;</span><br><span class="line">	end</span><br><span class="line">	else if (@dew &lt; -Pi())</span><br><span class="line">	begin</span><br><span class="line">		set @dew = 2 * Pi() + @dew;</span><br><span class="line">	end</span><br><span class="line">		</span><br><span class="line">	set @dx = 6370693.5 * Cos(@ns1) * @dew -- 东西方向长度(在纬度圈上的投影长度)</span><br><span class="line">	set @dy = 6370693.5 * (@ns1 - @ns2)   -- 南北方向长度(在经度圈上的投影长度)</span><br><span class="line">	-- 勾股定理求斜边长,开平方根</span><br><span class="line">	set @distance = sqrt(@dx * @dx + @dy * @dy);</span><br><span class="line">	return @distance;</span><br><span class="line">	--print @distance</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="使用Java进行计算">使用Java进行计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">]]>
    </summary>
    
      <category term="地图" scheme="http://liuxing.info/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="坐标运算" scheme="http://liuxing.info/tags/%E5%9D%90%E6%A0%87%E8%BF%90%E7%AE%97/"/>
    
      <category term="距离" scheme="http://liuxing.info/tags/%E8%B7%9D%E7%A6%BB/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Websocket实例]]></title>
    <link href="http://liuxing.info/2015/02/09/websocket-demo/"/>
    <id>http://liuxing.info/2015/02/09/websocket-demo/</id>
    <published>2015-02-09T15:33:56.000Z</published>
    <updated>2015-06-16T13:47:13.000Z</updated>
    <content type="html"><![CDATA[<p>记录下自己在用的websocket</p>
<h2 id="介绍">介绍</h2><p>现在很多网站为了实现即时通讯，所用的技术都是轮询(polling)。轮询是在特定的的时间间隔（如每1秒），<br>由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客服端的浏览器。<br>这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，<br>然而HTTP request 的header是非常长的，里面包含的数据可能只是一个很小的值，这样会占用很多的带宽。</p>
<p>而最比较新的技术去做轮询的效果是Comet – 用了AJAX。但这种技术虽然可达到全双工通信，但依然需要发出请求。</p>
<p>在 WebSocket API，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>
<h2 id="运行环境：">运行环境：</h2><h3 id="客户端">客户端</h3><p>实现了websocket的浏览器</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Chrome</td>
<td style="text-align:left">Supported in version 4+</td>
</tr>
<tr>
<td style="text-align:left">Firefox</td>
<td style="text-align:left">Supported in version 4+</td>
</tr>
<tr>
<td style="text-align:left">Internet Explorer</td>
<td style="text-align:left">Supported in version 10+</td>
</tr>
<tr>
<td style="text-align:left">Opera</td>
<td style="text-align:left">Supported in version 10+</td>
</tr>
<tr>
<td style="text-align:left">Safari</td>
<td style="text-align:left">Supported in version 5+</td>
</tr>
</tbody>
</table>
<h3 id="服务端">服务端</h3><h4 id="依赖">依赖</h4><p>Tomcat 7.0.47以上 + J2EE7</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>tomcat-websocket-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>7.0.47<span class="tag">&lt;/<span class="title">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：早前业界没有统一的标准，各服务器都有各自的实现，现在J2EE7的JSR356已经定义了统一的标准，请尽量使用支持最新通用标准的服务器。</p>
<p>详见：<br><a href="http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html" target="_blank" rel="external">http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html</a><br><a href="http://jinnianshilongnian.iteye.com/blog/1909962" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1909962</a></p>
<p>我是用的Tomcat 7.0.57 + Java7<br>必须是Tomcat 7.0.47以上<br>详见：<a href="http://www.iteye.com/news/28414" target="_blank" rel="external">http://www.iteye.com/news/28414</a></p>
<p>ps：最早我们是用的Tomcat 7自带的实现，后来要升级Tomcat 8，结果原来的实现方式在Tomcat 8不支持了，就只好切换到支持Websocket 1.0版本的Tomcat了。</p>
<p>主流的java web服务器都有支持JSR365标准的版本了，请自行Google。 </p>
<p>用nginx做反向代理的需要注意啦，socket请求需要做特殊配置的，切记！</p>
<p>Tomcat的处理方式建议修改为NIO的方式，同时修改连接数到合适的参数，请自行Google！</p>
<p>服务端不需要在web.xml中做额外的配置，Tomcat启动后就可以直接连接了。</p>
<h4 id="实现">实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dooioo.websocket.utils.SessionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：websocket处理类, 使用J2EE7的标准</span><br><span class="line"> *         切忌直接在该连接处理类中加入业务处理代码</span><br><span class="line"> * 作者：liuxing(2014-11-14 04:20)</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">//relationId和userCode是我的业务标识参数,websocket.ws是连接的路径，可以自行定义</span></span><br><span class="line"><span class="annotation">@ServerEndpoint</span>(<span class="string">"/websocket.ws/&#123;relationId&#125;/&#123;userCode&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketEndPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Log log = LogFactory.getLog(WebsocketEndPoint.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 打开连接时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                       @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                       Session session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">"Websocket Start Connecting: "</span> + SessionUtils.getKey(relationId, userCode));</span><br><span class="line">        SessionUtils.put(relationId, userCode, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 收到客户端消息时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> message</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onMessage</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                            @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                            String message) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Got your message ("</span> + message + <span class="string">").Thanks !"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 异常时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                        @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                        Throwable throwable,</span><br><span class="line">                        Session session) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Websocket Connection Exception: "</span> + SessionUtils.getKey(relationId, userCode));</span><br><span class="line">        log.info(throwable.getMessage(), throwable);</span><br><span class="line">        SessionUtils.remove(relationId, userCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 关闭连接时触发</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@param</span> session</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(@PathParam(<span class="string">"relationId"</span>)</span> String relationId,</span><br><span class="line">                        @<span class="title">PathParam</span><span class="params">(<span class="string">"userCode"</span>)</span> <span class="keyword">int</span> userCode,</span><br><span class="line">                        Session session) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Websocket Close Connection: "</span> + SessionUtils.getKey(relationId, userCode));</span><br><span class="line">        SessionUtils.remove(relationId, userCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工具类用来存储唯一key和连接</p>
<p>这个是我业务的需要，我的业务是服务器有对应动作触发时，推送数据到客户端，没有接收客户端数据的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 功能说明：用来存储业务定义的sessionId和连接的对应关系</span><br><span class="line"> *          利用业务逻辑中组装的sessionId获取有效连接后进行后续操作</span><br><span class="line"> * 作者：liuxing(2014-12-26 02:32)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Session&gt; clients = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String relationId, <span class="keyword">int</span> userCode, Session session)</span></span>&#123;</span><br><span class="line">        clients.put(getKey(relationId, userCode), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">get</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.get(getKey(relationId, userCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span></span>&#123;</span><br><span class="line">        clients.remove(getKey(relationId, userCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断是否有连接</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasConnection</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients.containsKey(getKey(relationId, userCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 组装唯一识别的key</span><br><span class="line">     * <span class="doctag">@param</span> relationId</span><br><span class="line">     * <span class="doctag">@param</span> userCode</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">(String relationId, <span class="keyword">int</span> userCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> relationId + <span class="string">"_"</span> + userCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推送数据到客户端</p>
<p>在其他业务方法中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将数据传回客户端</span><br><span class="line"> * 异步的方式</span><br><span class="line"> * <span class="doctag">@param</span> relationId</span><br><span class="line"> * <span class="doctag">@param</span> userCode</span><br><span class="line"> * <span class="doctag">@param</span> message</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcast</span><span class="params">(String relationId, <span class="keyword">int</span> userCode, String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TelSocketSessionUtils.hasConnection(relationId, userCode)) &#123;</span><br><span class="line">        TelSocketSessionUtils.get(relationId, userCode).getAsyncRemote().sendText(message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(TelSocketSessionUtils.getKey(relationId, userCode) + <span class="string">" Connection does not exist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我是使用异步的方法推送数据，还有同步的方法</p>
<p>详见：<a href="http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html" target="_blank" rel="external">http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html</a></p>
<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var webSocket = <span class="keyword">null</span>;</span><br><span class="line">var tryTime = <span class="number">0</span>;</span><br><span class="line">$(function () &#123;</span><br><span class="line">    initSocket();</span><br><span class="line"></span><br><span class="line">    window.onbeforeunload = function () &#123;</span><br><span class="line">        <span class="comment">//离开页面时的其他操作</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 初始化websocket，建立连接</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">function <span class="title">initSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!window.WebSocket) &#123;</span><br><span class="line">        alert(<span class="string">"您的浏览器不支持websocket！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    webSocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8080/websocket.ws/"</span> + relationId + <span class="string">"/"</span> + userCode);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 收到服务端消息</span></span><br><span class="line">    webSocket.onmessage = function (msg) &#123;</span><br><span class="line">        console.log(msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异常</span></span><br><span class="line">    webSocket.onerror = function (event) &#123;</span><br><span class="line">        console.log(event);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建立连接</span></span><br><span class="line">    webSocket.onopen = function (event) &#123;</span><br><span class="line">        console.log(event);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断线重连</span></span><br><span class="line">    webSocket.onclose = function () &#123;</span><br><span class="line">        <span class="comment">// 重试10次，每次之间间隔10秒</span></span><br><span class="line">        <span class="keyword">if</span> (tryTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            setTimeout(function () &#123;</span><br><span class="line">                webSocket = <span class="keyword">null</span>;</span><br><span class="line">                tryTime++;</span><br><span class="line">                initSocket();</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tryTime = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他调试工具</p>
<p>Java实现一个websocket的客户端</p>
<p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.java-websocket<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>Java-WebSocket<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.ClientEndpoint;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;  </span><br><span class="line">   </span><br><span class="line"><span class="annotation">@ClientEndpoint</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;  </span><br><span class="line">    <span class="annotation">@OnOpen</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Connected to endpoint: "</span> + session.getBasicRemote());  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            session.getBasicRemote().sendText(<span class="string">"Hello"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="annotation">@OnMessage</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;  </span><br><span class="line">        System.out.println(message);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="annotation">@OnError</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;  </span><br><span class="line">        t.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.net.URI;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.ContainerProvider;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.DeploymentException;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.WebSocketContainer;  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientApp</span> </span>&#123;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> Session session;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span>  </span><br><span class="line">             </span>&#123;  </span><br><span class="line">   </span><br><span class="line">            WebSocketContainer container = ContainerProvider.getWebSocketContainer();  </span><br><span class="line">   </span><br><span class="line">            String uri = <span class="string">"ws://127.0.0.1:8080/websocket.ws/relationId/12345"</span>;  </span><br><span class="line">            System.out.println(<span class="string">"Connecting to "</span> + uri);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                session = container.connectToServer(MyClient.class, URI.create(uri));  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (DeploymentException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;               </span><br><span class="line">   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;  </span><br><span class="line">        MyClientApp client = <span class="keyword">new</span> MyClientApp();  </span><br><span class="line">        client.start();  </span><br><span class="line">   </span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));  </span><br><span class="line">        String input = <span class="string">""</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            do&#123;  </span><br><span class="line">                input = br.readLine();  </span><br><span class="line">                <span class="keyword">if</span>(!input.equals(<span class="string">"exit"</span>))  </span><br><span class="line">                    client.session.getBasicRemote().sendText(input);  </span><br><span class="line">   </span><br><span class="line">            &#125;<span class="keyword">while</span>(!input.equals(<span class="string">"exit"</span>));  </span><br><span class="line">   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>chrome安装一个websocket客户端调试 </p>
<p><img src="/images/websocket-01.png" alt="websocket-01"></p>
<p>最后</p>
<p>为了统一的操作体验，对于一些不支持websocket的浏览器，请使用socketjs技术做客户端开发。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录下自己在用的websocket</p>
<h2 id="介绍">介绍</h2><p>现在很多网站为了实现即时通讯，所用的技术都是轮询(polling)。轮询是在特定的的时间间隔（如每1秒），<br>由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据]]>
    </summary>
    
      <category term="websocket" scheme="http://liuxing.info/tags/websocket/"/>
    
      <category term="Java" scheme="http://liuxing.info/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jquery常用选择器]]></title>
    <link href="http://liuxing.info/2015/02/01/jquery%E5%B8%B8%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://liuxing.info/2015/02/01/jquery常用选择器/</id>
    <published>2015-01-31T16:00:00.000Z</published>
    <updated>2015-06-16T13:06:06.000Z</updated>
    <content type="html"><![CDATA[<p>记录一下</p>
<h2 id="选择器">选择器</h2><h3 id="基本选择器">基本选择器</h3><p> <code>#</code>id —— 根据指定的id匹配一个元素<br> element —— 根据“元素名”匹配元素<br> .class —— 根据指定的“类名”匹配元素<br> selector1,selector2,selector3… —— 组合选择器，为并集关系</p>
<ul>
<li>—— 通用选择器， 匹配所有元素</li>
</ul>
<h3 id="层次选择器">层次选择器</h3><p> $(‘ancestor descendant’) —— 匹配ancestor下的所有descendant元素， 包括子孙节点<br> $(‘parent &gt; child’) —— 匹配parent下的所有child元素， 注意child为parent的直接子节点， 即不包含子孙节点<br> $(‘prev + next’) —— 匹配pre元素后的next元素<br> $(‘prev~siblings’) —— 匹配prev元素后的所有siblings元素</p>
<h3 id="基本过滤选择器（针对一个集合的操作，可以把这个集合想象成ArrayList）">基本过滤选择器（针对一个集合的操作，可以把这个集合想象成ArrayList）</h3><p> :first —— 选择第一个元素， 如$(‘div:first’)， 选择第一个div元素<br> :last —— 选择最后一个元素<br> :not(selector) —— 过滤掉所有与给定selector匹配的元素，如$(‘input:not(.myClass)’)选取class不是myClass的input元素<br> :even —— 选取索引是偶数的所有元素， 索引从0开始<br> :odd —— 选取索引是奇数的所有元素<br> :eq(index)  —— 选取索引是index的元素<br> :gt(index) —— 选取索引大于index的所有元素<br> :header —— 选取所有的标题元素，如h1,h2,h3等<br> :animated —— 选取当前正在进行动画的的所有元素</p>
<h3 id="子元素过滤器（父元素的第几个孩子，故在使用时都会以父元素作为上下文）">子元素过滤器（父元素的第几个孩子，故在使用时都会以父元素作为上下文）</h3><p> :nth-child —— 选取父元素的第几个孩子， 注意索引下标从1开始， 而:eq(index)是从0开始的<br> :nth-child(even) 选取父元素下索引值是偶数的子元素<br> :nth-child(odd) 选取父元素下索引值是奇数的子元素<br> :nth-child(index) 选取父元素下索引值为index的子元素<br> :nth-child(3n) 选取父元素下索引值是3的倍数的元素（n从0开始）<br> :nth-child(3n+1) 选取父元素下索引值是3n+1的元素 （n从0开始）<br> :first-child —— 父元素下的第一个孩子<br> :last-child —— 父元素下的最后一个孩子<br> :only-child —— 父元素下的唯一孩子（选中独生子）</p>
<h3 id="内容过滤选择器">内容过滤选择器</h3><p> :contains(text) —— 选取含有文本内容为”text”的元素<br> :empty —— 选取不包含子元素或文本的空元素<br> :has(selector) —— 选取含有选择器所匹配的元素的元素，如$(‘div:has(p)’)选取含有p元素的所有div元素<br> :parent —— 选取含有子元素或文本的元素，如$(‘div:parent’)选取拥有子元素或文本元素的所有div元素</p>
<h3 id="可见性过滤选择器">可见性过滤选择器</h3><p> :hidden ——  选取所有不可见元素，包括hidden， display:none，visibility:hidden元素，若只想选择input，则可用input:hidden<br> :visible —— 选取所有可见元素</p>
<h3 id="属性过滤选择器">属性过滤选择器</h3><p> [attribute] —— 选取拥有此属性的元素<br> [attribute=value] —— 选取属性值为value的元素<br> [attribute!=value] —— 选取属性值不等于value的元素<br> [attribute^=value] —— 选取属性值以value开头的元素<br> [attribute$=value] —— 选取属性值以vlue结尾的元素<br> [attribute*=value] —— 选取属性值包含value的元素<br> [selector1][selector2][selector3] —— 复合属性选择器，交集关系， 如$(“div[id][title$=’test’]”)选取拥有属性id，并且属性title以”test”结尾的div元素</p>
<h3 id="表单对象属性过滤器">表单对象属性过滤器</h3><p> :enabled —— 选取所有可用元素<br> :disabled —— 选取所有不可用元素<br> :checked —— 选取所有被选中的元素（单选和复选框）<br> :selected —— 选取所有被选中的select元素</p>
<h3 id="表单选择器">表单选择器</h3><p> :input —— 选取所有的input,textarea,select,button元素<br> :text —— 选取所有的单行文本<br> :password —— 选取所有的密码框<br> :radio —— 选取所有的单选按钮<br> :checkbox —— 选取所有的复选框<br> :submit —— 选取所有的提交按钮<br> :image —— 选取所有的图像按钮<br> :reset —— 选取所有的重置按钮<br> :button —— 选取所有的按钮<br> :file —— 选取所有的上传文件域<br> :hidden —— 选取所拥有不可见元素</p>
<h2 id="更多">更多</h2><p> 更多语法参阅API文档</p>
<p> <a href="http://jquery.cuishifeng.cn" target="_blank" rel="external">http://jquery.cuishifeng.cn</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录一下</p>
<h2 id="选择器">选择器</h2><h3 id="基本选择器">基本选择器</h3><p> <code>#</code>id —— 根据指定的id匹配一个元素<br> element —— 根据“元素名”匹配元素<br> .class —— 根据指]]>
    </summary>
    
      <category term="jquery" scheme="http://liuxing.info/tags/jquery/"/>
    
      <category term="前端" scheme="http://liuxing.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[备忘]]></title>
    <link href="http://liuxing.info/2015/01/01/faqs/"/>
    <id>http://liuxing.info/2015/01/01/faqs/</id>
    <published>2014-12-31T16:00:00.000Z</published>
    <updated>2015-06-16T16:16:18.000Z</updated>
    <content type="html"><![CDATA[<p>记录工作中遇到的一些小问题及解决办法，以防忘记后重头再找答案。</p>
<h2 id="格式:">格式:</h2><p>问:Win7下 Eclipse中按”Alt+Ctrl+Down或Alt+Ctrl+Up”时，结果屏幕倒了怎么办？<br>答:是不是和其它应用的快捷键冲突了？比如Intel显卡，则可选择“图形属性”&gt;“选项和支持”，将对应快捷键换掉。参考:<a href="http://www.2cto.com/os/201201/116412.html" target="_blank" rel="external">http://www.2cto.com/os/201201/116412.html</a></p>
<h2 id="或作为url收藏记录">或作为url收藏记录</h2><ul>
<li>Markdown语法: <a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">http://wowubuntu.com/markdown/basic.html</a><br>  马克飞象: <a href="http://maxiang.info/" target="_blank" rel="external">http://maxiang.info/</a><br>  Cmd Markdown: <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">https://www.zybuluo.com/mdeditor</a><br>  代码显示规范: <a href="http://hexo.chenall.net/post/code/" target="_blank" rel="external">http://hexo.chenall.net/post/code/</a></li>
<li>Oracle现在真是恶心，下载个Java SDK还非得让登陆不可。只好再找下载地址了: <a href="http://ghaffarian.net/downloads/" target="_blank" rel="external">http://ghaffarian.net/downloads/</a>  </li>
<li>GIT文章收藏:<br>  Git分支管理策略: <a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/07/git.html</a><br>  Git查看、删除、重命名远程分支和tag: <a href="http://zengrong.net/post/1746.htm" target="_blank" rel="external">http://zengrong.net/post/1746.htm</a>  </li>
<li>Google无障碍浏览链接: <a href="https://github.com/greatfire/wiki" target="_blank" rel="external">https://github.com/greatfire/wiki</a>  </li>
<li>在线Android等源码: <a href="http://www.grepcode.com/" target="_blank" rel="external">http://www.grepcode.com/</a>, <a href="http://androidxref.com/" target="_blank" rel="external">http://androidxref.com/</a>  </li>
<li>Twitter University: <a href="http://www.bluemobi.cn/" target="_blank" rel="external">http://www.bluemobi.cn/</a>  </li>
</ul>
<h2 id="本项目使用了">本项目使用了</h2><ul>
<li>CNZZ的网站统计服务，官网:<a href="http://cnzz.com/" target="_blank" rel="external">http://cnzz.com/</a></li>
<li>友言的网友评论服务，官网:<a href="http://www.uyan.cc/" target="_blank" rel="external">http://www.uyan.cc/</a>  </li>
<li>Google 的Adsense广告，官网:<a href="https://www.google.com/adsense/login/zh_CN/" target="_blank" rel="external">https://www.google.com/adsense/login/zh_CN/</a>  </li>
</ul>
<p>如需查看或管理网站统计、评论或广告，请自行注册帐号并修改_includes目录下相关文件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录工作中遇到的一些小问题及解决办法，以防忘记后重头再找答案。</p>
<h2 id="格式:">格式:</h2><p>问:Win7下 Eclipse中按”Alt+Ctrl+Down或Alt+Ctrl+Up”时，结果屏幕倒了怎么办？<br>答:是不是和其它应用的快捷键冲突了]]>
    </summary>
    
      <category term="CNZZ" scheme="http://liuxing.info/tags/CNZZ/"/>
    
      <category term="GIT" scheme="http://liuxing.info/tags/GIT/"/>
    
      <category term="Markdown" scheme="http://liuxing.info/tags/Markdown/"/>
    
      <category term="其他" scheme="http://liuxing.info/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我编程我快乐]]></title>
    <link href="http://liuxing.info/2014/12/10/%E6%88%91%E7%BC%96%E7%A8%8B%E6%88%91%E5%BF%AB%E4%B9%90/"/>
    <id>http://liuxing.info/2014/12/10/我编程我快乐/</id>
    <published>2014-12-10T06:51:20.000Z</published>
    <updated>2015-06-16T13:07:55.000Z</updated>
    <content type="html"><![CDATA[<p>感觉还不错，分享一下！</p>
<p><img src="/images/bianchenghappy/01.png" alt="01"></p>
<p><img src="/images/bianchenghappy/02.png" alt="02"></p>
<p><img src="/images/bianchenghappy/03.png" alt="03"></p>
<p><img src="/images/bianchenghappy/04.png" alt="04"></p>
<p><strong>你懂的！</strong></p>
<p>链接: <a href="http://pan.baidu.com/s/1nqpGE" target="_blank" rel="external">http://pan.baidu.com/s/1nqpGE</a> 密码: k2un</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感觉还不错，分享一下！</p>
<p><img src="/images/bianchenghappy/01.png" alt="01"></p>
<p><img src="/images/bianchenghappy/02.png" alt="02"></p>
<p><i]]>
    </summary>
    
      <category term="心态" scheme="http://liuxing.info/tags/%E5%BF%83%E6%80%81/"/>
    
      <category term="编程" scheme="http://liuxing.info/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="职业发展" scheme="http://liuxing.info/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
      <category term="书摘" scheme="http://liuxing.info/categories/%E4%B9%A6%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java7 Try-with-resources (TWR)]]></title>
    <link href="http://liuxing.info/2014/09/25/Java7%20Try-with-resources%20(TWR)/"/>
    <id>http://liuxing.info/2014/09/25/Java7 Try-with-resources (TWR)/</id>
    <published>2014-09-25T05:45:49.000Z</published>
    <updated>2015-06-16T13:05:05.000Z</updated>
    <content type="html"><![CDATA[<p>转自《Java程序员修炼之道》</p>
<p>使用Java7的Try-with-resources来自动关闭资源</p>
<p>这个修改说起来容易，但其实暗藏玄机，最终证明做起来比最初预想的要难。其基本设想是把资源（比如文件或类似的东西）的作用域限定在代码块内，当程序离开这个代码块时，资源会被自动关闭。</p>
<p>这是一项非常重要的改进，因为没人能在手动关闭资源时做到100%正确，甚至不久前Sun提供的操作指南都是错的。在向Coin项目提交这一提案时，提交者宣称JDK中有三分之二的close()用法都有bug，真是不可思议！</p>
<p>好在编译器可以生成这种学究化、公式化且手工编写易犯错的代码，所以Java 7借助了编译器来实现这项改进。</p>
<p>这可以减少我们编写错误代码的几率。相比之下，想想你用Java 6写段代码，要从一个URL（url）中读取字节流，并把读取到的内容写入到文件（out）中，这么做很容易产生错误。以下代码是可行方案之一。</p>
<p><strong>Java 6中的资源管理语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  is = url.openStream();</span><br><span class="line">  OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buf)) &gt;= <span class="number">0</span>)</span><br><span class="line">      out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException iox) &#123;               <span class="comment">// 处理异常（能读或写）</span></span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       out.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException closeOutx) &#123;      <span class="comment">// 遇到异常也做不了什么</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (FileNotFoundException fnfx) &#123;      <span class="comment">// 处理异常</span></span><br><span class="line"> &#125; <span class="keyword">catch</span> (IOException openx) &#123;               <span class="comment">// 处理异常</span></span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (is != <span class="keyword">null</span>) is.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException closeInx) &#123;         <span class="comment">// 遇到异常也做不了什么</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>看明白了吗？重点是在处理外部资源时，墨菲定律（任何事都可能出错）一定会生效，比如：</p>
<ul>
<li>URL中的InputStream无法打开，不能读取或无法正常关闭；</li>
<li>OutputStream对应的File无法打开，无法写入或不能正常关闭；</li>
<li>上面的问题同时出现。</li>
</ul>
<p>最后一种情况是最让人头疼的——异常的各种组合拳打出来令人难以招架。</p>
<p>新语法能大大减少错误发生的可能性，这正是它受欢迎的主要原因。编译器不会犯开发人员编写代码时易犯的错误。</p>
<p>让我们看看代码清单1-3中的代码用Java 7写出来什么样。和前面一样，url是一个指向下载目标文件的URL对象，file是一个保存下载数据的File对象。</p>
<p><strong>Java 7中的资源管理语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">     InputStream is = url.openStream() ) &#123;</span><br><span class="line">  <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">  <span class="keyword">int</span>  len;</span><br><span class="line">  <span class="keyword">while</span> ((len = is.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是资源自动化管理代码块的基本形式——把资源放在try的圆括号内。C#程序员看到这个也许会觉得有点眼熟，是的，它的确很像C#中的从句，带着这种理解使用这个新特性是个不错的起点。在这段代码块中使用的资源在处理完成后会自动关闭。</p>
<p>但使用try-with-resources特性时还是要小心，因为在某些情况下资源可能无法关闭。比如在下面的代码中，如果从文件（someFile.bin）创建ObjectInputStream时出错，FileInputStream可能就无法正确关闭。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> ( ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">      FileInputStream(<span class="string">"someFile.bin"</span>)) ) &#123; </span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假定文件（someFile.bin）存在，但可能不是ObjectInput类型的文件，所以文件无法正确打开。因此不能构建ObjectInputStream，所以FileInputStream也没办法关闭。</p>
<p>要确保try-with-resources生效，正确的用法是为各个资源声明独立变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> ( FileInputStream fin = <span class="keyword">new</span> FileInputStream(<span class="string">"someFile.bin"</span>);</span><br><span class="line">          ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fin) ) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TWR的另一个好处是改善了错误跟踪的能力，能够更准确地跟踪堆栈中的异常。在Java 7之前，处理资源时抛出的异常信息经常会被覆盖。TWR中可能也会出现这种情况，因此Java 7对跟踪堆栈进行了改进，现在开发人员能看到可能会丢失的异常类型信息。</p>
<p>比如在下面这段代码中，有一个返回InputStream的值为null的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span>(InputStream i = getNullStream()) &#123;</span><br><span class="line">   i.available();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在改进后的跟踪堆栈中能看到提示，注意其中被抑制的NullPointerException（简称NPE）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException </span><br><span class="line">  at wgjd.ch01.ScratchSuprExcep.run(ScratchSuprExcep.java:<span class="number">23</span>)</span><br><span class="line">  at wgjd.ch01.ScratchSuprExcep.main(ScratchSuprExcep.java:<span class="number">39</span>)</span><br><span class="line">  Suppressed:java.lang.NullPointerException </span><br><span class="line">  at wgjd.ch01.ScratchSuprExcep.run(ScratchSuprExcep.java:<span class="number">24</span>)   </span><br><span class="line">    <span class="number">1</span> more</span><br></pre></td></tr></table></figure>
<p><strong>TWR与AutoCloseable</strong></p>
<p>目前TWR特性依靠一个新定义的接口实现AutoCloseable。TWR的try从句中出现的资源类都必须实现这个接口。Java 7平台中的大多数资源类都被修改过，已经实现了AutoCloseable（Java 7中还定义了其父接口Closeable），但并不是全部资源相关的类都采用了这项新技术。不过，JDBC 4.1已经具备了这个特性。</p>
<p>然而在你自己的代码里，在需要处理资源时一定要用TWR，从而避免在异常处理时出现bug。</p>
<p>希望你能尽快使用try-with-resources，把那些多余的bug从代码库中赶走。</p>
<p><img src="/images/xiulianzhidao.png" alt="xiulianzhidao"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转自《Java程序员修炼之道》</p>
<p>使用Java7的Try-with-resources来自动关闭资源</p>
<p>这个修改说起来容易，但其实暗藏玄机，最终证明做起来比最初预想的要难。其基本设想是把资源（比如文件或类似的东西）的作用域限定在代码块内，当程序离开这]]>
    </summary>
    
      <category term="Java7" scheme="http://liuxing.info/tags/Java7/"/>
    
      <category term="TWR" scheme="http://liuxing.info/tags/TWR/"/>
    
      <category term="书摘" scheme="http://liuxing.info/categories/%E4%B9%A6%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux软件的安装、更新与卸载]]></title>
    <link href="http://liuxing.info/2014/04/25/linux%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
    <id>http://liuxing.info/2014/04/25/linux软件的安装、更新与卸载/</id>
    <published>2014-04-24T17:52:00.000Z</published>
    <updated>2015-06-16T13:06:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>Linux常见的安装为tar，zip，gz，rpm，deb，bin等。可以简单的分为三类.</p>
<blockquote>
<ul>
<li>打包或压缩文件tar，zip，gz等，一般解压后即可，或者解压后运行sh文件；</li>
<li>对应的有管理工具的deb，rpm等，通常的这类安装文件可以通过第三方的命令行或UI来简单的安装。<br>例如Ubuntu中的apt来安装；deb，Redhat中的yum来安装rpm；</li>
<li>像.bin类，其实就是把sh和zip打包为bin，或把sh和rpm打包为bin等，当在命令行运行bin安装文件时，其实就是bin里面的sh来解压bin中的zip或安装rpm的过程</li>
</ul>
</blockquote>
<p><br><br></p>
<h2 id="安装">安装</h2><h3 id="rpm安装，更新与卸载">rpm安装，更新与卸载</h3><p><em>RPM包，这种软件包就像windows的EXE安装文件一样，各种文件已经编译好，并打了包，哪个文件该放到哪个文件夹，都指定好了，安装非常方便，在图形界面里你只需要双击就能自动安装。但是有一点不好，就是包的依赖关系，很恶心。</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A. rpm安装</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>) 找到相应的软件包，比如jmagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">3</span>.src.rpm，下载到本机某个目录；</span><br><span class="line">  <span class="number">2</span>) 打开一个终端，su 成root用户；</span><br><span class="line">  <span class="number">3</span>) <span class="built_in">cd</span> jmagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">3</span>.src.rpm所在的目录；</span><br><span class="line">  <span class="number">4</span>) 输入rpm -ivh jmagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">3</span>.src.rpm</span><br><span class="line"></span><br><span class="line">B.rpm更新</span><br><span class="line">   <span class="comment">#rpm -Uvh jmagick-6.4.0-3.src.rpm</span></span><br><span class="line"></span><br><span class="line">C.rpm卸载</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>) 查找欲卸载的软件包 rpm -qa | grep ×XXX×</span><br><span class="line">   <span class="number">2</span>) 例如找到软件mysql-<span class="number">4.1</span>.<span class="number">22</span>-<span class="number">2</span>.el4_8.<span class="number">4</span> ，执行rpm <span class="operator">-e</span> mysql-<span class="number">4.1</span>.<span class="number">22</span>-<span class="number">2</span>.el4_8.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"> 注意：查询软件的安装目录，用命令 rpm -ql mysql-<span class="number">4.1</span>.<span class="number">22</span>-<span class="number">2</span>.el4_8.<span class="number">4</span></span><br></pre></td></tr></table></figure>
<h3 id="以-bin结尾的安装包">以.bin结尾的安装包</h3><p><em>bin类似rpm包安装，也比较简单</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin安装</span><br><span class="line">    <span class="number">1</span>) 打开一个SHELL，即终端</span><br><span class="line">    <span class="number">2</span>) 用CD 命令进入源代码压缩包所在的目录</span><br><span class="line">    <span class="number">3</span>) 给文件加上可执行属性：chmod +x ******.bin(中间是字母x，小写)</span><br><span class="line">    <span class="number">4</span>) 执行命令：./******.bin 或者 直接执行 sh ******.bin</span><br><span class="line"></span><br><span class="line">   bin卸载</span><br><span class="line">     把安装时中选择的安装目录删除就OK</span><br></pre></td></tr></table></figure>
<h3 id="tar-gz(bz或bz2等)结尾的源代码包">tar.gz(bz或bz2等)结尾的源代码包</h3><p><em>这种软件包里面都是源程序，没有编译过，需要编译后才能安装</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">源代码安装</span><br><span class="line">    <span class="number">1</span>) 打开一个SHELL，即终端</span><br><span class="line">    <span class="number">2</span>) 用CD 命令进入源代码压缩包所在的目录</span><br><span class="line">    <span class="number">3</span>) 根据压缩包类型解压缩文件(*代表压缩包名称)</span><br><span class="line">　　   tar -zxvf ****.tar.gz</span><br><span class="line">　　   tar -jxvf ****.tar.bz(或bz2)</span><br><span class="line">    <span class="number">4</span>) 用CD命令进入解压缩后的目录</span><br><span class="line">    <span class="number">5</span>) 输入编译文件命令：./configure(有的压缩包已经编译过，这一步可以省去)</span><br><span class="line">    <span class="number">6</span>) 然后是命令：make</span><br><span class="line">    <span class="number">7</span>) 再是安装文件命令：make install</span><br></pre></td></tr></table></figure>
<h3 id="yum安装">yum安装</h3><p><em>yum是rpm的管理工具，管理一个软件库，可以很好的解决依赖关系</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) yum安装</span><br><span class="line">    yum install -y 软件名</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) yum更新</span><br><span class="line">    yum update -y  软件名</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) yum卸载</span><br><span class="line">    yum remove -y 软件名</span><br><span class="line">    或</span><br><span class="line">    yum erase -y 软件名</span><br></pre></td></tr></table></figure>
<h3 id="apt-get安装">apt-get安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get 是deb的管理工具，类似yum</span><br><span class="line">apt-get install package 安装包</span><br><span class="line">apt-get reinstall package  重新安装包</span><br><span class="line">apt-get upgrade 更新已安装的包</span><br><span class="line">apt-cache rdepends package 是查看该包被哪些包依赖</span><br><span class="line">apt-cache depends package 了解使用依赖</span><br><span class="line">apt-get clean &amp;&amp;  apt-get autoclean 清理无用的包</span><br><span class="line">apt-cache show package 获取包的相关信息，如说明、大小、版本等</span><br><span class="line">apt-get remove package 删除包</span><br><span class="line">apt-get purge package  删除包，包括删除配置文件等</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>Linux常见的安装为tar，zip，gz，rpm，deb，bin等。可以简单的分为三类.</p>
<blockquote>
<ul>
<li>打包或压缩文件tar，zip，gz等，一般解压后即可，或者解压后运行sh文件；</li>
<]]>
    </summary>
    
      <category term="linux" scheme="http://liuxing.info/tags/linux/"/>
    
      <category term="系统配置" scheme="http://liuxing.info/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>